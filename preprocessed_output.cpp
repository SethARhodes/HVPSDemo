# 1 "/tmp/arduino/sketches/8F1DEBBEE04D15732CCF4089F12DBD55/sketch/HVPS.ino.cpp"
# 1 "/home/srhodes/Arduino/HVPS//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/tmp/arduino/sketches/8F1DEBBEE04D15732CCF4089F12DBD55/sketch/HVPS.ino.cpp"
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 1
/*
  Arduino.h - Main include file for the Arduino SDK
  Copyright (c) 2014 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdbool.h" 1 3 4

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdbool.h" 3 4
/* Copyright (C) 1998-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  7.16  Boolean type and values  <stdbool.h>
 */
# 39 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdbool.h" 3 4
/* Supporting _Bool in C++ is a GCC extension.  */
# 51 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdbool.h" 3 4
/* Signal that all the definitions are present.  */
# 24 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h" 1 3 4
# 9 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h" 3 4
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 1 3 4
/*
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 1 3 4
/*
 *  $Id$
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/features.h" 1 3 4
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2014.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id$
 */





extern "C" {


# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_newlib_version.h" 1 3 4
/* _newlib_version.h.  Generated from _newlib_version.hin by configure.  */
/* Version macros for internal and downstream use. */
# 29 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/features.h" 2 3 4

/* Macro to test version of GCC.  Returns 0 for non-GCC or too old GCC. */
# 39 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/features.h" 3 4
/* Version with trailing underscores for BSD compatibility. */



/*
 * Feature test macros control which symbols are exposed by the system
 * headers.  Any of these must be defined before including any headers.
 *
 * __STRICT_ANSI__ (defined by gcc -ansi, -std=c90, -std=c99, or -std=c11)
 *	ISO C
 *
 * _POSIX_SOURCE (deprecated by _POSIX_C_SOURCE=1)
 * _POSIX_C_SOURCE >= 1
 * 	POSIX.1-1990
 *
 * _POSIX_C_SOURCE >= 2
 * 	POSIX.2-1992
 *
 * _POSIX_C_SOURCE >= 199309L
 * 	POSIX.1b-1993 Real-time extensions
 *
 * _POSIX_C_SOURCE >= 199506L
 * 	POSIX.1c-1995 Threads extensions
 *
 * _POSIX_C_SOURCE >= 200112L
 * 	POSIX.1-2001 and C99
 *
 * _POSIX_C_SOURCE >= 200809L
 * 	POSIX.1-2008
 *
 * _XOPEN_SOURCE
 *	POSIX.1-1990 and XPG4
 *
 * _XOPEN_SOURCE_EXTENDED
 *	SUSv1 (POSIX.2-1992 plus XPG4v2)
 *
 * _XOPEN_SOURCE >= 500
 *	SUSv2 (POSIX.1c-1995 plus XSI)
 *
 * _XOPEN_SOURCE >= 600
 *	SUSv3 (POSIX.1-2001 plus XSI) and C99
 *
 * _XOPEN_SOURCE >= 700
 *	SUSv4 (POSIX.1-2008 plus XSI)
 *
 * _ISOC99_SOURCE or gcc -std=c99 or g++
 * 	ISO C99
 *
 * _ISOC11_SOURCE or gcc -std=c11 or g++ -std=c++11
 * 	ISO C11
 *
 * _ATFILE_SOURCE (implied by _POSIX_C_SOURCE >= 200809L)
 *	"at" functions
 *
 * _LARGEFILE_SOURCE (deprecated by _XOPEN_SOURCE >= 500)
 *	fseeko, ftello
 *
 * _GNU_SOURCE
 * 	All of the above plus GNU extensions
 *
 * _BSD_SOURCE (deprecated by _DEFAULT_SOURCE)
 * _SVID_SOURCE (deprecated by _DEFAULT_SOURCE)
 * _DEFAULT_SOURCE (or none of the above)
 * 	POSIX-1.2008 with BSD and SVr4 extensions
 *
 * _FORTIFY_SOURCE = 1 or 2
 * 	Object Size Checking function wrappers
 */
# 162 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/features.h" 3 4
/*
 * The following private macros are used throughout the headers to control
 * which symbols should be exposed.  They are for internal use only, as
 * indicated by the leading double underscore, and must never be used outside
 * of these headers.
 *
 * __POSIX_VISIBLE
 * 	any version of POSIX.1; enabled by default, or with _POSIX_SOURCE,
 * 	any value of _POSIX_C_SOURCE, or _XOPEN_SOURCE >= 500.
 *
 * __POSIX_VISIBLE >= 2
 * 	POSIX.2-1992; enabled by default, with _POSIX_C_SOURCE >= 2,
 * 	or _XOPEN_SOURCE >= 500.
 *
 * __POSIX_VISIBLE >= 199309
 * 	POSIX.1b-1993; enabled by default, with _POSIX_C_SOURCE >= 199309L,
 * 	or _XOPEN_SOURCE >= 500.
 *
 * __POSIX_VISIBLE >= 199506
 * 	POSIX.1c-1995; enabled by default, with _POSIX_C_SOURCE >= 199506L,
 * 	or _XOPEN_SOURCE >= 500.
 *
 * __POSIX_VISIBLE >= 200112
 * 	POSIX.1-2001; enabled by default, with _POSIX_C_SOURCE >= 200112L,
 * 	or _XOPEN_SOURCE >= 600.
 *
 * __POSIX_VISIBLE >= 200809
 * 	POSIX.1-2008; enabled by default, with _POSIX_C_SOURCE >= 200809L,
 * 	or _XOPEN_SOURCE >= 700.
 *
 * __XSI_VISIBLE
 *	XPG4 XSI extensions; enabled with any version of _XOPEN_SOURCE.
 *
 * __XSI_VISIBLE >= 4
 *	SUSv1 XSI extensions; enabled with both _XOPEN_SOURCE and
 * 	_XOPEN_SOURCE_EXTENDED together.
 *
 * __XSI_VISIBLE >= 500
 *	SUSv2 XSI extensions; enabled with _XOPEN_SOURCE >= 500.
 *
 * __XSI_VISIBLE >= 600
 *	SUSv3 XSI extensions; enabled with _XOPEN_SOURCE >= 600.
 *
 * __XSI_VISIBLE >= 700
 *	SUSv4 XSI extensions; enabled with _XOPEN_SOURCE >= 700.
 *
 * __ISO_C_VISIBLE >= 1999
 * 	ISO C99; enabled with gcc -std=c99 or newer (on by default since GCC 5),
 * 	any version of C++, or with _ISOC99_SOURCE, _POSIX_C_SOURCE >= 200112L,
 * 	or _XOPEN_SOURCE >= 600.
 *
 * __ISO_C_VISIBLE >= 2011
 * 	ISO C11; enabled with gcc -std=c11 or newer (on by default since GCC 5),
 * 	g++ -std=c++11 or newer (on by default since GCC 6), or with
 * 	_ISOC11_SOURCE.
 *
 * __ATFILE_VISIBLE
 *	"at" functions; enabled by default, with _ATFILE_SOURCE,
 * 	_POSIX_C_SOURCE >= 200809L, or _XOPEN_SOURCE >= 700.
 *
 * __LARGEFILE_VISIBLE
 *	fseeko, ftello; enabled with _LARGEFILE_SOURCE or _XOPEN_SOURCE >= 500.
 *
 * __BSD_VISIBLE
 * 	BSD extensions; enabled by default, or with _BSD_SOURCE.
 *
 * __SVID_VISIBLE
 * 	SVr4 extensions; enabled by default, or with _SVID_SOURCE.
 *
 * __MISC_VISIBLE
 * 	Extensions found in both BSD and SVr4 (shorthand for
 * 	(__BSD_VISIBLE || __SVID_VISIBLE)), or newlib-specific
 * 	extensions; enabled by default.
 *
 * __GNU_VISIBLE
 * 	GNU extensions; enabled with _GNU_SOURCE.
 *
 * __SSP_FORTIFY_LEVEL
 * 	Object Size Checking; defined to 0 (off), 1, or 2.
 *
 * In all cases above, "enabled by default" means either by defining
 * _DEFAULT_SOURCE, or by not defining any of the public feature test macros.
 */
# 333 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/features.h" 3 4
/* RTEMS adheres to POSIX -- 1003.1b with some features from annexes.  */
# 390 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/features.h" 3 4
/* XMK loosely adheres to POSIX -- 1003.1 */
# 531 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/features.h" 3 4
}
# 9 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 2 3 4

/*
 * Guess on types by examining *_MIN / *_MAX defines.
 */

/* GCC >= 3.3.0 has __<val>__ implicitly defined. */







/* Check if "long long" is 64bit wide */
/* Modern GCCs provide __LONG_LONG_MAX__, SUSv3 wants LLONG_MAX */





/* Check if "long" is 64bit or 32bit wide */







extern "C" {



typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long int __int32_t;

typedef long unsigned int __uint32_t;
# 103 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 134 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;
# 200 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 247 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 3 4
}
# 13 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 2 3 4
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_intsup.h" 1 3 4
/*
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/features.h" 1 3 4
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2014.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id$
 */
# 13 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_intsup.h" 2 3 4


/* gcc > 3.2 implicitly defines the values we are interested */






/* Determine how intptr_t and intN_t fastN_t and leastN_t are defined by gcc
   for this target.  This is used to determine the correct printf() constant in
   inttypes.h and other  constants in stdint.h.
   So we end up with
   ?(signed|unsigned) char == 0
   ?(signed|unsigned) short == 1
   ?(signed|unsigned) int == 2
   ?(signed|unsigned) short int == 3
   ?(signed|unsigned) long == 4
   ?(signed|unsigned) long int == 6
   ?(signed|unsigned) long long == 8
   ?(signed|unsigned) long long int == 10
 */
       
       
       
       
       
       
       
# 187 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
       
# 14 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 2 3 4
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_stdint.h" 1 3 4
/*
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 1 3 4
/*
 *  $Id$
 */
# 13 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_stdint.h" 2 3 4


extern "C" {




typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;




}
# 15 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 2 3 4


extern "C" {



typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;




typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;




typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;




typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;



/*
 * Fastest minimum-width integer types
 *
 * Assume int to be the fastest type for all types with a width 
 * less than __INT_MAX__ rsp. INT_MAX
 */

  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
# 61 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 3 4
  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
# 71 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 3 4
  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
# 81 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 3 4
  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;







/*
 * Fall back to [u]int_least<N>_t for [u]int_fast<N>_t types
 * not having been defined, yet.
 * Leave undefined, if [u]int_least<N>_t should not be available.
 */
# 149 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 3 4
/* Limits of Specified-Width Integer Types */
# 341 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 3 4
/* This must match size_t in stddef.h, currently long unsigned int */






/* This must match sig_atomic_t in <signal.h> (currently int) */



/* This must match ptrdiff_t  in <stddef.h> (currently long int) */







/* This must match definition in <wchar.h> */
# 371 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 3 4
/* This must match definition in <wchar.h> */
# 382 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 3 4
/* wint_t is unsigned int on almost all GCC targets.  */
# 394 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 3 4
/** Macros for minimum-width integer constant expressions */
# 447 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 3 4
/** Macros for greatest-width integer constant expression */
# 463 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdint.h" 3 4
}
# 10 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h" 2 3 4
# 25 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/stdlib.h" 1 3
// -*- C++ -*- compatibility header.

// Copyright (C) 2002-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file stdlib.h
 *  This is a Standard C++ Library header.
 */
# 36 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/stdlib.h" 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstdlib" 1 3
// -*- C++ -*- forwarding header.

// Copyright (C) 1997-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file include/cstdlib
 *  This is a Standard C++ Library file.  You should @c \#include this file
 *  in your programs, rather than any of the @a *.h implementation files.
 *
 *  This is the C++ version of the Standard C Library header @c stdlib.h,
 *  and its contents are (mostly) the same as that header, but are all
 *  contained in the namespace @c std (except for names which are defined
 *  as macros in C).
 */

//
// ISO C++ 14882: 20.4.6  C library
//

       
# 40 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstdlib" 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 1 3
// Predefined symbols and macros -*- C++ -*-

// Copyright (C) 1997-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file bits/c++config.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{version}
 */




// The major release number for the GCC release the C++ library belongs to.


// The datestamp of the C++ library in compressed ISO date format.


// Macros for various attributes.
//   _GLIBCXX_PURE
//   _GLIBCXX_CONST
//   _GLIBCXX_NORETURN
//   _GLIBCXX_NOTHROW
//   _GLIBCXX_VISIBILITY
# 57 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// See below for C++






// Macros for visibility attributes.
//   _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY
//   _GLIBCXX_VISIBILITY
# 77 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// Macros for deprecated attributes.
//   _GLIBCXX_USE_DEPRECATED
//   _GLIBCXX_DEPRECATED
//   _GLIBCXX17_DEPRECATED
# 97 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// Macros for ABI tag attributes.




// Macro to warn about unused results.
# 113 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// Macro for constexpr, to support in mixed 03/0x mode.
# 156 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// Macro for noexcept, to support in mixed 03/0x mode.
# 191 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// Macro for extern template, ie controlling template linkage via use
// of extern keyword on template declaration. As documented in the g++
// manual, it inhibits all implicit instantiations and is used
// throughout the library to avoid multiple weak definitions for
// required types that are already explicitly instantiated in the
// library binary. This substantially reduces the binary size of
// resulting executables.
// Special case: _GLIBCXX_EXTERN_TEMPLATE == -1 disallows extern
// templates only in basic_string, thus activating its debug-mode
// checks even at -O0.


/*
  Outline of libstdc++ namespaces.

  namespace std
  {
    namespace __debug { }
    namespace __parallel { }
    namespace __profile { }
    namespace __cxx1998 { }

    namespace __detail {
      namespace __variant { }				// C++17
    }

    namespace rel_ops { }

    namespace tr1
    {
      namespace placeholders { }
      namespace regex_constants { }
      namespace __detail { }
    }

    namespace tr2 { }
    
    namespace decimal { }

    namespace chrono { }				// C++11
    namespace placeholders { }				// C++11
    namespace regex_constants { }			// C++11
    namespace this_thread { }				// C++11
    inline namespace literals {				// C++14
      inline namespace chrono_literals { }		// C++14
      inline namespace complex_literals { }		// C++14
      inline namespace string_literals { }		// C++14
      inline namespace string_view_literals { }		// C++17
    }
  }

  namespace abi { }

  namespace __gnu_cxx
  {
    namespace __detail { }
  }

  For full details see:
  http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/namespaces.html
*/
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 274 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 293 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// Defined if inline namespaces are used for versioning.


// Inline namespace for symbol versioning.
# 328 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// Inline namespaces for special modes: debug, parallel, profile.
# 379 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// Macros for namespace scope. Either namespace std:: or the name
// of some nested namespace within it corresponding to the active mode.
// _GLIBCXX_STD_A
// _GLIBCXX_STD_C
//
// Macros for opening/closing conditional namespaces.
// _GLIBCXX_BEGIN_NAMESPACE_ALGO
// _GLIBCXX_END_NAMESPACE_ALGO
// _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
// _GLIBCXX_END_NAMESPACE_CONTAINER
# 411 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// GLIBCXX_ABI Deprecated
// Define if compatibility should be provided for -mlong-double-64.


// Inline namespace for long double 128 mode.
# 439 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// Debug Mode implies checking assertions.




// Disable std::string explicit instantiation declarations in order to assert.





// Assert.
# 481 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// Macros for race detectors.
// _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A) and
// _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A) should be used to explain
// atomic (lock-free) synchronization to race detectors:
// the race detector will infer a happens-before arc from the former to the
// latter when they share the same argument pointer.
//
// The most frequent use case for these macros (and the only case in the
// current implementation of the library) is atomic reference counting:
//   void _M_remove_reference()
//   {
//     _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);
//     if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount, -1) <= 0)
//       {
//         _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&this->_M_refcount);
//         _M_destroy(__a);
//       }
//   }
// The annotations in this example tell the race detector that all memory
// accesses occurred when the refcount was positive do not race with
// memory accesses which occurred after the refcount became zero.







// Macros for C linkage: define extern "C" linkage only when using C++.
# 521 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// First includes.

// Pick up any OS-specific definitions.
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/os_defines.h" 1 3
// Specific definitions for newlib  -*- C++ -*-

// Copyright (C) 2000-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file bits/os_defines.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{iosfwd}
 */




// System-specific #define, typedefs, corrections, etc, go here.  This
// file will come before all others.
# 525 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 2 3

// Pick up any CPU-specific definitions.
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/cpu_defines.h" 1 3
// Specific definitions for generic platforms  -*- C++ -*-

// Copyright (C) 2015-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file bits/cpu_defines.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{iosfwd}
 */




// Integer divide instructions don't trap on ARM.
# 528 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 2 3

// If platform uses neither visibility nor psuedo-visibility,
// specify empty default for namespace annotation macros.




// Certain function definitions that are meant to be overridable from
// user code are decorated with this macro.  For some targets, this
// macro causes these definitions to be weak.




// By default, we assume that __GXX_WEAK__ also means that there is support
// for declaring functions as weak while not defining such functions.  This
// allows for referring to functions provided by other libraries (e.g.,
// libitm) without depending on them if the respective features are not used.




// Conditionally enable annotations for the Transactional Memory TS on C++11.
// Most of the following conditions are due to limitations in the current
// implementation.
# 572 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// The remainder of the prewritten config is automatic; all the
// user hooks are listed above.

// Create a boolean flag to be used to determine if --fast-math is set.






// This marks string literals in header files to be extracted for eventual
// translation.  It is primarily used for messages in thrown exceptions; see
// src/functexcept.cc.  We use __N because the more traditional _N is used
// for something else under certain OSes (see BADNAMES).


// For example, <windows.h> is known to #define min and max as macros...



// N.B. these _GLIBCXX_USE_C99_XXX macros are defined unconditionally
// so they should be tested with #if not with #ifdef.
# 628 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// Unless explicitly specified, enable char8_t extensions only if the core
// language char8_t feature macro is defined.
# 639 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
/* Define if __float128 is supported on this host. */





// Assume these are available if the compiler claims to be a recent GCC:
# 668 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// PSTL configuration
# 691 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 3
// End of prewritten config; the settings discovered at configure time follow.
/* config.h.  Generated from config.h.in by configure.  */
/* config.h.in.  Generated from configure.ac by autoheader.  */

/* Define to 1 if you have the `acosf' function. */


/* Define to 1 if you have the `acosl' function. */
/* #undef _GLIBCXX_HAVE_ACOSL */

/* Define to 1 if you have the `aligned_alloc' function. */
/* #undef _GLIBCXX_HAVE_ALIGNED_ALLOC */

/* Define to 1 if you have the <arpa/inet.h> header file. */
/* #undef _GLIBCXX_HAVE_ARPA_INET_H */

/* Define to 1 if you have the `asinf' function. */


/* Define to 1 if you have the `asinl' function. */
/* #undef _GLIBCXX_HAVE_ASINL */

/* Define to 1 if the target assembler supports .symver directive. */


/* Define to 1 if you have the `atan2f' function. */


/* Define to 1 if you have the `atan2l' function. */
/* #undef _GLIBCXX_HAVE_ATAN2L */

/* Define to 1 if you have the `atanf' function. */


/* Define to 1 if you have the `atanl' function. */
/* #undef _GLIBCXX_HAVE_ATANL */

/* Defined if shared_ptr reference counting should use atomic operations. */


/* Define to 1 if you have the `at_quick_exit' function. */
/* #undef _GLIBCXX_HAVE_AT_QUICK_EXIT */

/* Define to 1 if the target assembler supports thread-local storage. */
/* #undef _GLIBCXX_HAVE_CC_TLS */

/* Define to 1 if you have the `ceilf' function. */


/* Define to 1 if you have the `ceill' function. */
/* #undef _GLIBCXX_HAVE_CEILL */

/* Define to 1 if you have the <complex.h> header file. */


/* Define to 1 if you have the `cosf' function. */


/* Define to 1 if you have the `coshf' function. */


/* Define to 1 if you have the `coshl' function. */
/* #undef _GLIBCXX_HAVE_COSHL */

/* Define to 1 if you have the `cosl' function. */
/* #undef _GLIBCXX_HAVE_COSL */

/* Define to 1 if you have the <dirent.h> header file. */
/* #undef _GLIBCXX_HAVE_DIRENT_H */

/* Define to 1 if you have the <dlfcn.h> header file. */
/* #undef _GLIBCXX_HAVE_DLFCN_H */

/* Define if EBADMSG exists. */


/* Define if ECANCELED exists. */


/* Define if ECHILD exists. */


/* Define if EIDRM exists. */


/* Define to 1 if you have the <endian.h> header file. */
/* #undef _GLIBCXX_HAVE_ENDIAN_H */

/* Define if ENODATA exists. */


/* Define if ENOLINK exists. */


/* Define if ENOSPC exists. */


/* Define if ENOSR exists. */


/* Define if ENOSTR exists. */


/* Define if ENOTRECOVERABLE exists. */


/* Define if ENOTSUP exists. */


/* Define if EOVERFLOW exists. */


/* Define if EOWNERDEAD exists. */


/* Define if EPERM exists. */


/* Define if EPROTO exists. */


/* Define if ETIME exists. */


/* Define if ETIMEDOUT exists. */


/* Define if ETXTBSY exists. */


/* Define if EWOULDBLOCK exists. */


/* Define to 1 if GCC 4.6 supported std::exception_ptr for the target */
/* #undef _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46 */

/* Define to 1 if you have the <execinfo.h> header file. */
/* #undef _GLIBCXX_HAVE_EXECINFO_H */

/* Define to 1 if you have the `expf' function. */


/* Define to 1 if you have the `expl' function. */
/* #undef _GLIBCXX_HAVE_EXPL */

/* Define to 1 if you have the `fabsf' function. */


/* Define to 1 if you have the `fabsl' function. */
/* #undef _GLIBCXX_HAVE_FABSL */

/* Define to 1 if you have the <fcntl.h> header file. */


/* Define to 1 if you have the <fenv.h> header file. */
/* #undef _GLIBCXX_HAVE_FENV_H */

/* Define to 1 if you have the `finite' function. */
/* #undef _GLIBCXX_HAVE_FINITE */

/* Define to 1 if you have the `finitef' function. */
/* #undef _GLIBCXX_HAVE_FINITEF */

/* Define to 1 if you have the `finitel' function. */
/* #undef _GLIBCXX_HAVE_FINITEL */

/* Define to 1 if you have the <float.h> header file. */


/* Define to 1 if you have the `floorf' function. */


/* Define to 1 if you have the `floorl' function. */
/* #undef _GLIBCXX_HAVE_FLOORL */

/* Define to 1 if you have the `fmodf' function. */


/* Define to 1 if you have the `fmodl' function. */
/* #undef _GLIBCXX_HAVE_FMODL */

/* Define to 1 if you have the `fpclass' function. */
/* #undef _GLIBCXX_HAVE_FPCLASS */

/* Define to 1 if you have the <fp.h> header file. */
/* #undef _GLIBCXX_HAVE_FP_H */

/* Define to 1 if you have the `frexpf' function. */


/* Define to 1 if you have the `frexpl' function. */
/* #undef _GLIBCXX_HAVE_FREXPL */

/* Define if _Unwind_GetIPInfo is available. */


/* Define if gets is available in <stdio.h> before C++14. */


/* Define to 1 if you have the `hypot' function. */


/* Define to 1 if you have the `hypotf' function. */
/* #undef _GLIBCXX_HAVE_HYPOTF */

/* Define to 1 if you have the `hypotl' function. */
/* #undef _GLIBCXX_HAVE_HYPOTL */

/* Define if you have the iconv() function. */


/* Define to 1 if you have the <ieeefp.h> header file. */


/* Define if int64_t is available in <stdint.h>. */


/* Define if int64_t is a long. */
/* #undef _GLIBCXX_HAVE_INT64_T_LONG */

/* Define if int64_t is a long long. */


/* Define to 1 if you have the <inttypes.h> header file. */


/* Define to 1 if you have the `isinf' function. */
/* #undef _GLIBCXX_HAVE_ISINF */

/* Define to 1 if you have the `isinff' function. */
/* #undef _GLIBCXX_HAVE_ISINFF */

/* Define to 1 if you have the `isinfl' function. */
/* #undef _GLIBCXX_HAVE_ISINFL */

/* Define to 1 if you have the `isnan' function. */
/* #undef _GLIBCXX_HAVE_ISNAN */

/* Define to 1 if you have the `isnanf' function. */
/* #undef _GLIBCXX_HAVE_ISNANF */

/* Define to 1 if you have the `isnanl' function. */
/* #undef _GLIBCXX_HAVE_ISNANL */

/* Defined if iswblank exists. */


/* Define if LC_MESSAGES is available in <locale.h>. */


/* Define to 1 if you have the `ldexpf' function. */


/* Define to 1 if you have the `ldexpl' function. */
/* #undef _GLIBCXX_HAVE_LDEXPL */

/* Define to 1 if you have the <libintl.h> header file. */
/* #undef _GLIBCXX_HAVE_LIBINTL_H */

/* Only used in build directory testsuite_hooks.h. */


/* Only used in build directory testsuite_hooks.h. */


/* Only used in build directory testsuite_hooks.h. */


/* Only used in build directory testsuite_hooks.h. */


/* Only used in build directory testsuite_hooks.h. */


/* Define if link is available in <unistd.h>. */
/* #undef _GLIBCXX_HAVE_LINK */

/* Define if futex syscall is available. */
/* #undef _GLIBCXX_HAVE_LINUX_FUTEX */

/* Define to 1 if you have the <linux/random.h> header file. */
/* #undef _GLIBCXX_HAVE_LINUX_RANDOM_H */

/* Define to 1 if you have the <linux/types.h> header file. */
/* #undef _GLIBCXX_HAVE_LINUX_TYPES_H */

/* Define to 1 if you have the <locale.h> header file. */


/* Define to 1 if you have the `log10f' function. */


/* Define to 1 if you have the `log10l' function. */
/* #undef _GLIBCXX_HAVE_LOG10L */

/* Define to 1 if you have the `logf' function. */


/* Define to 1 if you have the `logl' function. */
/* #undef _GLIBCXX_HAVE_LOGL */

/* Define to 1 if you have the <machine/endian.h> header file. */


/* Define to 1 if you have the <machine/param.h> header file. */


/* Define if mbstate_t exists in wchar.h. */


/* Define to 1 if you have the `memalign' function. */


/* Define to 1 if you have the <memory.h> header file. */


/* Define to 1 if you have the `modf' function. */
/* #undef _GLIBCXX_HAVE_MODF */

/* Define to 1 if you have the `modff' function. */


/* Define to 1 if you have the `modfl' function. */
/* #undef _GLIBCXX_HAVE_MODFL */

/* Define to 1 if you have the <nan.h> header file. */
/* #undef _GLIBCXX_HAVE_NAN_H */

/* Define to 1 if you have the <netdb.h> header file. */
/* #undef _GLIBCXX_HAVE_NETDB_H */

/* Define to 1 if you have the <netinet/in.h> header file. */
/* #undef _GLIBCXX_HAVE_NETINET_IN_H */

/* Define to 1 if you have the <netinet/tcp.h> header file. */
/* #undef _GLIBCXX_HAVE_NETINET_TCP_H */

/* Define if <math.h> defines obsolete isinf function. */
/* #undef _GLIBCXX_HAVE_OBSOLETE_ISINF */

/* Define if <math.h> defines obsolete isnan function. */
/* #undef _GLIBCXX_HAVE_OBSOLETE_ISNAN */

/* Define if poll is available in <poll.h>. */
/* #undef _GLIBCXX_HAVE_POLL */

/* Define to 1 if you have the <poll.h> header file. */
/* #undef _GLIBCXX_HAVE_POLL_H */

/* Define to 1 if you have the `posix_memalign' function. */
/* #undef _GLIBCXX_HAVE_POSIX_MEMALIGN */

/* Define to 1 if you have the `powf' function. */


/* Define to 1 if you have the `powl' function. */
/* #undef _GLIBCXX_HAVE_POWL */

/* Define to 1 if you have the `qfpclass' function. */
/* #undef _GLIBCXX_HAVE_QFPCLASS */

/* Define to 1 if you have the `quick_exit' function. */
/* #undef _GLIBCXX_HAVE_QUICK_EXIT */

/* Define if readlink is available in <unistd.h>. */
/* #undef _GLIBCXX_HAVE_READLINK */

/* Define to 1 if you have the `setenv' function. */
/* #undef _GLIBCXX_HAVE_SETENV */

/* Define to 1 if you have the `sincos' function. */
/* #undef _GLIBCXX_HAVE_SINCOS */

/* Define to 1 if you have the `sincosf' function. */
/* #undef _GLIBCXX_HAVE_SINCOSF */

/* Define to 1 if you have the `sincosl' function. */
/* #undef _GLIBCXX_HAVE_SINCOSL */

/* Define to 1 if you have the `sinf' function. */


/* Define to 1 if you have the `sinhf' function. */


/* Define to 1 if you have the `sinhl' function. */
/* #undef _GLIBCXX_HAVE_SINHL */

/* Define to 1 if you have the `sinl' function. */
/* #undef _GLIBCXX_HAVE_SINL */

/* Defined if sleep exists. */


/* Define to 1 if you have the `sockatmark' function. */
/* #undef _GLIBCXX_HAVE_SOCKATMARK */

/* Define to 1 if you have the `sqrtf' function. */


/* Define to 1 if you have the `sqrtl' function. */
/* #undef _GLIBCXX_HAVE_SQRTL */

/* Define to 1 if you have the <stdalign.h> header file. */


/* Define to 1 if you have the <stdbool.h> header file. */


/* Define to 1 if you have the <stdint.h> header file. */


/* Define to 1 if you have the <stdlib.h> header file. */


/* Define if strerror_l is available in <string.h>. */
/* #undef _GLIBCXX_HAVE_STRERROR_L */

/* Define if strerror_r is available in <string.h>. */


/* Define to 1 if you have the <strings.h> header file. */


/* Define to 1 if you have the <string.h> header file. */


/* Define to 1 if you have the `strtof' function. */


/* Define to 1 if you have the `strtold' function. */
/* #undef _GLIBCXX_HAVE_STRTOLD */

/* Define to 1 if `d_type' is a member of `struct dirent'. */
/* #undef _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE */

/* Define if strxfrm_l is available in <string.h>. */
/* #undef _GLIBCXX_HAVE_STRXFRM_L */

/* Define if symlink is available in <unistd.h>. */
/* #undef _GLIBCXX_HAVE_SYMLINK */

/* Define to 1 if the target runtime linker supports binding the same symbol
   to different versions. */
/* #undef _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT */

/* Define to 1 if you have the <sys/filio.h> header file. */
/* #undef _GLIBCXX_HAVE_SYS_FILIO_H */

/* Define to 1 if you have the <sys/ioctl.h> header file. */
/* #undef _GLIBCXX_HAVE_SYS_IOCTL_H */

/* Define to 1 if you have the <sys/ipc.h> header file. */
/* #undef _GLIBCXX_HAVE_SYS_IPC_H */

/* Define to 1 if you have the <sys/isa_defs.h> header file. */
/* #undef _GLIBCXX_HAVE_SYS_ISA_DEFS_H */

/* Define to 1 if you have the <sys/machine.h> header file. */
/* #undef _GLIBCXX_HAVE_SYS_MACHINE_H */

/* Define to 1 if you have the <sys/param.h> header file. */


/* Define to 1 if you have the <sys/resource.h> header file. */


/* Define to 1 if you have a suitable <sys/sdt.h> header file */
/* #undef _GLIBCXX_HAVE_SYS_SDT_H */

/* Define to 1 if you have the <sys/sem.h> header file. */
/* #undef _GLIBCXX_HAVE_SYS_SEM_H */

/* Define to 1 if you have the <sys/socket.h> header file. */
/* #undef _GLIBCXX_HAVE_SYS_SOCKET_H */

/* Define to 1 if you have the <sys/statvfs.h> header file. */
/* #undef _GLIBCXX_HAVE_SYS_STATVFS_H */

/* Define to 1 if you have the <sys/stat.h> header file. */


/* Define to 1 if you have the <sys/sysinfo.h> header file. */
/* #undef _GLIBCXX_HAVE_SYS_SYSINFO_H */

/* Define to 1 if you have the <sys/time.h> header file. */


/* Define to 1 if you have the <sys/types.h> header file. */


/* Define to 1 if you have the <sys/uio.h> header file. */
/* #undef _GLIBCXX_HAVE_SYS_UIO_H */

/* Define if S_IFREG is available in <sys/stat.h>. */
/* #undef _GLIBCXX_HAVE_S_IFREG */

/* Define if S_ISREG is available in <sys/stat.h>. */


/* Define to 1 if you have the `tanf' function. */


/* Define to 1 if you have the `tanhf' function. */


/* Define to 1 if you have the `tanhl' function. */
/* #undef _GLIBCXX_HAVE_TANHL */

/* Define to 1 if you have the `tanl' function. */
/* #undef _GLIBCXX_HAVE_TANL */

/* Define to 1 if you have the <tgmath.h> header file. */


/* Define to 1 if you have the `timespec_get' function. */
/* #undef _GLIBCXX_HAVE_TIMESPEC_GET */

/* Define to 1 if the target supports thread-local storage. */
/* #undef _GLIBCXX_HAVE_TLS */

/* Define if truncate is available in <unistd.h>. */
/* #undef _GLIBCXX_HAVE_TRUNCATE */

/* Define to 1 if you have the <uchar.h> header file. */
/* #undef _GLIBCXX_HAVE_UCHAR_H */

/* Define to 1 if you have the <unistd.h> header file. */


/* Defined if usleep exists. */


/* Define to 1 if you have the <utime.h> header file. */


/* Defined if vfwscanf exists. */


/* Defined if vswscanf exists. */


/* Defined if vwscanf exists. */


/* Define to 1 if you have the <wchar.h> header file. */


/* Defined if wcstof exists. */


/* Define to 1 if you have the <wctype.h> header file. */


/* Defined if Sleep exists. */
/* #undef _GLIBCXX_HAVE_WIN32_SLEEP */

/* Define if writev is available in <sys/uio.h>. */
/* #undef _GLIBCXX_HAVE_WRITEV */

/* Define to 1 if you have the `_acosf' function. */
/* #undef _GLIBCXX_HAVE__ACOSF */

/* Define to 1 if you have the `_acosl' function. */
/* #undef _GLIBCXX_HAVE__ACOSL */

/* Define to 1 if you have the `_aligned_malloc' function. */
/* #undef _GLIBCXX_HAVE__ALIGNED_MALLOC */

/* Define to 1 if you have the `_asinf' function. */
/* #undef _GLIBCXX_HAVE__ASINF */

/* Define to 1 if you have the `_asinl' function. */
/* #undef _GLIBCXX_HAVE__ASINL */

/* Define to 1 if you have the `_atan2f' function. */
/* #undef _GLIBCXX_HAVE__ATAN2F */

/* Define to 1 if you have the `_atan2l' function. */
/* #undef _GLIBCXX_HAVE__ATAN2L */

/* Define to 1 if you have the `_atanf' function. */
/* #undef _GLIBCXX_HAVE__ATANF */

/* Define to 1 if you have the `_atanl' function. */
/* #undef _GLIBCXX_HAVE__ATANL */

/* Define to 1 if you have the `_ceilf' function. */
/* #undef _GLIBCXX_HAVE__CEILF */

/* Define to 1 if you have the `_ceill' function. */
/* #undef _GLIBCXX_HAVE__CEILL */

/* Define to 1 if you have the `_cosf' function. */
/* #undef _GLIBCXX_HAVE__COSF */

/* Define to 1 if you have the `_coshf' function. */
/* #undef _GLIBCXX_HAVE__COSHF */

/* Define to 1 if you have the `_coshl' function. */
/* #undef _GLIBCXX_HAVE__COSHL */

/* Define to 1 if you have the `_cosl' function. */
/* #undef _GLIBCXX_HAVE__COSL */

/* Define to 1 if you have the `_expf' function. */
/* #undef _GLIBCXX_HAVE__EXPF */

/* Define to 1 if you have the `_expl' function. */
/* #undef _GLIBCXX_HAVE__EXPL */

/* Define to 1 if you have the `_fabsf' function. */
/* #undef _GLIBCXX_HAVE__FABSF */

/* Define to 1 if you have the `_fabsl' function. */
/* #undef _GLIBCXX_HAVE__FABSL */

/* Define to 1 if you have the `_finite' function. */
/* #undef _GLIBCXX_HAVE__FINITE */

/* Define to 1 if you have the `_finitef' function. */
/* #undef _GLIBCXX_HAVE__FINITEF */

/* Define to 1 if you have the `_finitel' function. */
/* #undef _GLIBCXX_HAVE__FINITEL */

/* Define to 1 if you have the `_floorf' function. */
/* #undef _GLIBCXX_HAVE__FLOORF */

/* Define to 1 if you have the `_floorl' function. */
/* #undef _GLIBCXX_HAVE__FLOORL */

/* Define to 1 if you have the `_fmodf' function. */
/* #undef _GLIBCXX_HAVE__FMODF */

/* Define to 1 if you have the `_fmodl' function. */
/* #undef _GLIBCXX_HAVE__FMODL */

/* Define to 1 if you have the `_fpclass' function. */
/* #undef _GLIBCXX_HAVE__FPCLASS */

/* Define to 1 if you have the `_frexpf' function. */
/* #undef _GLIBCXX_HAVE__FREXPF */

/* Define to 1 if you have the `_frexpl' function. */
/* #undef _GLIBCXX_HAVE__FREXPL */

/* Define to 1 if you have the `_hypot' function. */
/* #undef _GLIBCXX_HAVE__HYPOT */

/* Define to 1 if you have the `_hypotf' function. */
/* #undef _GLIBCXX_HAVE__HYPOTF */

/* Define to 1 if you have the `_hypotl' function. */
/* #undef _GLIBCXX_HAVE__HYPOTL */

/* Define to 1 if you have the `_isinf' function. */
/* #undef _GLIBCXX_HAVE__ISINF */

/* Define to 1 if you have the `_isinff' function. */
/* #undef _GLIBCXX_HAVE__ISINFF */

/* Define to 1 if you have the `_isinfl' function. */
/* #undef _GLIBCXX_HAVE__ISINFL */

/* Define to 1 if you have the `_isnan' function. */
/* #undef _GLIBCXX_HAVE__ISNAN */

/* Define to 1 if you have the `_isnanf' function. */
/* #undef _GLIBCXX_HAVE__ISNANF */

/* Define to 1 if you have the `_isnanl' function. */
/* #undef _GLIBCXX_HAVE__ISNANL */

/* Define to 1 if you have the `_ldexpf' function. */
/* #undef _GLIBCXX_HAVE__LDEXPF */

/* Define to 1 if you have the `_ldexpl' function. */
/* #undef _GLIBCXX_HAVE__LDEXPL */

/* Define to 1 if you have the `_log10f' function. */
/* #undef _GLIBCXX_HAVE__LOG10F */

/* Define to 1 if you have the `_log10l' function. */
/* #undef _GLIBCXX_HAVE__LOG10L */

/* Define to 1 if you have the `_logf' function. */
/* #undef _GLIBCXX_HAVE__LOGF */

/* Define to 1 if you have the `_logl' function. */
/* #undef _GLIBCXX_HAVE__LOGL */

/* Define to 1 if you have the `_modf' function. */
/* #undef _GLIBCXX_HAVE__MODF */

/* Define to 1 if you have the `_modff' function. */
/* #undef _GLIBCXX_HAVE__MODFF */

/* Define to 1 if you have the `_modfl' function. */
/* #undef _GLIBCXX_HAVE__MODFL */

/* Define to 1 if you have the `_powf' function. */
/* #undef _GLIBCXX_HAVE__POWF */

/* Define to 1 if you have the `_powl' function. */
/* #undef _GLIBCXX_HAVE__POWL */

/* Define to 1 if you have the `_qfpclass' function. */
/* #undef _GLIBCXX_HAVE__QFPCLASS */

/* Define to 1 if you have the `_sincos' function. */
/* #undef _GLIBCXX_HAVE__SINCOS */

/* Define to 1 if you have the `_sincosf' function. */
/* #undef _GLIBCXX_HAVE__SINCOSF */

/* Define to 1 if you have the `_sincosl' function. */
/* #undef _GLIBCXX_HAVE__SINCOSL */

/* Define to 1 if you have the `_sinf' function. */
/* #undef _GLIBCXX_HAVE__SINF */

/* Define to 1 if you have the `_sinhf' function. */
/* #undef _GLIBCXX_HAVE__SINHF */

/* Define to 1 if you have the `_sinhl' function. */
/* #undef _GLIBCXX_HAVE__SINHL */

/* Define to 1 if you have the `_sinl' function. */
/* #undef _GLIBCXX_HAVE__SINL */

/* Define to 1 if you have the `_sqrtf' function. */
/* #undef _GLIBCXX_HAVE__SQRTF */

/* Define to 1 if you have the `_sqrtl' function. */
/* #undef _GLIBCXX_HAVE__SQRTL */

/* Define to 1 if you have the `_tanf' function. */
/* #undef _GLIBCXX_HAVE__TANF */

/* Define to 1 if you have the `_tanhf' function. */
/* #undef _GLIBCXX_HAVE__TANHF */

/* Define to 1 if you have the `_tanhl' function. */
/* #undef _GLIBCXX_HAVE__TANHL */

/* Define to 1 if you have the `_tanl' function. */
/* #undef _GLIBCXX_HAVE__TANL */

/* Define to 1 if you have the `_wfopen' function. */
/* #undef _GLIBCXX_HAVE__WFOPEN */

/* Define to 1 if you have the `__cxa_thread_atexit' function. */
/* #undef _GLIBCXX_HAVE___CXA_THREAD_ATEXIT */

/* Define to 1 if you have the `__cxa_thread_atexit_impl' function. */
/* #undef _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL */

/* Define as const if the declaration of iconv() needs const. */
/* #undef _GLIBCXX_ICONV_CONST */

/* Define to the sub-directory in which libtool stores uninstalled libraries.
   */


/* Name of package */
/* #undef _GLIBCXX_PACKAGE */

/* Define to the address where bug reports for this package should be sent. */


/* Define to the full name of this package. */


/* Define to the full name and version of this package. */


/* Define to the one symbol short name of this package. */


/* Define to the home page for this package. */


/* Define to the version of this package. */


/* The size of `char', as computed by sizeof. */
/* #undef SIZEOF_CHAR */

/* The size of `int', as computed by sizeof. */
/* #undef SIZEOF_INT */

/* The size of `long', as computed by sizeof. */
/* #undef SIZEOF_LONG */

/* The size of `short', as computed by sizeof. */
/* #undef SIZEOF_SHORT */

/* The size of `void *', as computed by sizeof. */
/* #undef SIZEOF_VOID_P */

/* Define to 1 if you have the ANSI C header files. */


/* Version number of package */
/* #undef _GLIBCXX_VERSION */

/* Define if C99 functions in <complex.h> should be used in <complex> for
   C++11. Using compiler builtins for these functions requires corresponding
   C99 library functions to be present. */
/* #undef _GLIBCXX11_USE_C99_COMPLEX */

/* Define if C99 functions or macros in <math.h> should be imported in <cmath>
   in namespace std for C++11. */


/* Define if C99 functions or macros in <stdio.h> should be imported in
   <cstdio> in namespace std for C++11. */


/* Define if C99 functions or macros in <stdlib.h> should be imported in
   <cstdlib> in namespace std for C++11. */


/* Define if C99 functions or macros in <wchar.h> should be imported in
   <cwchar> in namespace std for C++11. */


/* Define if C99 functions in <complex.h> should be used in <complex> for
   C++98. Using compiler builtins for these functions requires corresponding
   C99 library functions to be present. */
/* #undef _GLIBCXX98_USE_C99_COMPLEX */

/* Define if C99 functions or macros in <math.h> should be imported in <cmath>
   in namespace std for C++98. */


/* Define if C99 functions or macros in <stdio.h> should be imported in
   <cstdio> in namespace std for C++98. */


/* Define if C99 functions or macros in <stdlib.h> should be imported in
   <cstdlib> in namespace std for C++98. */


/* Define if C99 functions or macros in <wchar.h> should be imported in
   <cwchar> in namespace std for C++98. */


/* Define if the compiler supports C++11 atomics. */


/* Define to use concept checking code from the boost libraries. */
/* #undef _GLIBCXX_CONCEPT_CHECKS */

/* Define to 1 if a fully dynamic basic_string is wanted, 0 to disable,
   undefined for platform defaults */


/* Define if gthreads library is available. */
/* #undef _GLIBCXX_HAS_GTHREADS */

/* Define to 1 if a full hosted library is built, or 0 if freestanding. */


/* Define if compatibility should be provided for -mlong-double-64. */

/* Define to the letter to which size_t is mangled. */


/* Define if C99 llrint and llround functions are missing from <math.h>. */
/* #undef _GLIBCXX_NO_C99_ROUNDING_FUNCS */

/* Define if ptrdiff_t is int. */


/* Define if using setrlimit to set resource limits during "make check" */
/* #undef _GLIBCXX_RES_LIMITS */

/* Define if size_t is unsigned int. */


/* Define to the value of the EOF integer constant. */


/* Define to the value of the SEEK_CUR integer constant. */


/* Define to the value of the SEEK_END integer constant. */


/* Define to use symbol versioning in the shared library. */
/* #undef _GLIBCXX_SYMVER */

/* Define to use darwin versioning in the shared library. */
/* #undef _GLIBCXX_SYMVER_DARWIN */

/* Define to use GNU versioning in the shared library. */
/* #undef _GLIBCXX_SYMVER_GNU */

/* Define to use GNU namespace versioning in the shared library. */
/* #undef _GLIBCXX_SYMVER_GNU_NAMESPACE */

/* Define to use Sun versioning in the shared library. */
/* #undef _GLIBCXX_SYMVER_SUN */

/* Define if C11 functions in <uchar.h> should be imported into namespace std
   in <cuchar>. */
/* #undef _GLIBCXX_USE_C11_UCHAR_CXX11 */

/* Define if C99 functions or macros from <wchar.h>, <math.h>, <complex.h>,
   <stdio.h>, and <stdlib.h> can be used or exposed. */
/* #undef _GLIBCXX_USE_C99 */

/* Define if C99 functions in <complex.h> should be used in <tr1/complex>.
   Using compiler builtins for these functions requires corresponding C99
   library functions to be present. */
/* #undef _GLIBCXX_USE_C99_COMPLEX_TR1 */

/* Define if C99 functions in <ctype.h> should be imported in <tr1/cctype> in
   namespace std::tr1. */


/* Define if C99 functions in <fenv.h> should be imported in <tr1/cfenv> in
   namespace std::tr1. */
/* #undef _GLIBCXX_USE_C99_FENV_TR1 */

/* Define if C99 functions in <inttypes.h> should be imported in
   <tr1/cinttypes> in namespace std::tr1. */


/* Define if wchar_t C99 functions in <inttypes.h> should be imported in
   <tr1/cinttypes> in namespace std::tr1. */


/* Define if C99 functions or macros in <math.h> should be imported in
   <tr1/cmath> in namespace std::tr1. */


/* Define if C99 types in <stdint.h> should be imported in <tr1/cstdint> in
   namespace std::tr1. */


/* Defined if clock_gettime syscall has monotonic and realtime clock support.
   */
/* #undef _GLIBCXX_USE_CLOCK_GETTIME_SYSCALL */

/* Defined if clock_gettime has monotonic clock support. */
/* #undef _GLIBCXX_USE_CLOCK_MONOTONIC */

/* Defined if clock_gettime has realtime clock support. */
/* #undef _GLIBCXX_USE_CLOCK_REALTIME */

/* Define if ISO/IEC TR 24733 decimal floating point types are supported on
   this host. */
/* #undef _GLIBCXX_USE_DECIMAL_FLOAT */

/* Define if /dev/random and /dev/urandom are available for
   std::random_device. */
/* #undef _GLIBCXX_USE_DEV_RANDOM */

/* Define if fchmod is available in <sys/stat.h>. */
/* #undef _GLIBCXX_USE_FCHMOD */

/* Define if fchmodat is available in <sys/stat.h>. */
/* #undef _GLIBCXX_USE_FCHMODAT */

/* Defined if gettimeofday is available. */


/* Define if get_nprocs is available in <sys/sysinfo.h>. */
/* #undef _GLIBCXX_USE_GET_NPROCS */

/* Define if __int128 is supported on this host. */
/* #undef _GLIBCXX_USE_INT128 */

/* Define if LFS support is available. */
/* #undef _GLIBCXX_USE_LFS */

/* Define if code specialized for long long should be used. */


/* Define if lstat is available in <sys/stat.h>. */
/* #undef _GLIBCXX_USE_LSTAT */

/* Defined if nanosleep is available. */
/* #undef _GLIBCXX_USE_NANOSLEEP */

/* Define if NLS translations are to be used. */
/* #undef _GLIBCXX_USE_NLS */

/* Define if pthreads_num_processors_np is available in <pthread.h>. */
/* #undef _GLIBCXX_USE_PTHREADS_NUM_PROCESSORS_NP */

/* Define if POSIX read/write locks are available in <gthr.h>. */
/* #undef _GLIBCXX_USE_PTHREAD_RWLOCK_T */

/* Define if /dev/random and /dev/urandom are available for the random_device
   of TR1 (Chapter 5.1). */
/* #undef _GLIBCXX_USE_RANDOM_TR1 */

/* Define if usable realpath is available in <stdlib.h>. */
/* #undef _GLIBCXX_USE_REALPATH */

/* Defined if sched_yield is available. */
/* #undef _GLIBCXX_USE_SCHED_YIELD */

/* Define if _SC_NPROCESSORS_ONLN is available in <unistd.h>. */


/* Define if _SC_NPROC_ONLN is available in <unistd.h>. */
/* #undef _GLIBCXX_USE_SC_NPROC_ONLN */

/* Define if sendfile is available in <sys/sendfile.h>. */
/* #undef _GLIBCXX_USE_SENDFILE */

/* Define if struct stat has timespec members. */
/* #undef _GLIBCXX_USE_ST_MTIM */

/* Define if sysctl(), CTL_HW and HW_NCPU are available in <sys/sysctl.h>. */
/* #undef _GLIBCXX_USE_SYSCTL_HW_NCPU */

/* Define if obsolescent tmpnam is available in <stdio.h>. */


/* Define if utime is available in <utime.h>. */
/* #undef _GLIBCXX_USE_UTIME */

/* Define if utimensat and UTIME_OMIT are available in <sys/stat.h> and
   AT_FDCWD in <fcntl.h>. */
/* #undef _GLIBCXX_USE_UTIMENSAT */

/* Define if code specialized for wchar_t should be used. */


/* Define to 1 if a verbose library is built, or 0 otherwise. */


/* Defined if as can handle rdrand. */
/* #undef _GLIBCXX_X86_RDRAND */

/* Define to 1 if mutex_timedlock is available. */


/* Define if all C++11 floating point overloads are available in <math.h>.  */

/* #undef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP */


/* Define if all C++11 integral type overloads are available in <math.h>.  */

/* #undef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT */
# 42 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstdlib" 2 3
# 72 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstdlib" 3
// Need to ensure this finds the C library's <stdlib.h> not a libstdc++
// wrapper that might already be installed later in the include search path.

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdlib.h" 1 3
/*
 * stdlib.h
 *
 * Definitions for common types, variables, and functions.
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/ieeefp.h" 1 3



/* This file can define macros to choose variations of the IEEE float
   format:

   _FLT_LARGEST_EXPONENT_IS_NORMAL

	Defined if the float format uses the largest exponent for finite
	numbers rather than NaN and infinity representations.  Such a
	format cannot represent NaNs or infinities at all, but it's FLT_MAX
	is twice the IEEE value.

   _FLT_NO_DENORMALS

	Defined if the float format does not support IEEE denormals.  Every
	float with a zero exponent is taken to be a zero representation.
 
   ??? At the moment, there are no equivalent macros above for doubles and
   the macros are not fully supported by --enable-newlib-hw-fp.

   __IEEE_BIG_ENDIAN

        Defined if the float format is big endian.  This is mutually exclusive
        with __IEEE_LITTLE_ENDIAN.

   __IEEE_LITTLE_ENDIAN
 
        Defined if the float format is little endian.  This is mutually exclusive
        with __IEEE_BIG_ENDIAN.

   Note that one of __IEEE_BIG_ENDIAN or __IEEE_LITTLE_ENDIAN must be specified for a
   platform or error will occur.

   __IEEE_BYTES_LITTLE_ENDIAN

        This flag is used in conjunction with __IEEE_BIG_ENDIAN to describe a situation 
	whereby multiple words of an IEEE floating point are in big endian order, but the
	words themselves are little endian with respect to the bytes.

   _DOUBLE_IS_32BITS 

        This is used on platforms that support double by using the 32-bit IEEE
        float type.

   _FLOAT_ARG

        This represents what type a float arg is passed as.  It is used when the type is
        not promoted to double.
	

   __OBSOLETE_MATH_DEFAULT

	Default value for __OBSOLETE_MATH if that's not set by the user.
	It should be set here based on predefined feature macros.

   __OBSOLETE_MATH

	If set to 1 then some new math code will be disabled and older libm
	code will be used instead.  This is necessary because the new math
	code does not support all targets, it assumes that the toolchain has
	ISO C99 support (hexfloat literals, standard fenv semantics), the
	target has IEEE-754 conforming binary32 float and binary64 double
	(not mixed endian) representation, standard SNaN representation,
	double and single precision arithmetics has similar latency and it
	has no legacy SVID matherr support, only POSIX errno and fenv
	exception based error handling.
*/


/* ARM traditionally used big-endian words; and within those words the
   byte ordering was big or little endian depending upon the target.
   Modern floating-point formats are naturally ordered; in this case
   __VFP_FP__ will be defined, even if soft-float.  */
# 246 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/ieeefp.h" 3
/* necv70 was __IEEE_LITTLE_ENDIAN. */
# 460 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/ieeefp.h" 3
/* Use old math code by default.  */
# 11 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdlib.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 1 3
/* Provide support for both ANSI and non-ANSI environments.  */

/* To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/newlib.h" 1 3
/* newlib.h.  Generated from newlib.hin by configure.  */
/* newlib.hin.  Manually edited from the output of autoheader to
   remove all PACKAGE_ macros which will collide with any user
   package using newlib header files and having its own package name,
   version, etc...  */




/* EL/IX level */
/* #undef _ELIX_LEVEL */

/* Newlib version */
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_newlib_version.h" 1 3
/* _newlib_version.h.  Generated from _newlib_version.hin by configure.  */
/* Version macros for internal and downstream use. */
# 15 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/newlib.h" 2 3

/* C99 formats support (such as %a, %zu, ...) in IO functions like
 * printf/scanf enabled */


/* long long type support in IO functions like printf/scanf enabled */


/* Register application finalization function using atexit. */


/* long double type support in IO functions like printf/scanf enabled */
/* #undef _WANT_IO_LONG_DOUBLE */

/* Positional argument support in printf functions enabled.  */
/* #undef _WANT_IO_POS_ARGS */

/* Optional reentrant struct support.  Used mostly on platforms with
   very restricted storage.  */
/* #undef _WANT_REENT_SMALL */

/* Multibyte supported */
/* #undef _MB_CAPABLE */

/* MB_LEN_MAX */


/* ICONV enabled */
/* #undef _ICONV_ENABLED */

/* Enable ICONV external CCS files loading capabilities */
/* #undef _ICONV_ENABLE_EXTERNAL_CCS */

/* Define if the linker supports .preinit_array/.init_array/.fini_array
 * sections.  */


/* True if atexit() may dynamically allocate space for cleanup
   functions.  */


/* True if long double supported.  */


/* Define if compiler supports -fno-tree-loop-distribute-patterns. */


/* True if long double supported and it is equal to double.  */


/* Define if ivo supported in streamio.  */


/* Define if fseek functions support seek optimization.  */


/* Define if wide char orientation is supported.  */


/* Define if unbuffered stream file optimization is supported.  */


/* Define if lite version of exit supported.  */
/* #undef _LITE_EXIT */

/* Define if declare atexit data as global.  */
/* #undef _REENT_GLOBAL_ATEXIT */

/* Define to move the stdio stream FILE objects out of struct _reent and make
   them global.  The stdio stream pointers of struct _reent are initialized to
   point to the global stdio FILE stream objects. */
/* #undef _WANT_REENT_GLOBAL_STDIO_STREAMS */

/* Define if small footprint nano-formatted-IO implementation used.  */
/* #undef _NANO_FORMATTED_IO */

/* Define if using retargetable functions for default lock routines.  */


/* Define to use type long for time_t.  */
/* #undef _WANT_USE_LONG_TIME_T */

/*
 * Iconv encodings enabled ("to" direction)
 */
/* #undef _ICONV_TO_ENCODING_BIG5 */
/* #undef _ICONV_TO_ENCODING_CP775 */
/* #undef _ICONV_TO_ENCODING_CP850 */
/* #undef _ICONV_TO_ENCODING_CP852 */
/* #undef _ICONV_TO_ENCODING_CP855 */
/* #undef _ICONV_TO_ENCODING_CP866 */
/* #undef _ICONV_TO_ENCODING_EUC_JP */
/* #undef _ICONV_TO_ENCODING_EUC_TW */
/* #undef _ICONV_TO_ENCODING_EUC_KR */
/* #undef _ICONV_TO_ENCODING_ISO_8859_1 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_10 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_11 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_13 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_14 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_15 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_2 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_3 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_4 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_5 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_6 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_7 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_8 */
/* #undef _ICONV_TO_ENCODING_ISO_8859_9 */
/* #undef _ICONV_TO_ENCODING_ISO_IR_111 */
/* #undef _ICONV_TO_ENCODING_KOI8_R */
/* #undef _ICONV_TO_ENCODING_KOI8_RU */
/* #undef _ICONV_TO_ENCODING_KOI8_U */
/* #undef _ICONV_TO_ENCODING_KOI8_UNI */
/* #undef _ICONV_TO_ENCODING_UCS_2 */
/* #undef _ICONV_TO_ENCODING_UCS_2_INTERNAL */
/* #undef _ICONV_TO_ENCODING_UCS_2BE */
/* #undef _ICONV_TO_ENCODING_UCS_2LE */
/* #undef _ICONV_TO_ENCODING_UCS_4 */
/* #undef _ICONV_TO_ENCODING_UCS_4_INTERNAL */
/* #undef _ICONV_TO_ENCODING_UCS_4BE */
/* #undef _ICONV_TO_ENCODING_UCS_4LE */
/* #undef _ICONV_TO_ENCODING_US_ASCII */
/* #undef _ICONV_TO_ENCODING_UTF_16 */
/* #undef _ICONV_TO_ENCODING_UTF_16BE */
/* #undef _ICONV_TO_ENCODING_UTF_16LE */
/* #undef _ICONV_TO_ENCODING_UTF_8 */
/* #undef _ICONV_TO_ENCODING_WIN_1250 */
/* #undef _ICONV_TO_ENCODING_WIN_1251 */
/* #undef _ICONV_TO_ENCODING_WIN_1252 */
/* #undef _ICONV_TO_ENCODING_WIN_1253 */
/* #undef _ICONV_TO_ENCODING_WIN_1254 */
/* #undef _ICONV_TO_ENCODING_WIN_1255 */
/* #undef _ICONV_TO_ENCODING_WIN_1256 */
/* #undef _ICONV_TO_ENCODING_WIN_1257 */
/* #undef _ICONV_TO_ENCODING_WIN_1258 */

/*
 * Iconv encodings enabled ("from" direction)
 */
/* #undef _ICONV_FROM_ENCODING_BIG5 */
/* #undef _ICONV_FROM_ENCODING_CP775 */
/* #undef _ICONV_FROM_ENCODING_CP850 */
/* #undef _ICONV_FROM_ENCODING_CP852 */
/* #undef _ICONV_FROM_ENCODING_CP855 */
/* #undef _ICONV_FROM_ENCODING_CP866 */
/* #undef _ICONV_FROM_ENCODING_EUC_JP */
/* #undef _ICONV_FROM_ENCODING_EUC_TW */
/* #undef _ICONV_FROM_ENCODING_EUC_KR */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_1 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_10 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_11 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_13 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_14 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_15 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_2 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_3 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_4 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_5 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_6 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_7 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_8 */
/* #undef _ICONV_FROM_ENCODING_ISO_8859_9 */
/* #undef _ICONV_FROM_ENCODING_ISO_IR_111 */
/* #undef _ICONV_FROM_ENCODING_KOI8_R */
/* #undef _ICONV_FROM_ENCODING_KOI8_RU */
/* #undef _ICONV_FROM_ENCODING_KOI8_U */
/* #undef _ICONV_FROM_ENCODING_KOI8_UNI */
/* #undef _ICONV_FROM_ENCODING_UCS_2 */
/* #undef _ICONV_FROM_ENCODING_UCS_2_INTERNAL */
/* #undef _ICONV_FROM_ENCODING_UCS_2BE */
/* #undef _ICONV_FROM_ENCODING_UCS_2LE */
/* #undef _ICONV_FROM_ENCODING_UCS_4 */
/* #undef _ICONV_FROM_ENCODING_UCS_4_INTERNAL */
/* #undef _ICONV_FROM_ENCODING_UCS_4BE */
/* #undef _ICONV_FROM_ENCODING_UCS_4LE */
/* #undef _ICONV_FROM_ENCODING_US_ASCII */
/* #undef _ICONV_FROM_ENCODING_UTF_16 */
/* #undef _ICONV_FROM_ENCODING_UTF_16BE */
/* #undef _ICONV_FROM_ENCODING_UTF_16LE */
/* #undef _ICONV_FROM_ENCODING_UTF_8 */
/* #undef _ICONV_FROM_ENCODING_WIN_1250 */
/* #undef _ICONV_FROM_ENCODING_WIN_1251 */
/* #undef _ICONV_FROM_ENCODING_WIN_1252 */
/* #undef _ICONV_FROM_ENCODING_WIN_1253 */
/* #undef _ICONV_FROM_ENCODING_WIN_1254 */
/* #undef _ICONV_FROM_ENCODING_WIN_1255 */
/* #undef _ICONV_FROM_ENCODING_WIN_1256 */
/* #undef _ICONV_FROM_ENCODING_WIN_1257 */
/* #undef _ICONV_FROM_ENCODING_WIN_1258 */
# 11 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/config.h" 1 3



# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 5 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/config.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/features.h" 1 3
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2014.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id$
 */
# 6 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/config.h" 2 3





/* exceptions first */







/* 16 bit integer machines */
# 115 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/config.h" 3
/* For the PowerPC eabi, force the _impure_ptr to be in .sdata */
# 125 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/config.h" 3
/* Configure small REENT structure for Xilinx MicroBlaze platforms */
# 192 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/config.h" 3
/* This block should be kept in sync with GCC's limits.h.  The point
   of having these definitions here is to not include limits.h, which
   would pollute the user namespace, while still using types of the
   the correct widths when deciding how to define __int32_t and
   __int64_t.  */
# 217 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/config.h" 3
/* End of block that should be kept in sync with GCC's limits.h.  */
# 253 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/config.h" 3
/* Define return type of read/write routines.  In POSIX, the return type
   for read()/write() is "ssize_t" but legacy newlib code has been using
   "int" for some time.  If not specified, "int" is defaulted.  */



/* Define `count' parameter of read/write routines.  In POSIX, the `count'
   parameter is "size_t" but legacy newlib code has been using "int" for some
   time.  If not specified, "int" is defaulted.  */
# 272 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/config.h" 3
/* See if small reent asked for at configuration time and
   is not chosen by the platform by default.  */
# 292 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/config.h" 3
/* If _MB_EXTENDED_CHARSETS_ALL is set, we want all of the extended
   charsets.  The extended charsets add a few functions and a couple
   of tables of a few K each. */
# 12 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 2 3

/*  ISO C++.  */
# 40 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 3
/* Support gcc's __attribute__ facility.  */







/*  The traditional meaning of 'extern inline' for GCC is not
  to emit the function body unless the address is explicitly
  taken.  However this behaviour is changing to match the C99
  standard, which uses 'extern inline' to indicate that the
  function body *must* be emitted.  Likewise, a function declared
  without either 'extern' or 'static' defaults to extern linkage
  (C99 6.2.2p5), and the compiler may choose whether to use the
  inline version or call the extern linkage version (6.7.4p6).
  If we are using GCC, but do not have the new behaviour, we need
  to use extern inline; if we are using a new GCC with the
  C99-compatible behaviour, or a non-GCC compiler (which we will
  have to hope is C99, since there is no other way to achieve the
  effect of omitting the function if it isn't referenced) we use
  'static inline', which c99 defines to mean more-or-less the same
  as the Gnu C 'extern inline'.  */




/* We're using GCC in C99 mode, or an unknown compiler which
  we just have to hope obeys the C99 semantics of inline.  */
# 12 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdlib.h" 2 3




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
/* Copyright (C) 1989-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */






/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */
# 46 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */
# 86 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */




/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */
# 111 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 159 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 209 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
typedef unsigned int size_t;
# 235 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 276 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* On BSD/386 1.1, at least, machine/ansi.h defines _BSD_WCHAR_T_
   instead of _WCHAR_T_, and _BSD_RUNE_T_ (which, unlike the other
   symbols in the _FOO_T_ family, stays defined even after its
   corresponding type is defined).  If we define wchar_t, then we
   must undef _WCHAR_T_; for BSD/386 1.1 (and perhaps others), if
   we undef _WCHAR_T_, then we must also define rune_t, since 
   headers like runetype.h assume that if machine/ansi.h is included,
   and _BSD_WCHAR_T_ is not defined, then rune_t is available.
   machine/ansi.h says, "Note that _WCHAR_T_ and _RUNE_T_ must be of
   the same type." */
# 303 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* FreeBSD 5 can't be handled well using "traditional" logic above
   since it no longer defines _BSD_RUNE_T_ yet still desires to export
   rune_t in some cases... */
# 387 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* A null pointer constant.  */
# 17 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdlib.h" 2 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 1 3
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */



extern "C" {



# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 1 3
/* Provide support for both ANSI and non-ANSI environments.  */

/* To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */
# 14 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
/* Copyright (C) 1989-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */






/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */





/* snaroff@next.com says the NeXT needs this.  */




/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */
# 86 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */




/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */
# 111 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 143 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 154 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* If this symbol has done its job, get rid of it.  */




/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 235 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 387 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* A null pointer constant.  */
# 405 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Offset of member MEMBER in a struct of type TYPE. */






/* Type whose alignment is supported in every context and is at least
   as great as that of any standard type not using alignment
   specifiers.  */
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
  /* _Float128 is defined as a basic type, so max_align_t must be
     sufficiently aligned for it.  This code must work in C++, so we
     use __float128 here; that is only available on some
     architectures, but only on i386 is extra alignment needed for
     __float128.  */



} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 15 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 1 3
/* ANSI C namespace clean utility typedefs */

/* This file defines various typedefs needed by the system calls that support
   the C library.  Basically, they're just the POSIX versions with an '_'
   prepended.  Targets shall use <machine/_types.h> to define their own
   internal types if desired.

   There are three define patterns used for type definitions.  Lets assume
   xyz_t is a user type.

   The internal type definition uses __machine_xyz_t_defined.  It is defined by
   <machine/_types.h> to disable a default definition in <sys/_types.h>. It
   must not be used in other files.

   User type definitions are guarded by __xyz_t_defined in glibc and
   _XYZ_T_DECLARED in BSD compatible systems.
*/




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/newlib.h" 1 3
/* newlib.h.  Generated from newlib.hin by configure.  */
/* newlib.hin.  Manually edited from the output of autoheader to
   remove all PACKAGE_ macros which will collide with any user
   package using newlib header files and having its own package name,
   version, etc...  */
# 23 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 2 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_types.h" 1 3
/*
 *  $Id$
 */



# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 1 3
/*
 *  $Id$
 */
# 8 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_types.h" 2 3
# 25 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/lock.h" 1 3



/* dummy lock routines for single-threaded aps */

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/newlib.h" 1 3
/* newlib.h.  Generated from newlib.hin by configure.  */
/* newlib.hin.  Manually edited from the output of autoheader to
   remove all PACKAGE_ macros which will collide with any user
   package using newlib header files and having its own package name,
   version, etc...  */
# 7 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/lock.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 1 3
/* Provide support for both ANSI and non-ANSI environments.  */

/* To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */
# 8 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/lock.h" 2 3
# 30 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/lock.h" 3
extern "C" {


struct __lock;
typedef struct __lock * _LOCK_T;






extern void __retarget_lock_init(_LOCK_T *lock);

extern void __retarget_lock_init_recursive(_LOCK_T *lock);

extern void __retarget_lock_close(_LOCK_T lock);

extern void __retarget_lock_close_recursive(_LOCK_T lock);

extern void __retarget_lock_acquire(_LOCK_T lock);

extern void __retarget_lock_acquire_recursive(_LOCK_T lock);

extern int __retarget_lock_try_acquire(_LOCK_T lock);

extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);


extern void __retarget_lock_release(_LOCK_T lock);

extern void __retarget_lock_release_recursive(_LOCK_T lock);



}
# 26 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 88 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;


/*
 * We need fpos_t for the following, but it doesn't have a leading "_",
 * so we use _fpos_t instead.
 */

typedef long _fpos_t; /* XXX must match off_t in <sys/types.h> */
    /* (and must be `long' for now) */
# 124 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 3
/* Defined by GCC provided <stddef.h> */




typedef unsigned int __size_t;
# 141 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 3
/* If __SIZE_TYPE__ is defined (gcc) we define ssize_t based on size_t.
   We simply change "unsigned" to "signed" for this single definition
   to make sure ssize_t and size_t only differ by their signedness. */

typedef signed int _ssize_t;
# 156 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 3
typedef _ssize_t __ssize_t;


# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
/* Copyright (C) 1989-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */






/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */
# 46 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */
# 86 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */




/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */
# 111 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 154 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* If this symbol has done its job, get rid of it.  */




/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 235 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 350 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 387 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* A null pointer constant.  */
# 405 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Offset of member MEMBER in a struct of type TYPE. */
# 160 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 2 3


/* Conversion state information.  */
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value; /* Value so far.  */
} _mbstate_t;



typedef _LOCK_T _flock_t;



/* Iconv descriptor type */
typedef void *_iconv_t;






typedef unsigned long /* clock() */ __clock_t;






typedef __int_least64_t __time_t;





typedef unsigned long __clockid_t;


typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef int __nl_item;
typedef unsigned short __nlink_t;
typedef long __suseconds_t; /* microseconds (signed) */
typedef unsigned long __useconds_t; /* microseconds (unsigned) */




typedef char * __va_list;
# 16 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 2 3






typedef unsigned long __ULong;
# 38 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 3
struct _reent;

struct __locale_t;

/*
 * If _REENT_SMALL is defined, we make struct _reent as small as possible,
 * by having nearly everything possible allocated at first use.
 */

struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};

/* needed by reentrant structure */
struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};

/*
 * atexit() support.
 */



struct _on_exit_args {
 void * _fnargs[32 /* must be at least 32 to guarantee ANSI conformance */]; /* user fn args */
 void * _dso_handle[32 /* must be at least 32 to guarantee ANSI conformance */];
 /* Bitmask is set if user function takes arguments.  */
 __ULong _fntypes; /* type of exit routine -
				   Must have at least _ATEXIT_SIZE bits */
 /* Bitmask is set if function was registered via __cxa_atexit.  */
 __ULong _is_cxa;
};
# 93 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 3
struct _atexit {
 struct _atexit *_next; /* next in list */
 int _ind; /* next index in this table */
 /* Some entries may already have been called, and will be NULL.  */
 void (*_fns[32 /* must be at least 32 to guarantee ANSI conformance */])(void); /* the table itself */
        struct _on_exit_args _on_exit_args;
};
# 110 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 3
/*
 * Stdio buffers.
 *
 * This and __FILE are defined here because we need them for struct _reent,
 * but we don't want stdio.h included when stdlib.h is.
 */

struct __sbuf {
 unsigned char *_base;
 int _size;
};

/*
 * Stdio state variables.
 *
 * The following always hold:
 *
 *	if (_flags&(__SLBF|__SWR)) == (__SLBF|__SWR),
 *		_lbfsize is -_bf._size, else _lbfsize is 0
 *	if _flags&__SRD, _w is 0
 *	if _flags&__SWR, _r is 0
 *
 * This ensures that the getc and putc macros (or inline functions) never
 * try to write or read from a file that is in `read' or `write' mode.
 * (Moreover, they can, and do, automatically switch from read mode to
 * write mode, and back, on "r+" and "w+" files.)
 *
 * _lbfsize is used only to make the inline line-buffered output stream
 * code as compact as possible.
 *
 * _ub, _up, and _ur are used when ungetc() pushes back more characters
 * than fit in the current _bf, or when ungetc() pushes back a character
 * that does not match the previous one in _bf.  When this happens,
 * _ub._base becomes non-nil (i.e., a stream has ungetc() data iff
 * _ub._base!=NULL) and _up and _ur save the current values of _p and _r.
 */
# 181 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 3
struct __sFILE {
  unsigned char *_p; /* current position in (some) buffer */
  int _r; /* read space left for getc() */
  int _w; /* write space left for putc() */
  short _flags; /* flags, below; this FILE is free if 0 */
  short _file; /* fileno, if Unix descriptor, else -1 */
  struct __sbuf _bf; /* the buffer (at least 1 byte, if !NULL) */
  int _lbfsize; /* 0 or -_bf._size, for inline putc */





  /* operations */
  void * _cookie; /* cookie passed to io functions */

  int (*_read) (struct _reent *, void *,
        char *, int);
  int (*_write) (struct _reent *, void *,
         const char *,
         int);
  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);
  int (*_close) (struct _reent *, void *);

  /* separate buffer for long sequences of ungetc() */
  struct __sbuf _ub; /* ungetc buffer */
  unsigned char *_up; /* saved _p when _p is doing ungetc data */
  int _ur; /* saved _r when _r is counting ungetc data */

  /* tricks to meet minimum requirements even when malloc() fails */
  unsigned char _ubuf[3]; /* guarantee an ungetc() buffer */
  unsigned char _nbuf[1]; /* guarantee a getc() buffer */

  /* separate buffer for fgetline() when line crosses buffer boundary */
  struct __sbuf _lb; /* buffer for fgetline() */

  /* Unix stdio files get aligned to block boundaries on fseek() */
  int _blksize; /* stat.st_blksize (may be != _bf._size) */
  _off_t _offset; /* current lseek offset */


  struct _reent *_data; /* Here for binary compatibility? Remove? */



  _flock_t _lock; /* for thread-safety locking */

  _mbstate_t _mbstate; /* for wide char stdio functions. */
  int _flags2; /* for future use */
};
# 287 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};

/*
 * rand48 family support
 *
 * Copyright (c) 1993 Martin Birgmeier
 * All rights reserved.
 *
 * You may redistribute unmodified or modified versions of this source
 * code provided that the above copyright notice and this and the
 * following conditions are retained.
 *
 * This software is provided ``as is'', and comes with no warranties
 * of any kind. I shall in no event be liable for anything that happens
 * to anyone/anything when using this software.
 */







struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};

/* How big the some arrays are.  */




/*
 * struct _reent
 *
 * This structure contains *all* globals needed by the library.
 * It's raison d'etre is to facilitate threads by making all library routines
 * reentrant.  IE: All state information is contained here.
 */
# 608 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 3
struct _reent
{
  int _errno; /* local copy of errno */

  /* FILE is a big struct and may change over time.  To try to achieve binary
     compatibility with future versions, put stdin,stdout,stderr here.
     These are pointers into member __sf defined below.  */
  __FILE *_stdin, *_stdout, *_stderr;

  int _inc; /* used by tmpnam */
  char _emergency[25];

  /* TODO */
  int _unspecified_locale_info; /* unused, reserved for locale stuff */
  struct __locale_t *_locale;/* per-thread locale */

  int __sdidinit; /* 1 means stdio has been init'd */

  void (*__cleanup) (struct _reent *);

  /* used by mprec routines */
  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;

  /* used by some fp conversion routines */
  int _cvtlen; /* should be size_t */
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;
  /* Two next two fields were once used by malloc.  They are no longer
     used. They are used to preserve the space used before so as to
     allow addition of new reent fields and keep binary compatibility.   */
      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;


  /* atexit stuff */
  struct _atexit *_atexit; /* points to head of LIFO stack */
  struct _atexit _atexit0; /* one guaranteed table, required by ANSI */


  /* signal info */
  void (**(_sig_func))(int);

  /* These are here last so that __FILE can grow without changing the offsets
     of the above members (on the off chance that future binary compatibility
     would be broken otherwise).  */
  struct _glue __sglue; /* root of glue chain */

  __FILE __sf[3]; /* first three file descriptors */

};
# 800 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 3
/* This value is used in stdlib/misc.c.  reent/reent.c has to know it
   as well to make sure the freelist is correctly free'd.  Therefore
   we define it here, rather than in stdlib/misc.c, as before. */


/*
 * All references to struct _reent are via this pointer.
 * Internally, newlib routines that need to reference it should use _REENT.
 */





extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);

/* #define _REENT_ONLY define this to get only reentrant routines */
# 840 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 3
}
# 19 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdlib.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 1 3
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD$
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_default_types.h" 1 3
/*
 *  $Id$
 */
# 46 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/features.h" 1 3
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2014.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id$
 */
# 47 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
/* Copyright (C) 1989-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */
# 48 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 2 3
# 71 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * Testing against Clang-specific extensions.
 */
# 98 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * This code has been put in place to help reduce the addition of
 * compiler specific defines in FreeBSD code.  It helps to aid in
 * having a compiler-agnostic source tree.
 */
# 136 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * Compiler memory barriers, specific to gcc and clang.
 */
# 150 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/* XXX: if __GNUC__ >= 2: not tested everywhere originally, where replaced */
# 164 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * The __CONCAT macro is used to concatenate parts of symbol names, e.g.
 * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.
 * The __CONCAT macro is a bit tricky to use if it must work in non-ANSI
 * mode -- there must be no spaces between its arguments, and for nested
 * __CONCAT's, all the __CONCAT's must be at the left.  __CONCAT can also
 * concatenate double-quoted strings produced by the __STRING macro, but
 * this only works with ANSI C.
 *
 * __XSTRING is like __STRING, but it expands any macros in its argument
 * first.  It is only available with ANSI C.
 */
# 221 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * Compiler-dependent macros to help declare dead (non-returning) and
 * pure (no side effects) functions, and unused variables.  They are
 * null except for versions of gcc that are known to support the features
 * properly (old versions of gcc-2 supported the dead and pure features
 * in a different (wrong) way).  If we do not provide an implementation
 * for a given compiler, let the compile fail if it is told to use
 * a feature that we cannot live without.
 */
# 268 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * Keywords added in C11.
 */
# 322 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * XXX: Some compilers (Clang 3.3, GCC 4.7) falsely announce C++11 mode
 * without actually supporting the thread_local keyword. Don't check for
 * the presence of C++11 when defining _Thread_local.
 */
# 337 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * Emulation of C11 _Generic().  Unlike the previously defined C11
 * keywords, it is not possible to implement this using exactly the same
 * syntax.  Therefore implement something similar under the name
 * __generic().  Unlike _Generic(), this macro can only distinguish
 * between a single type, so it requires nested invocations to
 * distinguish multiple cases.
 */
# 356 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * C99 Static array indices in function parameter declarations.  Syntax such as:
 * void bar(int myArray[static 10]);
 * is allowed in C99 but not in C++.  Define __min_size appropriately so
 * headers using it can be compiled in either language.  Use like this:
 * void bar(int myArray[__min_size(10)]);
 */
# 419 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/* XXX: should use `#if __STDC_VERSION__ < 199901'. */




/*
 * GCC 2.95 provides `__restrict' as an extension to C90 to support the
 * C99-specific `restrict' type qualifier.  We happen to use `__restrict' as
 * a way to define the `restrict' type qualifier without disturbing older
 * software that is unaware of C99 keywords.
 */
# 438 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * GNU C version 2.96 adds explicit branch prediction so that
 * the CPU back-end can hint the processor and also so that
 * code blocks can be reordered such that the predicted path
 * sees a more linear flow, thus improving cache behavior, etc.
 *
 * The following two macros provide us with a way to utilize this
 * compiler feature.  Use __predict_true() if you expect the expression
 * to evaluate to true, and __predict_false() if you expect the
 * expression to evaluate to false.
 *
 * A few notes about usage:
 *
 *	* Generally, __predict_false() error condition checks (unless
 *	  you have some _strong_ reason to do otherwise, in which case
 *	  document it), and/or __predict_true() `no-error' condition
 *	  checks, assuming you want to optimize for the no-error case.
 *
 *	* Other than that, if you don't know the likelihood of a test
 *	  succeeding from empirical or other `hard' evidence, don't
 *	  make predictions.
 *
 *	* These are meant to be used in places that are run `a lot'.
 *	  It is wasteful to make predictions in code that is run
 *	  seldomly (e.g. at subsystem initialization time) as the
 *	  basic block reordering that this affects can often generate
 *	  larger code.
 */
# 477 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/* Only default visibility is supported on PE/COFF targets. */
# 493 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * Given the pointer x to the member m of the struct s, return
 * a pointer to the containing structure.  When using GCC, we first
 * assign pointer x to a local variable, to check that its type is
 * compatible with member m.
 */
# 509 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * Compiler-dependent macros to declare that functions take printf-like
 * or scanf-like arguments.  They are null except for versions of gcc
 * that are known to support the features properly (old versions of gcc-2
 * didn't permit keeping the keywords out of the application namespace).
 */
# 533 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/* Compiler-dependent macros that rely on FreeBSD-specific extensions. */
# 624 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * Nullability qualifiers: currently only supported by Clang.
 */
# 639 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * Type Safety Checking
 *
 * Clang provides additional attributes to enable checking type safety
 * properties that cannot be enforced by the C type system. 
 */
# 657 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 3
/*
 * Lock annotations.
 *
 * Clang provides support for doing basic thread-safety tests at
 * compile-time, by marking which locks will/should be held when
 * entering/leaving a functions.
 *
 * Furthermore, it is also possible to annotate variables and structure
 * members to enforce that they are only accessed when certain locks are
 * held.
 */







/* Structure implements a lock. */
/* FIXME: Use __lockable__, etc. to avoid colliding with user namespace macros,
 * once clang is fixed: https://bugs.llvm.org/show_bug.cgi?id=34319 */


/* Function acquires an exclusive or shared lock. */





/* Function attempts to acquire an exclusive or shared lock. */





/* Function releases a lock. */


/* Function asserts that an exclusive or shared lock is held. */





/* Function requires that an exclusive or shared lock is or is not held. */







/* Function should not be analyzed. */


/* Guard variables and structure members by lock. */
# 20 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdlib.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/stdlib.h" 1 3



/* place holder so platforms may add stdlib.h extensions */
# 21 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdlib.h" 2 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/alloca.h" 1 3
/* libc/include/alloca.h - Allocate memory on stack */

/* Written 2000 by Werner Almesberger */
/* Rearranged for general inclusion by stdlib.h.
   2001, Corinna Vinschen <vinschen@redhat.com> */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 1 3
/* Provide support for both ANSI and non-ANSI environments.  */

/* To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */
# 11 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/alloca.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 1 3
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */
# 12 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/alloca.h" 2 3
# 23 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdlib.h" 2 3
# 33 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdlib.h" 3
extern "C" {

typedef struct
{
  int quot; /* quotient */
  int rem; /* remainder */
} div_t;

typedef struct
{
  long quot; /* quotient */
  long rem; /* remainder */
} ldiv_t;


typedef struct
{
  long long int quot; /* quotient */
  long long int rem; /* remainder */
} lldiv_t;




typedef int (*__compar_fn_t) (const void *, const void *);







int __locale_mb_cur_max (void);



void abort (void) __attribute__ ((__noreturn__));
int abs (int);

__uint32_t arc4random (void);
__uint32_t arc4random_uniform (__uint32_t);
void arc4random_buf (void *, size_t);

int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void *__key,
         const void *__base,
         size_t __nmemb,
         size_t __size,
         __compar_fn_t _compar);
void *calloc(size_t, size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__))
      __attribute__((__alloc_size__(1, 2))) __attribute__ ((__nothrow__));
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
void free (void *) __attribute__ ((__nothrow__));
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);

extern char *suboptarg; /* getsubopt(3) external variable */
int getsubopt (char **, char * const *, char **);

long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void *malloc(size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(1))) __attribute__ ((__nothrow__));
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *, const char *, size_t);
int _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *, const char *, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
size_t wcstombs (char *, const wchar_t *, size_t);
size_t _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);


char * mkdtemp (char *);






int mkstemp (char *);


int mkstemps (char *, int);


char * mktemp (char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));


char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);
char * _mktemp_r (struct _reent *, char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));
void qsort (void *__base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void *realloc(void *, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2))) __attribute__ ((__nothrow__));

void *reallocarray(void *, size_t, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2, 3)));
void *reallocf(void *, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2)));


char * realpath (const char * path, char * resolved_path);


int rpmatch (const char *response);




void srand (unsigned __seed);
double strtod (const char * __n, char ** __end_PTR);
double _strtod_r (struct _reent *,const char * __n, char ** __end_PTR);

float strtof (const char * __n, char ** __end_PTR);


/* the following strtodf interface is deprecated...use strtof instead */




long strtol (const char * __n, char ** __end_PTR, int __base);
long _strtol_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);
unsigned long strtoul (const char * __n, char ** __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);
# 188 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdlib.h" 3
int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);


int on_exit (void (*__func)(int, void *),void *__arg);


void _Exit (int __status) __attribute__ ((__noreturn__));


int putenv (char *__string);

int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);

int setenv (const char *__string, const char *__value, int __overwrite);

int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);
# 221 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdlib.h" 3
char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);

char * itoa (int, char *, int);
char * utoa (unsigned, char *, int);


int rand_r (unsigned *__seed);



double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);


char * initstate (unsigned, char *, size_t);
long random (void);
char * setstate (char *);
void srandom (unsigned);


long long atoll (const char *__nptr);

long long _atoll_r (struct _reent *, const char *__nptr);

long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char * __n, char ** __end_PTR, int __base);

long long _strtoll_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);

unsigned long long strtoull (const char * __n, char ** __end_PTR, int __base);

unsigned long long _strtoull_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);



void cfree (void *);


int unsetenv (const char *__string);

int _unsetenv_r (struct _reent *, const char *__string);



int posix_memalign (void **, size_t, size_t) __attribute__((__nonnull__ (1)))
     __attribute__((__warn_unused_result__));


char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t) __attribute__ ((__nothrow__));
void * _calloc_r (struct _reent *, size_t, size_t) __attribute__ ((__nothrow__));
void _free_r (struct _reent *, void *) __attribute__ ((__nothrow__));
void * _realloc_r (struct _reent *, void *, size_t) __attribute__ ((__nothrow__));
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);

/* There are two common qsort_r variants.  If you request
   _BSD_SOURCE, you get the BSD version; otherwise you get the GNU
   version.  We want that #undef qsort_r will still let you
   invoke the underlying function, but that requires gcc support. */




void qsort_r (void *__base, size_t __nmemb, size_t __size, void *__thunk, int (*_compar)(void *, const void *, const void *))
             __asm__ ("" /* stringify without expanding x */ /* expand x, then stringify */ "__bsd_qsort_r");






/* On platforms where long double equals double.  */

extern long double _strtold_r (struct _reent *, const char *, char **);

extern long double strtold (const char *, char **);



/*
 * If we're in a mode greater than C99, expose C11 functions.
 */

void * aligned_alloc(size_t, size_t) __attribute__((__malloc__)) __attribute__((__alloc_align__(1)))
     __attribute__((__alloc_size__(2))) __attribute__((__warn_unused_result__));
int at_quick_exit(void (*)(void));
[[noreturn]] void
 quick_exit(int);


}
# 76 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstdlib" 2 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h" 1 3
// -*- C++ -*- C library enhancements header.

// Copyright (C) 2016-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file include/bits/std_abs.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{cmath, cstdlib}
 */




       
# 34 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h" 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 1 3
// Predefined symbols and macros -*- C++ -*-

// Copyright (C) 1997-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file bits/c++config.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{version}
 */
# 36 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h" 2 3


# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdlib.h" 1 3
/*
 * stdlib.h
 *
 * Definitions for common types, variables, and functions.
 */
# 39 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h" 2 3







extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }


// _GLIBCXX_RESOLVE_LIB_DEFECTS
// 2192. Validity and return type of std::abs(0u) is unclear
// 2294. <cstdlib> should declare abs(double)
// 2735. std::abs(short), std::abs(signed char) and others should return int


  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }
# 107 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h" 3

} // namespace
} // extern "C"++"
# 78 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstdlib" 2 3

// Get rid of those macros defined in <stdlib.h> in lieu of real functions.
# 121 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




} // namespace
# 195 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


} // namespace __gnu_cxx

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
} // namespace std



} // extern "C++"
# 37 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;
# 51 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/stdlib.h" 3
using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 26 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/string.h" 1 3
/*
 * string.h
 *
 * Definitions for memory and string functions.
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 1 3
/* Provide support for both ANSI and non-ANSI environments.  */

/* To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */
# 11 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/string.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 1 3
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */
# 12 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/string.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 1 3
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD$
 */
# 13 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/string.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/features.h" 1 3
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2014.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id$
 */
# 14 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/string.h" 2 3



# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
/* Copyright (C) 1989-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */






/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */
# 46 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */
# 86 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */




/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */
# 111 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 154 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* If this symbol has done its job, get rid of it.  */




/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 235 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 387 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* A null pointer constant.  */
# 405 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Offset of member MEMBER in a struct of type TYPE. */
# 18 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/string.h" 2 3


# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/xlocale.h" 1 3
/* Definition of opaque POSIX-1.2008 type locale_t for userspace. */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/newlib.h" 1 3
/* newlib.h.  Generated from newlib.hin by configure.  */
/* newlib.hin.  Manually edited from the output of autoheader to
   remove all PACKAGE_ macros which will collide with any user
   package using newlib header files and having its own package name,
   version, etc...  */
# 7 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/xlocale.h" 2 3


struct __locale_t;
typedef struct __locale_t *locale_t;
# 21 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/string.h" 2 3



# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/strings.h" 1 3
/*-
 * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: head/include/strings.h 272673 2014-10-07 04:54:11Z delphij $
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 1 3
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD$
 */
# 33 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/strings.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 1 3
/* ANSI C namespace clean utility typedefs */

/* This file defines various typedefs needed by the system calls that support
   the C library.  Basically, they're just the POSIX versions with an '_'
   prepended.  Targets shall use <machine/_types.h> to define their own
   internal types if desired.

   There are three define patterns used for type definitions.  Lets assume
   xyz_t is a user type.

   The internal type definition uses __machine_xyz_t_defined.  It is defined by
   <machine/_types.h> to disable a default definition in <sys/_types.h>. It
   must not be used in other files.

   User type definitions are guarded by __xyz_t_defined in glibc and
   _XYZ_T_DECLARED in BSD compatible systems.
*/
# 34 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/strings.h" 2 3


# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/xlocale.h" 1 3
/* Definition of opaque POSIX-1.2008 type locale_t for userspace. */
# 37 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/strings.h" 2 3







extern "C" {

int bcmp(const void *, const void *, size_t) __attribute__((__pure__)); /* LEGACY */
void bcopy(const void *, void *, size_t); /* LEGACY */
void bzero(void *, size_t); /* LEGACY */


void explicit_bzero(void *, size_t);


int ffs(int) __attribute__((__const__));


int ffsl(long) __attribute__((__const__));
int ffsll(long long) __attribute__((__const__));
int fls(int) __attribute__((__const__));
int flsl(long) __attribute__((__const__));
int flsll(long long) __attribute__((__const__));


char *index(const char *, int) __attribute__((__pure__)); /* LEGACY */
char *rindex(const char *, int) __attribute__((__pure__)); /* LEGACY */

int strcasecmp(const char *, const char *) __attribute__((__pure__));
int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));


int strcasecmp_l (const char *, const char *, locale_t);
int strncasecmp_l (const char *, const char *, size_t, locale_t);

}
# 25 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/string.h" 2 3


extern "C" {

void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void *, const void *, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *, const char *);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *, const char *);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *, const char *, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *, const char *, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *, const char *);

size_t strxfrm (char *, const char *, size_t);


int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *, const char *, size_t, locale_t);


char *strtok_r (char *, const char *, char **);


int timingsafe_bcmp (const void *, const void *, size_t);
int timingsafe_memcmp (const void *, const void *, size_t);


void * memccpy (void *, const void *, int, size_t);
# 76 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/string.h" 3
char *stpcpy (char *, const char *);
char *stpncpy (char *, const char *, size_t);






char *strdup (const char *) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));

char *_strdup_r (struct _reent *, const char *);

char *strndup (const char *, size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));

char *_strndup_r (struct _reent *, const char *, size_t);

/* There are two common strerror_r variants.  If you request
   _GNU_SOURCE, you get the GNU version; otherwise you get the POSIX
   version.  POSIX requires that #undef strerror_r will still let you
   invoke the underlying function, but that requires gcc support.  */




int strerror_r (int, char *, size_t)

             __asm__ ("" /* stringify without expanding x */ /* expand x, then stringify */ "__xpg_strerror_r")

  ;






/* Reentrant version of strerror.  */
char * _strerror_r (struct _reent *, int, int, int *);


size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);


size_t strnlen (const char *, size_t);


char *strsep (char **, const char *);


char *strnstr(const char *, const char *, size_t) __attribute__((__pure__));



char *strlwr (char *);
char *strupr (char *);



char *strsignal (int __signo);
# 159 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/string.h" 3
/* There are two common basename variants.  If you do NOT #include <libgen.h>
   and you do

     #define _GNU_SOURCE
     #include <string.h>

   you get the GNU version.  Otherwise you get the POSIX versionfor which you
   should #include <libgen.h>i for the function prototype.  POSIX requires that
   #undef basename will still let you invoke the underlying function.  However,
   this also implies that the POSIX version is used in this case.  That's made
   sure here. */





# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/string.h" 1 3
/* This is a dummy <sys/string.h> used as a placeholder for
   systems that need to have a special header file.  */
# 176 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/string.h" 2 3

}
# 27 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/math.h" 1 3
// -*- C++ -*- compatibility header.

// Copyright (C) 2002-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file math.h
 *  This is a Standard C++ Library header.
 */
# 36 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/math.h" 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cmath" 1 3
// -*- C++ -*- C forwarding header.

// Copyright (C) 1997-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file include/cmath
 *  This is a Standard C++ Library file.  You should @c \#include this file
 *  in your programs, rather than any of the @a *.h implementation files.
 *
 *  This is the C++ version of the Standard C Library header @c math.h,
 *  and its contents are (mostly) the same as that header, but are all
 *  contained in the namespace @c std (except for names which are defined
 *  as macros in C).
 */

//
// ISO C++ 14882: 26.5  C library
//

       
# 40 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cmath" 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 1 3
// Predefined symbols and macros -*- C++ -*-

// Copyright (C) 1997-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file bits/c++config.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{version}
 */
# 42 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cmath" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/cpp_type_traits.h" 1 3
// The  -*- C++ -*- type traits classes for internal use in libstdc++

// Copyright (C) 2000-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file bits/cpp_type_traits.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{ext/type_traits}
 */

// Written by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>




       
# 36 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/cpp_type_traits.h" 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 1 3
// Predefined symbols and macros -*- C++ -*-

// Copyright (C) 1997-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file bits/c++config.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{version}
 */
# 38 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/cpp_type_traits.h" 2 3

//
// This file provides some compile-time information about various types.
// These representations were designed, on purpose, to be constant-expressions
// and not types as found in <bits/type_traits.h>.  In particular, they
// can be used in control structures and the optimizer hopefully will do
// the obvious thing.
//
// Why integral expressions, and not functions nor types?
// Firstly, these compile-time entities are used as template-arguments
// so function return values won't work:  We need compile-time entities.
// We're left with types and constant  integral expressions.
// Secondly, from the point of view of ease of use, type-based compile-time
// information is -not- *that* convenient.  One has to write lots of
// overloaded functions and to hope that the compiler will select the right
// one. As a net effect, the overall structure isn't very clear at first
// glance.
// Thirdly, partial ordering and overload resolution (of function templates)
// is highly costly in terms of compiler-resource.  It is a Good Thing to
// keep these resource consumption as least as possible.
//
// See valarray_array.h for a case use.
//
// -- Gaby (dosreis@cmla.ens-cachan.fr) 2000-03-06.
//
// Update 2005: types are also provided and <bits/type_traits.h> has been
// removed.
//

extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };

  // N.B. The conversions to bool are needed due to the issue
  // explained in c++/19404.
  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };

  // Compare for equality of types.
  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  // Holds if the template-argument is a void type.
  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  //
  // Integer types
  //
  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  // Thirteen specializations (yes there are eleven standard integer
  // types; <em>long long</em> and <em>unsigned long long</em> are
  // supported as extensions).  Up to four target-specific __int<N>
  // types are supported as well.
  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 184 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 284 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/cpp_type_traits.h" 3
  //
  // Floating point types
  //
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  // three specializations (float, double and 'long double')
  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  //
  // Pointer types
  //
  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  //
  // An arithmetic type is an integer type or a floating point type
  //
  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };

  //
  // A scalar type is an arithmetic type or a pointer type
  // 
  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };

  //
  // For use in std::copy and std::find overloads for streambuf iterators.
  //
  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 414 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/cpp_type_traits.h" 3
  //
  // Move iterator type
  //
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


} // namespace
} // extern "C++"
# 43 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cmath" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/ext/type_traits.h" 1 3
// -*- C++ -*-

// Copyright (C) 2005-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the terms
// of the GNU General Public License as published by the Free Software
// Foundation; either version 3, or (at your option) any later
// version.

// This library is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file ext/type_traits.h
 *  This file is a GNU extension to the Standard C++ Library.
 */




       
# 33 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/ext/type_traits.h" 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 1 3
// Predefined symbols and macros -*- C++ -*-

// Copyright (C) 1997-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file bits/c++config.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{version}
 */
# 35 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/ext/type_traits.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/cpp_type_traits.h" 1 3
// The  -*- C++ -*- type traits classes for internal use in libstdc++

// Copyright (C) 2000-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file bits/cpp_type_traits.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{ext/type_traits}
 */

// Written by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>
# 36 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/ext/type_traits.h" 2 3

extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  // Define a nested type if some predicate holds.
  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };


  // Conditional expression for types. If true, first, if false, second.
  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };


  // Given an integral builtin type, return the corresponding unsigned type.
  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };

  // Declare but don't define.
  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;


  // Given an integral builtin type, return the corresponding signed type.
  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };

  // Declare but don't define.
  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }


  // For complex and cmath
  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };

  // No nested __type member for non-integer non-floating point types,
  // allows this type to be used for SFINAE to constrain overloads in
  // <cmath> and <complex> to only the intended types.
  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


} // namespace
} // extern "C++"
# 44 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cmath" 2 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 1 3




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 1 3
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */
# 6 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 1 3
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD$
 */
# 7 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 8 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 1 3
/* Provide support for both ANSI and non-ANSI environments.  */

/* To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */
# 9 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 2 3

extern "C" {

/* Natural log of 2 */



 /* gcc >= 3.3 implicitly defines builtins for HUGE_VALx values.  */
# 83 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 3
/* Reentrant ANSI C functions.  */


extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);


/* Non reentrant ANSI C functions.  */



extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);




extern int finite (double);
extern int finitef (float);
extern int finitel (long double);
extern int isinff (float);
extern int isnanf (float);
# 137 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 3
/* ISO C99 types and macros. */

/* FIXME:  FLT_EVAL_METHOD should somehow be gotten from float.h (which is hard,
 * considering that the standard says the includes it defines should not
 * include other includes that it defines) and that value used.  (This can be
 * solved, but autoconf has a bug which makes the solution more difficult, so
 * it has been skipped for now.)  */






    typedef float float_t;
    typedef double double_t;
# 194 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 3
extern int __isinff (float x);
extern int __isinfd (double x);
extern int __isnanf (float x);
extern int __isnand (double x);
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
extern int __signbitf (float x);
extern int __signbitd (double x);

/* Note: isinf and isnan were once functions in newlib that took double
 *       arguments.  C99 specifies that these names are reserved for macros
 *       supporting multiple floating point types.  Thus, they are
 *       now defined as macros.  Implementations of the old functions
 *       taking double arguments still exist for compatibility purposes
 *       (prototypes for them are earlier in this header).  */
# 288 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 3
/* Non ANSI double precision functions.  */

extern double infinity (void);
extern double nan (const char *);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);





extern double hypot (double, double);




/* Single precision versions of ANSI functions.  */

extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);


/* Other single precision functions.  */

extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long int llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (const char *);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);


/* Newlib doesn't fully support long double math functions so far.
   On platforms where long double equals double the long double functions
   simply call the double functions.  On Cygwin the long double functions
   are implemented independently from newlib to be able to use optimized
   assembler functions despite using the Microsoft x86_64 ABI. */

/* Reentrant ANSI C functions.  */

extern long double atanl (long double);
extern long double cosl (long double);
extern long double sinl (long double);
extern long double tanl (long double);
extern long double tanhl (long double);
extern long double frexpl (long double, int *);
extern long double modfl (long double, long double *);
extern long double ceill (long double);
extern long double fabsl (long double);
extern long double floorl (long double);
extern long double log1pl (long double);
extern long double expm1l (long double);

/* Non reentrant ANSI C functions.  */


extern long double acosl (long double);
extern long double asinl (long double);
extern long double atan2l (long double, long double);
extern long double coshl (long double);
extern long double sinhl (long double);
extern long double expl (long double);
extern long double ldexpl (long double, int);
extern long double logl (long double);
extern long double log10l (long double);
extern long double powl (long double, long double);
extern long double sqrtl (long double);
extern long double fmodl (long double, long double);
extern long double hypotl (long double, long double);


extern long double copysignl (long double, long double);
extern long double nanl (const char *);
extern int ilogbl (long double);
extern long double asinhl (long double);
extern long double cbrtl (long double);
extern long double nextafterl (long double, long double);
extern float nexttowardf (float, long double);
extern double nexttoward (double, long double);
extern long double nexttowardl (long double, long double);
extern long double logbl (long double);
extern long double log2l (long double);
extern long double rintl (long double);
extern long double scalbnl (long double, int);
extern long double exp2l (long double);
extern long double scalblnl (long double, long);
extern long double tgammal (long double);
extern long double nearbyintl (long double);
extern long int lrintl (long double);
extern long long int llrintl (long double);
extern long double roundl (long double);
extern long lroundl (long double);
extern long long int llroundl (long double);
extern long double truncl (long double);
extern long double remquol (long double, long double, int *);
extern long double fdiml (long double, long double);
extern long double fmaxl (long double, long double);
extern long double fminl (long double, long double);
extern long double fmal (long double, long double, long double);

extern long double acoshl (long double);
extern long double atanhl (long double);
extern long double remainderl (long double, long double);
extern long double lgammal (long double);
extern long double erfl (long double);
extern long double erfcl (long double);
# 503 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 3
extern double drem (double, double);
extern float dremf (float, float);



extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);



extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);



extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);


/* GNU extensions */
# 562 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 3
/* The gamma functions use a global variable, signgam.  */


extern int *__signgam (void);






/* The exception structure passed to the matherr routine.  */
/* We have a problem when using C++ since `exception' is a reserved
   name in C++.  */

struct __exception



{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};


extern int matherr (struct __exception *e);




/* Values for the type field of struct exception.  */
# 606 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 3
/* Useful constants.  */
# 640 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 3
/* Global control over fdlibm error handling.  */

enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};




extern enum __fdlibm_version __fdlib_version;
# 662 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/math.h" 3
}
# 46 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cmath" 2 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/bits/std_abs.h" 1 3
// -*- C++ -*- C library enhancements header.

// Copyright (C) 2016-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file include/bits/std_abs.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{cmath, cstdlib}
 */
# 48 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cmath" 2 3




// Get rid of those macros defined in <math.h> in lieu of real functions.
# 77 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cmath" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }




// These are possible macros imported from C99-land.
# 536 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cmath" 3
  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }



  // Note: middle-end/36757 is fixed, __builtin_signbit is type-generic.
  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1064 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cmath" 3
  // types
  using ::double_t;
  using ::float_t;

  // functions
  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;

  /// Additional overloads.

  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }



  // DR 568.
  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1923 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cmath" 3

} // namespace





} // extern "C++"
# 37 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;


// The mathematical special functions are only added to the global namespace
// by IS 29124, but not by C++17.
# 28 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2


# 29 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h"
typedef bool boolean;
typedef uint8_t byte;
typedef uint16_t word;

// some libraries and sketches depend on this AVR stuff,
// assuming Arduino.h or WProgram.h automatically includes it...
//
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/avr/pgmspace.h" 1
/*
  pgmspace.h - Definitions for compatibility with AVR pgmspace macros

  Copyright (c) 2015 Arduino LLC

  Based on work of Paul Stoffregen on Teensy 3 (http://pjrc.com)

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE
*/




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 1 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
/*
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
 */

/**
 *  @file  inttypes.h
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/newlib.h" 1 3
/* newlib.h.  Generated from newlib.hin by configure.  */
/* newlib.hin.  Manually edited from the output of autoheader to
   remove all PACKAGE_ macros which will collide with any user
   package using newlib header files and having its own package name,
   version, etc...  */
# 17 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 2 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_intsup.h" 1 3
/*
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
 */
# 19 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 1 3
/* Provide support for both ANSI and non-ANSI environments.  */

/* To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */
# 20 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 2 3


# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
/* Copyright (C) 1989-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */






/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */
# 46 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */
# 86 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */




/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */
# 111 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 154 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* If this symbol has done its job, get rid of it.  */




/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 235 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 387 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* A null pointer constant.  */
# 405 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Offset of member MEMBER in a struct of type TYPE. */
# 23 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 2 3


# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/xlocale.h" 1 3
/* Definition of opaque POSIX-1.2008 type locale_t for userspace. */
# 26 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 2 3




/* 8-bit types */




/* NOTICE: scanning 8-bit types requires use of the hh specifier
 * which is only supported on newlib platforms that
 * are built with C99 I/O format support enabled.  If the flag in
 * newlib.h hasn't been set during configuration to indicate this, the 8-bit
 * scanning format macros are disabled here as they result in undefined
 * behaviour which can include memory overwrite.  Overriding the flag after the
 * library has been built is not recommended as it will expose the underlying
 * undefined behaviour.
 */
# 59 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
/* Macros below are only enabled for a newlib built with C99 I/O format support. */
# 78 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
/* Macros below are only enabled for a newlib built with C99 I/O format support. */
# 96 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
/* Macros below are only enabled for a newlib built with C99 I/O format support. */
# 107 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
/* 16-bit types */
# 157 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
/* 32-bit types */
# 207 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
/* 64-bit types */
# 261 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
/* max-bit types */
# 286 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
/* ptr types */
# 312 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
typedef struct {
  intmax_t quot;
  intmax_t rem;
} imaxdiv_t;

struct _reent;


extern "C" {


extern intmax_t imaxabs(intmax_t j);
extern imaxdiv_t imaxdiv(intmax_t numer, intmax_t denomer);
extern intmax_t strtoimax(const char *, char **, int);
extern intmax_t _strtoimax_r(struct _reent *, const char *, char **, int);
extern uintmax_t strtoumax(const char *, char **, int);
extern uintmax_t _strtoumax_r(struct _reent *, const char *, char **, int);
extern intmax_t wcstoimax(const wchar_t *, wchar_t **, int);
extern intmax_t _wcstoimax_r(struct _reent *, const wchar_t *, wchar_t **, int);
extern uintmax_t wcstoumax(const wchar_t *, wchar_t **, int);
extern uintmax_t _wcstoumax_r(struct _reent *, const wchar_t *, wchar_t **, int);


extern intmax_t strtoimax_l(const char *, char **_restrict, int, locale_t);
extern uintmax_t strtoumax_l(const char *, char **_restrict, int, locale_t);
extern intmax_t wcstoimax_l(const wchar_t *, wchar_t **_restrict, int, locale_t);
extern uintmax_t wcstoumax_l(const wchar_t *, wchar_t **_restrict, int, locale_t);



}
# 31 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/avr/pgmspace.h" 2








# 38 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/avr/pgmspace.h"
typedef void prog_void;
typedef char prog_char;
typedef unsigned char prog_uchar;
typedef int8_t prog_int8_t;
typedef uint8_t prog_uint8_t;
typedef int16_t prog_int16_t;
typedef uint16_t prog_uint16_t;
typedef int32_t prog_int32_t;
typedef uint32_t prog_uint32_t;
typedef int64_t prog_int64_t;
typedef uint64_t prog_uint64_t;

typedef const void* int_farptr_t;
typedef const void* uint_farptr_t;
# 37 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/avr/interrupt.h" 1
/*
  Copyright (c) 2015 Arduino LCC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

/*
  Empty file.
  This file is here to allow compatibility with sketches (made for AVR)
  that includes <AVR/interrupt.h>
*/
# 38 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/avr/io.h" 1
/*
  io.h - Definitions for compatibility with AVR io macros

  Copyright (c) 2016 Arduino LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE
*/
# 39 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/binary.h" 1
/*
  binary.h - Definitions for binary constants
  Copyright (c) 2006 David A. Mellis.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
# 41 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/itoa.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

       


extern "C"{


//extern void itoa( int n, char s[] ) ;

extern char* itoa( int value, char *string, int radix ) ;
extern char* ltoa( long value, char *string, int radix ) ;
extern char* utoa( unsigned int value, char *string, int radix ) ;
extern char* ultoa( unsigned long value, char *string, int radix ) ;


} // extern "C"
# 42 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2


extern "C"{


// Include Atmel headers
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h" 1
/* ----------------------------------------------------------------------------
 *         SAM Software Package License
 * ----------------------------------------------------------------------------
 * Copyright (c) 2015, Atmel Corporation
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following condition is met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the disclaimer below.
 *
 * Atmel's name may not be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
 * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * ----------------------------------------------------------------------------
 */





/*
 * ----------------------------------------------------------------------------
 * SAMG family
 * ----------------------------------------------------------------------------
 */

/* SAMG55 series */






/* Entire SAMG55 series */


/* SAMG54 series */
# 60 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAMG54 series */




/* Entire SAMG family */


/*
 * ----------------------------------------------------------------------------
 * SAMD family
 * ----------------------------------------------------------------------------
 */

/* SAMD10 series */
# 89 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAMD10 series */


/* SAMD11 series */







/* Entire SAMD11 series */


/* SAMD21 series */
# 185 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAMD21 series */


/* Entire SAMD51 series */


/* Entire SAMD family */


/*
 * ----------------------------------------------------------------------------
 * SAML family
 * ----------------------------------------------------------------------------
 */

/* SAML21 series */
# 231 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAML21A series */


/* Entire SAML21B series */


/* Entire SAMD family */


/*
 * ----------------------------------------------------------------------------
 * SAMC family
 * ----------------------------------------------------------------------------
 */

/* SAMC21 series */
# 275 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAMC21 series */


/* Entire SAMC family */



/*
 * ----------------------------------------------------------------------------
 * SAMS family
 * ----------------------------------------------------------------------------
 */

/* SAMS70 series */
# 310 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAMS70 series */


/* Entire SAMS family */


/*
 * ----------------------------------------------------------------------------
 * SAME family
 * ----------------------------------------------------------------------------
 */

/* SAME51 series */
# 344 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAME51 series */


/* SAME70 series */
# 369 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAME70 series */


/* Entire SAME family */


/*
 * ----------------------------------------------------------------------------
 * SAM3 family
 * ----------------------------------------------------------------------------
 */

/* SAM3U series */
# 394 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAM3U series */


/* SAM3XA series */
# 413 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAM3XA series */


/* Entire SAM3 family */


/*
 * ----------------------------------------------------------------------------
 * SAMR family
 * ----------------------------------------------------------------------------
 */

/* SAMR21 series */
# 444 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAMR21 series */


/* Entire SAMR family */


/*
 * ----------------------------------------------------------------------------
 * SAM4 family
 * ----------------------------------------------------------------------------
 */

/* SAM4N series */
# 466 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAM4N series */


/* SAM4S series */
# 500 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAM4S series */


/* SAM4E series */
# 512 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAM4E series */


/* SAM4C series */
# 536 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
/* Entire SAM4C series */


/* Entire SAM4 family */


/*
 * ----------------------------------------------------------------------------
 * Whole SAM product line
 * ----------------------------------------------------------------------------
 */



/*
 * ----------------------------------------------------------------------------
 * Header inclusion
 * ----------------------------------------------------------------------------
 */
# 565 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h"
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd.h" 1
/* ----------------------------------------------------------------------------
 *         SAM Software Package License
 * ----------------------------------------------------------------------------
 * Copyright (c) 2015, Atmel Corporation
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following condition is met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the disclaimer below.
 *
 * Atmel's name may not be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
 * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * ----------------------------------------------------------------------------
 */
# 153 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd.h"
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51.h" 1
/**
 * \file
 *
 * \brief Top header file for SAMD51
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/**
 * \defgroup SAMD51_definitions SAMD51 Device Definitions
 * \brief SAMD51 CMSIS Definitions.
 */
# 54 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51.h"
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 1
/**
 * \file
 *
 * \brief Header file for SAMD51P20A
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/**
 * \ingroup SAMD51_definitions
 * \addtogroup SAMD51P20A_definitions SAMD51P20A definitions
 * This file defines all structures and symbols for SAMD51P20A:
 *   - registers and bitfields
 *   - peripheral base address
 *   - peripheral ID
 *   - PIO definitions
*/
/*@{*/


 extern "C" {
# 54 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h"
typedef volatile uint32_t RoReg; /**< Read only 32-bit register (volatile const unsigned int) */
typedef volatile uint16_t RoReg16; /**< Read only 16-bit register (volatile const unsigned int) */
typedef volatile uint8_t RoReg8; /**< Read only  8-bit register (volatile const unsigned int) */

typedef volatile uint32_t WoReg; /**< Write only 32-bit register (volatile unsigned int) */
typedef volatile uint16_t WoReg16; /**< Write only 16-bit register (volatile unsigned int) */
typedef volatile uint32_t WoReg8; /**< Write only  8-bit register (volatile unsigned int) */
typedef volatile uint32_t RwReg; /**< Read-Write 32-bit register (volatile unsigned int) */
typedef volatile uint16_t RwReg16; /**< Read-Write 16-bit register (volatile unsigned int) */
typedef volatile uint8_t RwReg8; /**< Read-Write  8-bit register (volatile unsigned int) */
# 77 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h"
/* ************************************************************************** */
/**  CMSIS DEFINITIONS FOR SAMD51P20A */
/* ************************************************************************** */
/** \defgroup SAMD51P20A_cmsis CMSIS Definitions */
/*@{*/

/** Interrupt Number Definition */
typedef enum IRQn
{
  /******  Cortex-M4 Processor Exceptions Numbers ******************************/
  NonMaskableInt_IRQn = -14,/**<  2 Non Maskable Interrupt                */
  HardFault_IRQn = -13,/**<  3 Cortex-M4 Hard Fault Interrupt        */
  MemoryManagement_IRQn = -12,/**<  4 Cortex-M4 Memory Management Interrupt */
  BusFault_IRQn = -11,/**<  5 Cortex-M4 Bus Fault Interrupt         */
  UsageFault_IRQn = -10,/**<  6 Cortex-M4 Usage Fault Interrupt       */
  SVCall_IRQn = -5, /**< 11 Cortex-M4 SV Call Interrupt           */
  DebugMonitor_IRQn = -4, /**< 12 Cortex-M4 Debug Monitor Interrupt     */
  PendSV_IRQn = -2, /**< 14 Cortex-M4 Pend SV Interrupt           */
  SysTick_IRQn = -1, /**< 15 Cortex-M4 System Tick Interrupt       */
  /******  SAMD51P20A-specific Interrupt Numbers ***********************/
  PM_IRQn = 0, /**<  0 SAMD51P20A Power Manager (PM) */
  MCLK_IRQn = 1, /**<  1 SAMD51P20A Main Clock (MCLK) */
  OSCCTRL_0_IRQn = 2, /**<  2 SAMD51P20A Oscillators Control (OSCCTRL): OSCCTRL_XOSCFAIL_0, OSCCTRL_XOSCRDY_0 */
  OSCCTRL_1_IRQn = 3, /**<  3 SAMD51P20A Oscillators Control (OSCCTRL): OSCCTRL_XOSCFAIL_1, OSCCTRL_XOSCRDY_1 */
  OSCCTRL_2_IRQn = 4, /**<  4 SAMD51P20A Oscillators Control (OSCCTRL): OSCCTRL_DFLLLOCKC, OSCCTRL_DFLLLOCKF, OSCCTRL_DFLLOOB, OSCCTRL_DFLLRCS, OSCCTRL_DFLLRDY */
  OSCCTRL_3_IRQn = 5, /**<  5 SAMD51P20A Oscillators Control (OSCCTRL): OSCCTRL_DPLLLCKF_0, OSCCTRL_DPLLLCKR_0, OSCCTRL_DPLLLDRTO_0, OSCCTRL_DPLLLTO_0 */
  OSCCTRL_4_IRQn = 6, /**<  6 SAMD51P20A Oscillators Control (OSCCTRL): OSCCTRL_DPLLLCKF_1, OSCCTRL_DPLLLCKR_1, OSCCTRL_DPLLLDRTO_1, OSCCTRL_DPLLLTO_1 */
  OSC32KCTRL_IRQn = 7, /**<  7 SAMD51P20A 32kHz Oscillators Control (OSC32KCTRL) */
  SUPC_0_IRQn = 8, /**<  8 SAMD51P20A Supply Controller (SUPC): SUPC_B12SRDY, SUPC_B33SRDY, SUPC_BOD12RDY, SUPC_BOD33RDY, SUPC_VCORERDY, SUPC_VREGRDY */
  SUPC_1_IRQn = 9, /**<  9 SAMD51P20A Supply Controller (SUPC): SUPC_BOD12DET, SUPC_BOD33DET */
  WDT_IRQn = 10, /**< 10 SAMD51P20A Watchdog Timer (WDT) */
  RTC_IRQn = 11, /**< 11 SAMD51P20A Real-Time Counter (RTC) */
  EIC_0_IRQn = 12, /**< 12 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_0 */
  EIC_1_IRQn = 13, /**< 13 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_1 */
  EIC_2_IRQn = 14, /**< 14 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_2 */
  EIC_3_IRQn = 15, /**< 15 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_3 */
  EIC_4_IRQn = 16, /**< 16 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_4 */
  EIC_5_IRQn = 17, /**< 17 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_5 */
  EIC_6_IRQn = 18, /**< 18 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_6 */
  EIC_7_IRQn = 19, /**< 19 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_7 */
  EIC_8_IRQn = 20, /**< 20 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_8 */
  EIC_9_IRQn = 21, /**< 21 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_9 */
  EIC_10_IRQn = 22, /**< 22 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_10 */
  EIC_11_IRQn = 23, /**< 23 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_11 */
  EIC_12_IRQn = 24, /**< 24 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_12 */
  EIC_13_IRQn = 25, /**< 25 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_13 */
  EIC_14_IRQn = 26, /**< 26 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_14 */
  EIC_15_IRQn = 27, /**< 27 SAMD51P20A External Interrupt Controller (EIC): EIC_EXTINT_15 */
  FREQM_IRQn = 28, /**< 28 SAMD51P20A Frequency Meter (FREQM) */
  NVMCTRL_0_IRQn = 29, /**< 29 SAMD51P20A Non-Volatile Memory Controller (NVMCTRL): NVMCTRL_0, NVMCTRL_1, NVMCTRL_2, NVMCTRL_3, NVMCTRL_4, NVMCTRL_5, NVMCTRL_6, NVMCTRL_7 */
  NVMCTRL_1_IRQn = 30, /**< 30 SAMD51P20A Non-Volatile Memory Controller (NVMCTRL): NVMCTRL_10, NVMCTRL_8, NVMCTRL_9 */
  DMAC_0_IRQn = 31, /**< 31 SAMD51P20A Direct Memory Access Controller (DMAC): DMAC_SUSP_0, DMAC_TCMPL_0, DMAC_TERR_0 */
  DMAC_1_IRQn = 32, /**< 32 SAMD51P20A Direct Memory Access Controller (DMAC): DMAC_SUSP_1, DMAC_TCMPL_1, DMAC_TERR_1 */
  DMAC_2_IRQn = 33, /**< 33 SAMD51P20A Direct Memory Access Controller (DMAC): DMAC_SUSP_2, DMAC_TCMPL_2, DMAC_TERR_2 */
  DMAC_3_IRQn = 34, /**< 34 SAMD51P20A Direct Memory Access Controller (DMAC): DMAC_SUSP_3, DMAC_TCMPL_3, DMAC_TERR_3 */
  DMAC_4_IRQn = 35, /**< 35 SAMD51P20A Direct Memory Access Controller (DMAC): DMAC_SUSP_10, DMAC_SUSP_11, DMAC_SUSP_12, DMAC_SUSP_13, DMAC_SUSP_14, DMAC_SUSP_15, DMAC_SUSP_16, DMAC_SUSP_17, DMAC_SUSP_18, DMAC_SUSP_19, DMAC_SUSP_20, DMAC_SUSP_21, DMAC_SUSP_22, DMAC_SUSP_23, DMAC_SUSP_24, DMAC_SUSP_25, DMAC_SUSP_26, DMAC_SUSP_27, DMAC_SUSP_28, DMAC_SUSP_29, DMAC_SUSP_30, DMAC_SUSP_31, DMAC_SUSP_4, DMAC_SUSP_5, DMAC_SUSP_6, DMAC_SUSP_7, DMAC_SUSP_8, DMAC_SUSP_9, DMAC_TCMPL_10, DMAC_TCMPL_11, DMAC_TCMPL_12, DMAC_TCMPL_13, DMAC_TCMPL_14, DMAC_TCMPL_15, DMAC_TCMPL_16, DMAC_TCMPL_17, DMAC_TCMPL_18, DMAC_TCMPL_19, DMAC_TCMPL_20, DMAC_TCMPL_21, DMAC_TCMPL_22, DMAC_TCMPL_23, DMAC_TCMPL_24, DMAC_TCMPL_25, DMAC_TCMPL_26, DMAC_TCMPL_27, DMAC_TCMPL_28, DMAC_TCMPL_29, DMAC_TCMPL_30, DMAC_TCMPL_31, DMAC_TCMPL_4, DMAC_TCMPL_5, DMAC_TCMPL_6, DMAC_TCMPL_7, DMAC_TCMPL_8, DMAC_TCMPL_9, DMAC_TERR_10, DMAC_TERR_11, DMAC_TERR_12, DMAC_TERR_13, DMAC_TERR_14, DMAC_TERR_15, DMAC_TERR_16, DMAC_TERR_17, DMAC_TERR_18, DMAC_TERR_19, DMAC_TERR_20, DMAC_TERR_21, DMAC_TERR_22, DMAC_TERR_23, DMAC_TERR_24, DMAC_TERR_25, DMAC_TERR_26, DMAC_TERR_27, DMAC_TERR_28, DMAC_TERR_29, DMAC_TERR_30, DMAC_TERR_31, DMAC_TERR_4, DMAC_TERR_5, DMAC_TERR_6, DMAC_TERR_7, DMAC_TERR_8, DMAC_TERR_9 */
  EVSYS_0_IRQn = 36, /**< 36 SAMD51P20A Event System Interface (EVSYS): EVSYS_EVD_0, EVSYS_OVR_0 */
  EVSYS_1_IRQn = 37, /**< 37 SAMD51P20A Event System Interface (EVSYS): EVSYS_EVD_1, EVSYS_OVR_1 */
  EVSYS_2_IRQn = 38, /**< 38 SAMD51P20A Event System Interface (EVSYS): EVSYS_EVD_2, EVSYS_OVR_2 */
  EVSYS_3_IRQn = 39, /**< 39 SAMD51P20A Event System Interface (EVSYS): EVSYS_EVD_3, EVSYS_OVR_3 */
  EVSYS_4_IRQn = 40, /**< 40 SAMD51P20A Event System Interface (EVSYS): EVSYS_EVD_10, EVSYS_EVD_11, EVSYS_EVD_4, EVSYS_EVD_5, EVSYS_EVD_6, EVSYS_EVD_7, EVSYS_EVD_8, EVSYS_EVD_9, EVSYS_OVR_10, EVSYS_OVR_11, EVSYS_OVR_4, EVSYS_OVR_5, EVSYS_OVR_6, EVSYS_OVR_7, EVSYS_OVR_8, EVSYS_OVR_9 */
  PAC_IRQn = 41, /**< 41 SAMD51P20A Peripheral Access Controller (PAC) */
  TAL_0_IRQn = 42, /**< 42 SAMD51P20A Trigger Allocator (TAL): TAL_BRK */
  TAL_1_IRQn = 43, /**< 43 SAMD51P20A Trigger Allocator (TAL): TAL_IPS_0, TAL_IPS_1 */
  RAMECC_IRQn = 45, /**< 45 SAMD51P20A RAM ECC (RAMECC) */
  SERCOM0_0_IRQn = 46, /**< 46 SAMD51P20A Serial Communication Interface 0 (SERCOM0): SERCOM0_0 */
  SERCOM0_1_IRQn = 47, /**< 47 SAMD51P20A Serial Communication Interface 0 (SERCOM0): SERCOM0_1 */
  SERCOM0_2_IRQn = 48, /**< 48 SAMD51P20A Serial Communication Interface 0 (SERCOM0): SERCOM0_2 */
  SERCOM0_3_IRQn = 49, /**< 49 SAMD51P20A Serial Communication Interface 0 (SERCOM0): SERCOM0_3, SERCOM0_4, SERCOM0_5, SERCOM0_6 */
  SERCOM1_0_IRQn = 50, /**< 50 SAMD51P20A Serial Communication Interface 1 (SERCOM1): SERCOM1_0 */
  SERCOM1_1_IRQn = 51, /**< 51 SAMD51P20A Serial Communication Interface 1 (SERCOM1): SERCOM1_1 */
  SERCOM1_2_IRQn = 52, /**< 52 SAMD51P20A Serial Communication Interface 1 (SERCOM1): SERCOM1_2 */
  SERCOM1_3_IRQn = 53, /**< 53 SAMD51P20A Serial Communication Interface 1 (SERCOM1): SERCOM1_3, SERCOM1_4, SERCOM1_5, SERCOM1_6 */
  SERCOM2_0_IRQn = 54, /**< 54 SAMD51P20A Serial Communication Interface 2 (SERCOM2): SERCOM2_0 */
  SERCOM2_1_IRQn = 55, /**< 55 SAMD51P20A Serial Communication Interface 2 (SERCOM2): SERCOM2_1 */
  SERCOM2_2_IRQn = 56, /**< 56 SAMD51P20A Serial Communication Interface 2 (SERCOM2): SERCOM2_2 */
  SERCOM2_3_IRQn = 57, /**< 57 SAMD51P20A Serial Communication Interface 2 (SERCOM2): SERCOM2_3, SERCOM2_4, SERCOM2_5, SERCOM2_6 */
  SERCOM3_0_IRQn = 58, /**< 58 SAMD51P20A Serial Communication Interface 3 (SERCOM3): SERCOM3_0 */
  SERCOM3_1_IRQn = 59, /**< 59 SAMD51P20A Serial Communication Interface 3 (SERCOM3): SERCOM3_1 */
  SERCOM3_2_IRQn = 60, /**< 60 SAMD51P20A Serial Communication Interface 3 (SERCOM3): SERCOM3_2 */
  SERCOM3_3_IRQn = 61, /**< 61 SAMD51P20A Serial Communication Interface 3 (SERCOM3): SERCOM3_3, SERCOM3_4, SERCOM3_5, SERCOM3_6 */
  SERCOM4_0_IRQn = 62, /**< 62 SAMD51P20A Serial Communication Interface 4 (SERCOM4): SERCOM4_0 */
  SERCOM4_1_IRQn = 63, /**< 63 SAMD51P20A Serial Communication Interface 4 (SERCOM4): SERCOM4_1 */
  SERCOM4_2_IRQn = 64, /**< 64 SAMD51P20A Serial Communication Interface 4 (SERCOM4): SERCOM4_2 */
  SERCOM4_3_IRQn = 65, /**< 65 SAMD51P20A Serial Communication Interface 4 (SERCOM4): SERCOM4_3, SERCOM4_4, SERCOM4_5, SERCOM4_6 */
  SERCOM5_0_IRQn = 66, /**< 66 SAMD51P20A Serial Communication Interface 5 (SERCOM5): SERCOM5_0 */
  SERCOM5_1_IRQn = 67, /**< 67 SAMD51P20A Serial Communication Interface 5 (SERCOM5): SERCOM5_1 */
  SERCOM5_2_IRQn = 68, /**< 68 SAMD51P20A Serial Communication Interface 5 (SERCOM5): SERCOM5_2 */
  SERCOM5_3_IRQn = 69, /**< 69 SAMD51P20A Serial Communication Interface 5 (SERCOM5): SERCOM5_3, SERCOM5_4, SERCOM5_5, SERCOM5_6 */
  SERCOM6_0_IRQn = 70, /**< 70 SAMD51P20A Serial Communication Interface 6 (SERCOM6): SERCOM6_0 */
  SERCOM6_1_IRQn = 71, /**< 71 SAMD51P20A Serial Communication Interface 6 (SERCOM6): SERCOM6_1 */
  SERCOM6_2_IRQn = 72, /**< 72 SAMD51P20A Serial Communication Interface 6 (SERCOM6): SERCOM6_2 */
  SERCOM6_3_IRQn = 73, /**< 73 SAMD51P20A Serial Communication Interface 6 (SERCOM6): SERCOM6_3, SERCOM6_4, SERCOM6_5, SERCOM6_6 */
  SERCOM7_0_IRQn = 74, /**< 74 SAMD51P20A Serial Communication Interface 7 (SERCOM7): SERCOM7_0 */
  SERCOM7_1_IRQn = 75, /**< 75 SAMD51P20A Serial Communication Interface 7 (SERCOM7): SERCOM7_1 */
  SERCOM7_2_IRQn = 76, /**< 76 SAMD51P20A Serial Communication Interface 7 (SERCOM7): SERCOM7_2 */
  SERCOM7_3_IRQn = 77, /**< 77 SAMD51P20A Serial Communication Interface 7 (SERCOM7): SERCOM7_3, SERCOM7_4, SERCOM7_5, SERCOM7_6 */
  USB_0_IRQn = 80, /**< 80 SAMD51P20A Universal Serial Bus (USB): USB_EORSM_DNRSM, USB_EORST_RST, USB_LPMSUSP_DDISC, USB_LPM_DCONN, USB_MSOF, USB_RAMACER, USB_RXSTP_TXSTP_0, USB_RXSTP_TXSTP_1, USB_RXSTP_TXSTP_2, USB_RXSTP_TXSTP_3, USB_RXSTP_TXSTP_4, USB_RXSTP_TXSTP_5, USB_RXSTP_TXSTP_6, USB_RXSTP_TXSTP_7, USB_STALL0_STALL_0, USB_STALL0_STALL_1, USB_STALL0_STALL_2, USB_STALL0_STALL_3, USB_STALL0_STALL_4, USB_STALL0_STALL_5, USB_STALL0_STALL_6, USB_STALL0_STALL_7, USB_STALL1_0, USB_STALL1_1, USB_STALL1_2, USB_STALL1_3, USB_STALL1_4, USB_STALL1_5, USB_STALL1_6, USB_STALL1_7, USB_SUSPEND, USB_TRFAIL0_TRFAIL_0, USB_TRFAIL0_TRFAIL_1, USB_TRFAIL0_TRFAIL_2, USB_TRFAIL0_TRFAIL_3, USB_TRFAIL0_TRFAIL_4, USB_TRFAIL0_TRFAIL_5, USB_TRFAIL0_TRFAIL_6, USB_TRFAIL0_TRFAIL_7, USB_TRFAIL1_PERR_0, USB_TRFAIL1_PERR_1, USB_TRFAIL1_PERR_2, USB_TRFAIL1_PERR_3, USB_TRFAIL1_PERR_4, USB_TRFAIL1_PERR_5, USB_TRFAIL1_PERR_6, USB_TRFAIL1_PERR_7, USB_UPRSM, USB_WAKEUP */
  USB_1_IRQn = 81, /**< 81 SAMD51P20A Universal Serial Bus (USB): USB_SOF_HSOF */
  USB_2_IRQn = 82, /**< 82 SAMD51P20A Universal Serial Bus (USB): USB_TRCPT0_0, USB_TRCPT0_1, USB_TRCPT0_2, USB_TRCPT0_3, USB_TRCPT0_4, USB_TRCPT0_5, USB_TRCPT0_6, USB_TRCPT0_7 */
  USB_3_IRQn = 83, /**< 83 SAMD51P20A Universal Serial Bus (USB): USB_TRCPT1_0, USB_TRCPT1_1, USB_TRCPT1_2, USB_TRCPT1_3, USB_TRCPT1_4, USB_TRCPT1_5, USB_TRCPT1_6, USB_TRCPT1_7 */
  TCC0_0_IRQn = 85, /**< 85 SAMD51P20A Timer Counter Control 0 (TCC0): TCC0_CNT_A, TCC0_DFS_A, TCC0_ERR_A, TCC0_FAULT0_A, TCC0_FAULT1_A, TCC0_FAULTA_A, TCC0_FAULTB_A, TCC0_OVF, TCC0_TRG, TCC0_UFS_A */
  TCC0_1_IRQn = 86, /**< 86 SAMD51P20A Timer Counter Control 0 (TCC0): TCC0_MC_0 */
  TCC0_2_IRQn = 87, /**< 87 SAMD51P20A Timer Counter Control 0 (TCC0): TCC0_MC_1 */
  TCC0_3_IRQn = 88, /**< 88 SAMD51P20A Timer Counter Control 0 (TCC0): TCC0_MC_2 */
  TCC0_4_IRQn = 89, /**< 89 SAMD51P20A Timer Counter Control 0 (TCC0): TCC0_MC_3 */
  TCC0_5_IRQn = 90, /**< 90 SAMD51P20A Timer Counter Control 0 (TCC0): TCC0_MC_4 */
  TCC0_6_IRQn = 91, /**< 91 SAMD51P20A Timer Counter Control 0 (TCC0): TCC0_MC_5 */
  TCC1_0_IRQn = 92, /**< 92 SAMD51P20A Timer Counter Control 1 (TCC1): TCC1_CNT_A, TCC1_DFS_A, TCC1_ERR_A, TCC1_FAULT0_A, TCC1_FAULT1_A, TCC1_FAULTA_A, TCC1_FAULTB_A, TCC1_OVF, TCC1_TRG, TCC1_UFS_A */
  TCC1_1_IRQn = 93, /**< 93 SAMD51P20A Timer Counter Control 1 (TCC1): TCC1_MC_0 */
  TCC1_2_IRQn = 94, /**< 94 SAMD51P20A Timer Counter Control 1 (TCC1): TCC1_MC_1 */
  TCC1_3_IRQn = 95, /**< 95 SAMD51P20A Timer Counter Control 1 (TCC1): TCC1_MC_2 */
  TCC1_4_IRQn = 96, /**< 96 SAMD51P20A Timer Counter Control 1 (TCC1): TCC1_MC_3 */
  TCC2_0_IRQn = 97, /**< 97 SAMD51P20A Timer Counter Control 2 (TCC2): TCC2_CNT_A, TCC2_DFS_A, TCC2_ERR_A, TCC2_FAULT0_A, TCC2_FAULT1_A, TCC2_FAULTA_A, TCC2_FAULTB_A, TCC2_OVF, TCC2_TRG, TCC2_UFS_A */
  TCC2_1_IRQn = 98, /**< 98 SAMD51P20A Timer Counter Control 2 (TCC2): TCC2_MC_0 */
  TCC2_2_IRQn = 99, /**< 99 SAMD51P20A Timer Counter Control 2 (TCC2): TCC2_MC_1 */
  TCC2_3_IRQn = 100, /**< 100 SAMD51P20A Timer Counter Control 2 (TCC2): TCC2_MC_2 */
  TCC3_0_IRQn = 101, /**< 101 SAMD51P20A Timer Counter Control 3 (TCC3): TCC3_CNT_A, TCC3_DFS_A, TCC3_ERR_A, TCC3_FAULT0_A, TCC3_FAULT1_A, TCC3_FAULTA_A, TCC3_FAULTB_A, TCC3_OVF, TCC3_TRG, TCC3_UFS_A */
  TCC3_1_IRQn = 102, /**< 102 SAMD51P20A Timer Counter Control 3 (TCC3): TCC3_MC_0 */
  TCC3_2_IRQn = 103, /**< 103 SAMD51P20A Timer Counter Control 3 (TCC3): TCC3_MC_1 */
  TCC4_0_IRQn = 104, /**< 104 SAMD51P20A Timer Counter Control 4 (TCC4): TCC4_CNT_A, TCC4_DFS_A, TCC4_ERR_A, TCC4_FAULT0_A, TCC4_FAULT1_A, TCC4_FAULTA_A, TCC4_FAULTB_A, TCC4_OVF, TCC4_TRG, TCC4_UFS_A */
  TCC4_1_IRQn = 105, /**< 105 SAMD51P20A Timer Counter Control 4 (TCC4): TCC4_MC_0 */
  TCC4_2_IRQn = 106, /**< 106 SAMD51P20A Timer Counter Control 4 (TCC4): TCC4_MC_1 */
  TC0_IRQn = 107, /**< 107 SAMD51P20A Basic Timer Counter 0 (TC0) */
  TC1_IRQn = 108, /**< 108 SAMD51P20A Basic Timer Counter 1 (TC1) */
  TC2_IRQn = 109, /**< 109 SAMD51P20A Basic Timer Counter 2 (TC2) */
  TC3_IRQn = 110, /**< 110 SAMD51P20A Basic Timer Counter 3 (TC3) */
  TC4_IRQn = 111, /**< 111 SAMD51P20A Basic Timer Counter 4 (TC4) */
  TC5_IRQn = 112, /**< 112 SAMD51P20A Basic Timer Counter 5 (TC5) */
  TC6_IRQn = 113, /**< 113 SAMD51P20A Basic Timer Counter 6 (TC6) */
  TC7_IRQn = 114, /**< 114 SAMD51P20A Basic Timer Counter 7 (TC7) */
  PDEC_0_IRQn = 115, /**< 115 SAMD51P20A Quadrature Decodeur (PDEC): PDEC_DIR_A, PDEC_ERR_A, PDEC_OVF, PDEC_VLC_A */
  PDEC_1_IRQn = 116, /**< 116 SAMD51P20A Quadrature Decodeur (PDEC): PDEC_MC_0 */
  PDEC_2_IRQn = 117, /**< 117 SAMD51P20A Quadrature Decodeur (PDEC): PDEC_MC_1 */
  ADC0_0_IRQn = 118, /**< 118 SAMD51P20A Analog Digital Converter 0 (ADC0): ADC0_OVERRUN, ADC0_WINMON */
  ADC0_1_IRQn = 119, /**< 119 SAMD51P20A Analog Digital Converter 0 (ADC0): ADC0_RESRDY */
  ADC1_0_IRQn = 120, /**< 120 SAMD51P20A Analog Digital Converter 1 (ADC1): ADC1_OVERRUN, ADC1_WINMON */
  ADC1_1_IRQn = 121, /**< 121 SAMD51P20A Analog Digital Converter 1 (ADC1): ADC1_RESRDY */
  AC_IRQn = 122, /**< 122 SAMD51P20A Analog Comparators (AC) */
  DAC_0_IRQn = 123, /**< 123 SAMD51P20A Digital-to-Analog Converter (DAC): DAC_OVERRUN_A_0, DAC_OVERRUN_A_1, DAC_UNDERRUN_A_0, DAC_UNDERRUN_A_1 */
  DAC_1_IRQn = 124, /**< 124 SAMD51P20A Digital-to-Analog Converter (DAC): DAC_EMPTY_0 */
  DAC_2_IRQn = 125, /**< 125 SAMD51P20A Digital-to-Analog Converter (DAC): DAC_EMPTY_1 */
  DAC_3_IRQn = 126, /**< 126 SAMD51P20A Digital-to-Analog Converter (DAC): DAC_RESRDY_0 */
  DAC_4_IRQn = 127, /**< 127 SAMD51P20A Digital-to-Analog Converter (DAC): DAC_RESRDY_1 */
  I2S_IRQn = 128, /**< 128 SAMD51P20A Inter-IC Sound Interface (I2S) */
  PCC_IRQn = 129, /**< 129 SAMD51P20A Parallel Capture Controller (PCC) */
  AES_IRQn = 130, /**< 130 SAMD51P20A Advanced Encryption Standard (AES) */
  TRNG_IRQn = 131, /**< 131 SAMD51P20A True Random Generator (TRNG) */
  ICM_IRQn = 132, /**< 132 SAMD51P20A Integrity Check Monitor (ICM) */
  PUKCC_IRQn = 133, /**< 133 SAMD51P20A PUblic-Key Cryptography Controller (PUKCC) */
  QSPI_IRQn = 134, /**< 134 SAMD51P20A Quad SPI interface (QSPI) */
  SDHC0_IRQn = 135, /**< 135 SAMD51P20A SD/MMC Host Controller 0 (SDHC0) */
  SDHC1_IRQn = 136, /**< 136 SAMD51P20A SD/MMC Host Controller 1 (SDHC1) */

  PERIPH_COUNT_IRQn = 137 /**< Number of peripheral IDs */
} IRQn_Type;

typedef struct _DeviceVectors
{
  /* Stack pointer */
  void* pvStack;

  /* Cortex-M handlers */
  void* pfnReset_Handler;
  void* pfnNMI_Handler;
  void* pfnHardFault_Handler;
  void* pfnMemManage_Handler;
  void* pfnBusFault_Handler;
  void* pfnUsageFault_Handler;
  void* pvReservedM9;
  void* pvReservedM8;
  void* pvReservedM7;
  void* pvReservedM6;
  void* pfnSVC_Handler;
  void* pfnDebugMon_Handler;
  void* pvReservedM3;
  void* pfnPendSV_Handler;
  void* pfnSysTick_Handler;

  /* Peripheral handlers */
  void* pfnPM_Handler; /*  0 Power Manager */
  void* pfnMCLK_Handler; /*  1 Main Clock */
  void* pfnOSCCTRL_0_Handler; /*  2 Oscillators Control IRQ 0 */
  void* pfnOSCCTRL_1_Handler; /*  3 Oscillators Control IRQ 1 */
  void* pfnOSCCTRL_2_Handler; /*  4 Oscillators Control IRQ 2 */
  void* pfnOSCCTRL_3_Handler; /*  5 Oscillators Control IRQ 3 */
  void* pfnOSCCTRL_4_Handler; /*  6 Oscillators Control IRQ 4 */
  void* pfnOSC32KCTRL_Handler; /*  7 32kHz Oscillators Control */
  void* pfnSUPC_0_Handler; /*  8 Supply Controller IRQ 0 */
  void* pfnSUPC_1_Handler; /*  9 Supply Controller IRQ 1 */
  void* pfnWDT_Handler; /* 10 Watchdog Timer */
  void* pfnRTC_Handler; /* 11 Real-Time Counter */
  void* pfnEIC_0_Handler; /* 12 External Interrupt Controller IRQ 0 */
  void* pfnEIC_1_Handler; /* 13 External Interrupt Controller IRQ 1 */
  void* pfnEIC_2_Handler; /* 14 External Interrupt Controller IRQ 2 */
  void* pfnEIC_3_Handler; /* 15 External Interrupt Controller IRQ 3 */
  void* pfnEIC_4_Handler; /* 16 External Interrupt Controller IRQ 4 */
  void* pfnEIC_5_Handler; /* 17 External Interrupt Controller IRQ 5 */
  void* pfnEIC_6_Handler; /* 18 External Interrupt Controller IRQ 6 */
  void* pfnEIC_7_Handler; /* 19 External Interrupt Controller IRQ 7 */
  void* pfnEIC_8_Handler; /* 20 External Interrupt Controller IRQ 8 */
  void* pfnEIC_9_Handler; /* 21 External Interrupt Controller IRQ 9 */
  void* pfnEIC_10_Handler; /* 22 External Interrupt Controller IRQ 10 */
  void* pfnEIC_11_Handler; /* 23 External Interrupt Controller IRQ 11 */
  void* pfnEIC_12_Handler; /* 24 External Interrupt Controller IRQ 12 */
  void* pfnEIC_13_Handler; /* 25 External Interrupt Controller IRQ 13 */
  void* pfnEIC_14_Handler; /* 26 External Interrupt Controller IRQ 14 */
  void* pfnEIC_15_Handler; /* 27 External Interrupt Controller IRQ 15 */
  void* pfnFREQM_Handler; /* 28 Frequency Meter */
  void* pfnNVMCTRL_0_Handler; /* 29 Non-Volatile Memory Controller IRQ 0 */
  void* pfnNVMCTRL_1_Handler; /* 30 Non-Volatile Memory Controller IRQ 1 */
  void* pfnDMAC_0_Handler; /* 31 Direct Memory Access Controller IRQ 0 */
  void* pfnDMAC_1_Handler; /* 32 Direct Memory Access Controller IRQ 1 */
  void* pfnDMAC_2_Handler; /* 33 Direct Memory Access Controller IRQ 2 */
  void* pfnDMAC_3_Handler; /* 34 Direct Memory Access Controller IRQ 3 */
  void* pfnDMAC_4_Handler; /* 35 Direct Memory Access Controller IRQ 4 */
  void* pfnEVSYS_0_Handler; /* 36 Event System Interface IRQ 0 */
  void* pfnEVSYS_1_Handler; /* 37 Event System Interface IRQ 1 */
  void* pfnEVSYS_2_Handler; /* 38 Event System Interface IRQ 2 */
  void* pfnEVSYS_3_Handler; /* 39 Event System Interface IRQ 3 */
  void* pfnEVSYS_4_Handler; /* 40 Event System Interface IRQ 4 */
  void* pfnPAC_Handler; /* 41 Peripheral Access Controller */
  void* pfnTAL_0_Handler; /* 42 Trigger Allocator IRQ 0 */
  void* pfnTAL_1_Handler; /* 43 Trigger Allocator IRQ 1 */
  void* pvReserved44;
  void* pfnRAMECC_Handler; /* 45 RAM ECC */
  void* pfnSERCOM0_0_Handler; /* 46 Serial Communication Interface 0 IRQ 0 */
  void* pfnSERCOM0_1_Handler; /* 47 Serial Communication Interface 0 IRQ 1 */
  void* pfnSERCOM0_2_Handler; /* 48 Serial Communication Interface 0 IRQ 2 */
  void* pfnSERCOM0_3_Handler; /* 49 Serial Communication Interface 0 IRQ 3 */
  void* pfnSERCOM1_0_Handler; /* 50 Serial Communication Interface 1 IRQ 0 */
  void* pfnSERCOM1_1_Handler; /* 51 Serial Communication Interface 1 IRQ 1 */
  void* pfnSERCOM1_2_Handler; /* 52 Serial Communication Interface 1 IRQ 2 */
  void* pfnSERCOM1_3_Handler; /* 53 Serial Communication Interface 1 IRQ 3 */
  void* pfnSERCOM2_0_Handler; /* 54 Serial Communication Interface 2 IRQ 0 */
  void* pfnSERCOM2_1_Handler; /* 55 Serial Communication Interface 2 IRQ 1 */
  void* pfnSERCOM2_2_Handler; /* 56 Serial Communication Interface 2 IRQ 2 */
  void* pfnSERCOM2_3_Handler; /* 57 Serial Communication Interface 2 IRQ 3 */
  void* pfnSERCOM3_0_Handler; /* 58 Serial Communication Interface 3 IRQ 0 */
  void* pfnSERCOM3_1_Handler; /* 59 Serial Communication Interface 3 IRQ 1 */
  void* pfnSERCOM3_2_Handler; /* 60 Serial Communication Interface 3 IRQ 2 */
  void* pfnSERCOM3_3_Handler; /* 61 Serial Communication Interface 3 IRQ 3 */
  void* pfnSERCOM4_0_Handler; /* 62 Serial Communication Interface 4 IRQ 0 */
  void* pfnSERCOM4_1_Handler; /* 63 Serial Communication Interface 4 IRQ 1 */
  void* pfnSERCOM4_2_Handler; /* 64 Serial Communication Interface 4 IRQ 2 */
  void* pfnSERCOM4_3_Handler; /* 65 Serial Communication Interface 4 IRQ 3 */
  void* pfnSERCOM5_0_Handler; /* 66 Serial Communication Interface 5 IRQ 0 */
  void* pfnSERCOM5_1_Handler; /* 67 Serial Communication Interface 5 IRQ 1 */
  void* pfnSERCOM5_2_Handler; /* 68 Serial Communication Interface 5 IRQ 2 */
  void* pfnSERCOM5_3_Handler; /* 69 Serial Communication Interface 5 IRQ 3 */
  void* pfnSERCOM6_0_Handler; /* 70 Serial Communication Interface 6 IRQ 0 */
  void* pfnSERCOM6_1_Handler; /* 71 Serial Communication Interface 6 IRQ 1 */
  void* pfnSERCOM6_2_Handler; /* 72 Serial Communication Interface 6 IRQ 2 */
  void* pfnSERCOM6_3_Handler; /* 73 Serial Communication Interface 6 IRQ 3 */
  void* pfnSERCOM7_0_Handler; /* 74 Serial Communication Interface 7 IRQ 0 */
  void* pfnSERCOM7_1_Handler; /* 75 Serial Communication Interface 7 IRQ 1 */
  void* pfnSERCOM7_2_Handler; /* 76 Serial Communication Interface 7 IRQ 2 */
  void* pfnSERCOM7_3_Handler; /* 77 Serial Communication Interface 7 IRQ 3 */
  void* pvReserved78;
  void* pvReserved79;
  void* pfnUSB_0_Handler; /* 80 Universal Serial Bus IRQ 0 */
  void* pfnUSB_1_Handler; /* 81 Universal Serial Bus IRQ 1 */
  void* pfnUSB_2_Handler; /* 82 Universal Serial Bus IRQ 2 */
  void* pfnUSB_3_Handler; /* 83 Universal Serial Bus IRQ 3 */
  void* pvReserved84;
  void* pfnTCC0_0_Handler; /* 85 Timer Counter Control 0 IRQ 0 */
  void* pfnTCC0_1_Handler; /* 86 Timer Counter Control 0 IRQ 1 */
  void* pfnTCC0_2_Handler; /* 87 Timer Counter Control 0 IRQ 2 */
  void* pfnTCC0_3_Handler; /* 88 Timer Counter Control 0 IRQ 3 */
  void* pfnTCC0_4_Handler; /* 89 Timer Counter Control 0 IRQ 4 */
  void* pfnTCC0_5_Handler; /* 90 Timer Counter Control 0 IRQ 5 */
  void* pfnTCC0_6_Handler; /* 91 Timer Counter Control 0 IRQ 6 */
  void* pfnTCC1_0_Handler; /* 92 Timer Counter Control 1 IRQ 0 */
  void* pfnTCC1_1_Handler; /* 93 Timer Counter Control 1 IRQ 1 */
  void* pfnTCC1_2_Handler; /* 94 Timer Counter Control 1 IRQ 2 */
  void* pfnTCC1_3_Handler; /* 95 Timer Counter Control 1 IRQ 3 */
  void* pfnTCC1_4_Handler; /* 96 Timer Counter Control 1 IRQ 4 */
  void* pfnTCC2_0_Handler; /* 97 Timer Counter Control 2 IRQ 0 */
  void* pfnTCC2_1_Handler; /* 98 Timer Counter Control 2 IRQ 1 */
  void* pfnTCC2_2_Handler; /* 99 Timer Counter Control 2 IRQ 2 */
  void* pfnTCC2_3_Handler; /* 100 Timer Counter Control 2 IRQ 3 */
  void* pfnTCC3_0_Handler; /* 101 Timer Counter Control 3 IRQ 0 */
  void* pfnTCC3_1_Handler; /* 102 Timer Counter Control 3 IRQ 1 */
  void* pfnTCC3_2_Handler; /* 103 Timer Counter Control 3 IRQ 2 */
  void* pfnTCC4_0_Handler; /* 104 Timer Counter Control 4 IRQ 0 */
  void* pfnTCC4_1_Handler; /* 105 Timer Counter Control 4 IRQ 1 */
  void* pfnTCC4_2_Handler; /* 106 Timer Counter Control 4 IRQ 2 */
  void* pfnTC0_Handler; /* 107 Basic Timer Counter 0 */
  void* pfnTC1_Handler; /* 108 Basic Timer Counter 1 */
  void* pfnTC2_Handler; /* 109 Basic Timer Counter 2 */
  void* pfnTC3_Handler; /* 110 Basic Timer Counter 3 */
  void* pfnTC4_Handler; /* 111 Basic Timer Counter 4 */
  void* pfnTC5_Handler; /* 112 Basic Timer Counter 5 */
  void* pfnTC6_Handler; /* 113 Basic Timer Counter 6 */
  void* pfnTC7_Handler; /* 114 Basic Timer Counter 7 */
  void* pfnPDEC_0_Handler; /* 115 Quadrature Decodeur IRQ 0 */
  void* pfnPDEC_1_Handler; /* 116 Quadrature Decodeur IRQ 1 */
  void* pfnPDEC_2_Handler; /* 117 Quadrature Decodeur IRQ 2 */
  void* pfnADC0_0_Handler; /* 118 Analog Digital Converter 0 IRQ 0 */
  void* pfnADC0_1_Handler; /* 119 Analog Digital Converter 0 IRQ 1 */
  void* pfnADC1_0_Handler; /* 120 Analog Digital Converter 1 IRQ 0 */
  void* pfnADC1_1_Handler; /* 121 Analog Digital Converter 1 IRQ 1 */
  void* pfnAC_Handler; /* 122 Analog Comparators */
  void* pfnDAC_0_Handler; /* 123 Digital-to-Analog Converter IRQ 0 */
  void* pfnDAC_1_Handler; /* 124 Digital-to-Analog Converter IRQ 1 */
  void* pfnDAC_2_Handler; /* 125 Digital-to-Analog Converter IRQ 2 */
  void* pfnDAC_3_Handler; /* 126 Digital-to-Analog Converter IRQ 3 */
  void* pfnDAC_4_Handler; /* 127 Digital-to-Analog Converter IRQ 4 */
  void* pfnI2S_Handler; /* 128 Inter-IC Sound Interface */
  void* pfnPCC_Handler; /* 129 Parallel Capture Controller */
  void* pfnAES_Handler; /* 130 Advanced Encryption Standard */
  void* pfnTRNG_Handler; /* 131 True Random Generator */
  void* pfnICM_Handler; /* 132 Integrity Check Monitor */
  void* pfnPUKCC_Handler; /* 133 PUblic-Key Cryptography Controller */
  void* pfnQSPI_Handler; /* 134 Quad SPI interface */
  void* pfnSDHC0_Handler; /* 135 SD/MMC Host Controller 0 */
  void* pfnSDHC1_Handler; /* 136 SD/MMC Host Controller 1 */
} DeviceVectors;

/* Cortex-M4 processor handlers */
void Reset_Handler ( void );
void NMI_Handler ( void );
void HardFault_Handler ( void );
void MemManage_Handler ( void );
void BusFault_Handler ( void );
void UsageFault_Handler ( void );
void SVC_Handler ( void );
void DebugMon_Handler ( void );
void PendSV_Handler ( void );
void SysTick_Handler ( void );

/* Peripherals handlers */
void PM_Handler ( void );
void MCLK_Handler ( void );
void OSCCTRL_0_Handler ( void );
void OSCCTRL_1_Handler ( void );
void OSCCTRL_2_Handler ( void );
void OSCCTRL_3_Handler ( void );
void OSCCTRL_4_Handler ( void );
void OSC32KCTRL_Handler ( void );
void SUPC_0_Handler ( void );
void SUPC_1_Handler ( void );
void WDT_Handler ( void );
void RTC_Handler ( void );
void EIC_0_Handler ( void );
void EIC_1_Handler ( void );
void EIC_2_Handler ( void );
void EIC_3_Handler ( void );
void EIC_4_Handler ( void );
void EIC_5_Handler ( void );
void EIC_6_Handler ( void );
void EIC_7_Handler ( void );
void EIC_8_Handler ( void );
void EIC_9_Handler ( void );
void EIC_10_Handler ( void );
void EIC_11_Handler ( void );
void EIC_12_Handler ( void );
void EIC_13_Handler ( void );
void EIC_14_Handler ( void );
void EIC_15_Handler ( void );
void FREQM_Handler ( void );
void NVMCTRL_0_Handler ( void );
void NVMCTRL_1_Handler ( void );
void DMAC_0_Handler ( void );
void DMAC_1_Handler ( void );
void DMAC_2_Handler ( void );
void DMAC_3_Handler ( void );
void DMAC_4_Handler ( void );
void EVSYS_0_Handler ( void );
void EVSYS_1_Handler ( void );
void EVSYS_2_Handler ( void );
void EVSYS_3_Handler ( void );
void EVSYS_4_Handler ( void );
void PAC_Handler ( void );
void TAL_0_Handler ( void );
void TAL_1_Handler ( void );
void RAMECC_Handler ( void );
void SERCOM0_0_Handler ( void );
void SERCOM0_1_Handler ( void );
void SERCOM0_2_Handler ( void );
void SERCOM0_3_Handler ( void );
void SERCOM1_0_Handler ( void );
void SERCOM1_1_Handler ( void );
void SERCOM1_2_Handler ( void );
void SERCOM1_3_Handler ( void );
void SERCOM2_0_Handler ( void );
void SERCOM2_1_Handler ( void );
void SERCOM2_2_Handler ( void );
void SERCOM2_3_Handler ( void );
void SERCOM3_0_Handler ( void );
void SERCOM3_1_Handler ( void );
void SERCOM3_2_Handler ( void );
void SERCOM3_3_Handler ( void );
void SERCOM4_0_Handler ( void );
void SERCOM4_1_Handler ( void );
void SERCOM4_2_Handler ( void );
void SERCOM4_3_Handler ( void );
void SERCOM5_0_Handler ( void );
void SERCOM5_1_Handler ( void );
void SERCOM5_2_Handler ( void );
void SERCOM5_3_Handler ( void );
void SERCOM6_0_Handler ( void );
void SERCOM6_1_Handler ( void );
void SERCOM6_2_Handler ( void );
void SERCOM6_3_Handler ( void );
void SERCOM7_0_Handler ( void );
void SERCOM7_1_Handler ( void );
void SERCOM7_2_Handler ( void );
void SERCOM7_3_Handler ( void );
void USB_0_Handler ( void );
void USB_1_Handler ( void );
void USB_2_Handler ( void );
void USB_3_Handler ( void );
void TCC0_0_Handler ( void );
void TCC0_1_Handler ( void );
void TCC0_2_Handler ( void );
void TCC0_3_Handler ( void );
void TCC0_4_Handler ( void );
void TCC0_5_Handler ( void );
void TCC0_6_Handler ( void );
void TCC1_0_Handler ( void );
void TCC1_1_Handler ( void );
void TCC1_2_Handler ( void );
void TCC1_3_Handler ( void );
void TCC1_4_Handler ( void );
void TCC2_0_Handler ( void );
void TCC2_1_Handler ( void );
void TCC2_2_Handler ( void );
void TCC2_3_Handler ( void );
void TCC3_0_Handler ( void );
void TCC3_1_Handler ( void );
void TCC3_2_Handler ( void );
void TCC4_0_Handler ( void );
void TCC4_1_Handler ( void );
void TCC4_2_Handler ( void );
void TC0_Handler ( void );
void TC1_Handler ( void );
void TC2_Handler ( void );
void TC3_Handler ( void );
void TC4_Handler ( void );
void TC5_Handler ( void );
void TC6_Handler ( void );
void TC7_Handler ( void );
void PDEC_0_Handler ( void );
void PDEC_1_Handler ( void );
void PDEC_2_Handler ( void );
void ADC0_0_Handler ( void );
void ADC0_1_Handler ( void );
void ADC1_0_Handler ( void );
void ADC1_1_Handler ( void );
void AC_Handler ( void );
void DAC_0_Handler ( void );
void DAC_1_Handler ( void );
void DAC_2_Handler ( void );
void DAC_3_Handler ( void );
void DAC_4_Handler ( void );
void I2S_Handler ( void );
void PCC_Handler ( void );
void AES_Handler ( void );
void TRNG_Handler ( void );
void ICM_Handler ( void );
void PUKCC_Handler ( void );
void QSPI_Handler ( void );
void SDHC0_Handler ( void );
void SDHC1_Handler ( void );

/*
 * \brief Configuration of the Cortex-M4 Processor and Core Peripherals
 */
# 559 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h"
/**
 * \brief CMSIS includes
 */

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h" 1
/**************************************************************************//**
 * @file     core_cm4.h
 * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
 * @version  V5.0.8
 * @date     04. June 2018
 ******************************************************************************/
/*
 * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
# 37 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
 extern "C" {


/**
  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  CMSIS violates the following MISRA-C:2004 rules:

   \li Required Rule 8.5, object/function definition in header file.<br>
     Function definitions in header files are used to allow 'inlining'.

   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
     Unions are used for effective representation of core registers.

   \li Advisory Rule 19.7, Function-like macro defined.<br>
     Function-like macros are used to allow more efficient code.
 */


/*******************************************************************************
 *                 CMSIS definitions
 ******************************************************************************/
/**
  \ingroup Cortex_M4
  @{
 */

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_version.h" 1
/**************************************************************************//**
 * @file     cmsis_version.h
 * @brief    CMSIS Core(M) Version definitions
 * @version  V5.0.2
 * @date     19. April 2017
 ******************************************************************************/
/*
 * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
# 34 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_version.h"
/*  CMSIS Version definitions */
# 64 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h" 2

/* CMSIS CM4 definitions */







/** __FPU_USED indicates whether an FPU is used or not.
    For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and functions.
*/
# 162 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_compiler.h" 1
/**************************************************************************//**
 * @file     cmsis_compiler.h
 * @brief    CMSIS compiler generic header file
 * @version  V5.0.4
 * @date     10. January 2018
 ******************************************************************************/
/*
 * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */






/*
 * Arm Compiler 4/5
 */
# 48 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_compiler.h"
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h" 1
/**************************************************************************//**
 * @file     cmsis_gcc.h
 * @brief    CMSIS compiler GCC header file
 * @version  V5.0.4
 * @date     09. April 2018
 ******************************************************************************/
/*
 * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */




/* ignore some GCC warnings */
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"

/* Fallback for __has_builtin */




/* CMSIS compiler specific defines */
# 71 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed)) T_UINT32 { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_WRITE { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_READ { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_WRITE { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_READ { uint32_t v; };
#pragma GCC diagnostic pop
# 118 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/* ###########################  Core Function Access  ########################### */
/** \ingroup  CMSIS_Core_FunctionInterface
    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  @{
 */

/**
  \brief   Enable IRQ Interrupts
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}


/**
  \brief   Disable IRQ Interrupts
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}


/**
  \brief   Get Control Register
  \details Returns the content of the Control Register.
  \return               Control Register value
 */
__attribute__((always_inline)) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
# 176 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Set Control Register
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__attribute__((always_inline)) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
}
# 200 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Get IPSR Register
  \details Returns the content of the IPSR Register.
  \return               IPSR Register value
 */
__attribute__((always_inline)) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}


/**
  \brief   Get APSR Register
  \details Returns the content of the APSR Register.
  \return               APSR Register value
 */
__attribute__((always_inline)) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}


/**
  \brief   Get xPSR Register
  \details Returns the content of the xPSR Register.
  \return               xPSR Register value
 */
__attribute__((always_inline)) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}


/**
  \brief   Get Process Stack Pointer
  \details Returns the current value of the Process Stack Pointer (PSP).
  \return               PSP Register value
 */
__attribute__((always_inline)) static inline uint32_t __get_PSP(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
# 272 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Set Process Stack Pointer
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__((always_inline)) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
}
# 296 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Get Main Stack Pointer
  \details Returns the current value of the Main Stack Pointer (MSP).
  \return               MSP Register value
 */
__attribute__((always_inline)) static inline uint32_t __get_MSP(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
# 326 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Set Main Stack Pointer
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}
# 377 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Get Priority Mask
  \details Returns the current state of the priority mask bit from the Priority Mask Register.
  \return               Priority Mask value
 */
__attribute__((always_inline)) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  return(result);
}
# 407 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Set Priority Mask
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__((always_inline)) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 434 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Enable FIQ
  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}


/**
  \brief   Disable FIQ
  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}


/**
  \brief   Get Base Priority
  \details Returns the current value of the Base Priority register.
  \return               Base Priority register value
 */
__attribute__((always_inline)) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
# 486 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Set Base Priority
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
# 510 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Set Base Priority with condition
  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
           or the new value increases the BASEPRI priority level.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}


/**
  \brief   Get Fault Mask
  \details Returns the current value of the Fault Mask register.
  \return               Fault Mask register value
 */
__attribute__((always_inline)) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
# 552 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Set Fault Mask
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__attribute__((always_inline)) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 761 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Get FPSCR
  \details Returns the current value of the Floating Point Status/Control register.
  \return               Floating Point Status/Control register value
 */
__attribute__((always_inline)) static inline uint32_t __get_FPSCR(void)
{
# 776 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
  uint32_t result;

  __asm volatile ("VMRS %0, fpscr" : "=r" (result) );
  return(result);




}


/**
  \brief   Set FPSCR
  \details Assigns the given value to the Floating Point Status/Control register.
  \param [in]    fpscr  Floating Point Status/Control value to set
 */
__attribute__((always_inline)) static inline void __set_FPSCR(uint32_t fpscr)
{
# 802 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
  __asm volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");




}


/*@} end of CMSIS_Core_RegAccFunctions */


/* ##########################  Core Instruction Access  ######################### */
/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  Access to dedicated instructions
  @{
*/

/* Define macros for porting to both thumb1 and thumb2.
 * For thumb1, use low register (r0-r7), specified by constraint "l"
 * Otherwise, use general registers, specified by constraint "r" */
# 832 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */


/**
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */



/**
  \brief   Wait For Event
  \details Wait For Event is a hint instruction that permits the processor to enter
           a low-power state until one of a number of events occurs.
 */



/**
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */



/**
  \brief   Instruction Synchronization Barrier
  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}


/**
  \brief   Data Synchronization Barrier
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}


/**
  \brief   Data Memory Barrier
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}


/**
  \brief   Reverse byte order (32 bit)
  \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x78563412.
  \param [in]    value  Value to reverse
  \return               Reversed value
 */
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}


/**
  \brief   Reverse byte order (16 bit)
  \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 0x34127856.
  \param [in]    value  Value to reverse
  \return               Reversed value
 */
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return result;
}


/**
  \brief   Reverse byte order (16 bit)
  \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For example, 0x0080 becomes 0x8000.
  \param [in]    value  Value to reverse
  \return               Reversed value
 */
__attribute__((always_inline)) static inline int16_t __REVSH(int16_t value)
{

  return (int16_t)__builtin_bswap16(value);






}


/**
  \brief   Rotate Right in unsigned value (32 bit)
  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
  \param [in]    op1  Value to rotate
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
}


/**
  \brief   Breakpoint
  \details Causes the processor to enter Debug state.
           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
  \param [in]    value  is ignored by the processor.
                 If required, a debugger can use it to store additional information about the breakpoint.
 */



/**
  \brief   Reverse bit order of value
  \details Reverses the bit order of the given value.
  \param [in]    value  Value to reverse
  \return               Reversed value
 */
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;




   __asm volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 1001 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
  return result;
}


/**
  \brief   Count leading zeros
  \details Counts the number of leading zeros of a data value.
  \param [in]  value  Value to count the leading zeros
  \return             number of leading zeros in value
 */







/**
  \brief   LDR Exclusive (8 bit)
  \details Executes a exclusive LDR instruction for 8 bit value.
  \param [in]    ptr  Pointer to data
  \return             value of type uint8_t at (*ptr)
 */
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result); /* Add explicit type cast here */
}


/**
  \brief   LDR Exclusive (16 bit)
  \details Executes a exclusive LDR instruction for 16 bit values.
  \param [in]    ptr  Pointer to data
  \return        value of type uint16_t at (*ptr)
 */
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result); /* Add explicit type cast here */
}


/**
  \brief   LDR Exclusive (32 bit)
  \details Executes a exclusive LDR instruction for 32 bit values.
  \param [in]    ptr  Pointer to data
  \return        value of type uint32_t at (*ptr)
 */
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}


/**
  \brief   STR Exclusive (8 bit)
  \details Executes a exclusive STR instruction for 8 bit values.
  \param [in]  value  Value to store
  \param [in]    ptr  Pointer to location
  \return          0  Function succeeded
  \return          1  Function failed
 */
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}


/**
  \brief   STR Exclusive (16 bit)
  \details Executes a exclusive STR instruction for 16 bit values.
  \param [in]  value  Value to store
  \param [in]    ptr  Pointer to location
  \return          0  Function succeeded
  \return          1  Function failed
 */
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}


/**
  \brief   STR Exclusive (32 bit)
  \details Executes a exclusive STR instruction for 32 bit values.
  \param [in]  value  Value to store
  \param [in]    ptr  Pointer to location
  \return          0  Function succeeded
  \return          1  Function failed
 */
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}


/**
  \brief   Remove the exclusive lock
  \details Removes the exclusive lock which is created by LDREX.
 */
__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 1146 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Signed Saturate
  \details Saturates a signed value.
  \param [in]  ARG1  Value to be saturated
  \param [in]  ARG2  Bit position to saturate to (1..32)
  \return             Saturated value
 */
# 1162 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Unsigned Saturate
  \details Saturates an unsigned value.
  \param [in]  ARG1  Value to be saturated
  \param [in]  ARG2  Bit position to saturate to (0..31)
  \return             Saturated value
 */
# 1178 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/**
  \brief   Rotate Right with Extend (32 bit)
  \details Moves each bit of a bitstring right by one bit.
           The carry input is shifted in at the left end of the bitstring.
  \param [in]    value  Value to rotate
  \return               Rotated value
 */
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}


/**
  \brief   LDRT Unprivileged (8 bit)
  \details Executes a Unprivileged LDRT instruction for 8 bit value.
  \param [in]    ptr  Pointer to data
  \return             value of type uint8_t at (*ptr)
 */
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint8_t) result); /* Add explicit type cast here */
}


/**
  \brief   LDRT Unprivileged (16 bit)
  \details Executes a Unprivileged LDRT instruction for 16 bit values.
  \param [in]    ptr  Pointer to data
  \return        value of type uint16_t at (*ptr)
 */
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint16_t) result); /* Add explicit type cast here */
}


/**
  \brief   LDRT Unprivileged (32 bit)
  \details Executes a Unprivileged LDRT instruction for 32 bit values.
  \param [in]    ptr  Pointer to data
  \return        value of type uint32_t at (*ptr)
 */
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}


/**
  \brief   STRT Unprivileged (8 bit)
  \details Executes a Unprivileged STRT instruction for 8 bit values.
  \param [in]  value  Value to store
  \param [in]    ptr  Pointer to location
 */
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}


/**
  \brief   STRT Unprivileged (16 bit)
  \details Executes a Unprivileged STRT instruction for 16 bit values.
  \param [in]  value  Value to store
  \param [in]    ptr  Pointer to location
 */
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}


/**
  \brief   STRT Unprivileged (32 bit)
  \details Executes a Unprivileged STRT instruction for 32 bit values.
  \param [in]  value  Value to store
  \param [in]    ptr  Pointer to location
 */
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
# 1527 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
/*@}*/ /* end of group CMSIS_Core_InstructionInterface */


/* ###################  Compiler specific Intrinsics  ########################### */
/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
  Access to dedicated SIMD instructions
  @{
*/



__attribute__((always_inline)) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
# 1858 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
# 2071 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}


/*@} end of group CMSIS_SIMD_intrinsics */


#pragma GCC diagnostic pop
# 49 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/cmsis_compiler.h" 2


/*
 * IAR Compiler
 */
# 163 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h" 2



}
# 177 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
 extern "C" {


/* check device defines and use defaults */
# 208 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* IO definitions (access restrictions to peripheral registers) */
/**
    \defgroup CMSIS_glob_defs CMSIS Global Defines

    <strong>IO Type Qualifiers</strong> are used
    \li to specify the access to peripheral variables.
    \li for automatic generation of peripheral register debug information.
*/
# 224 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* following defines should be used for structure members */




/*@} end of group Cortex_M4 */



/*******************************************************************************
 *                 Register Abstraction
  Core Register contain:
  - Core Register
  - Core NVIC Register
  - Core SCB Register
  - Core SysTick Register
  - Core Debug Register
  - Core MPU Register
  - Core FPU Register
 ******************************************************************************/
/**
  \defgroup CMSIS_core_register Defines and Type Definitions
  \brief Type definitions and defines for Cortex-M processor based devices.
*/

/**
  \ingroup    CMSIS_core_register
  \defgroup   CMSIS_CORE  Status and Control Registers
  \brief      Core Register type definitions.
  @{
 */

/**
  \brief  Union type to access the Application Program Status Register (APSR).
 */
typedef union
{
  struct
  {
    uint32_t _reserved0:16; /*!< bit:  0..15  Reserved */
    uint32_t GE:4; /*!< bit: 16..19  Greater than or Equal flags */
    uint32_t _reserved1:7; /*!< bit: 20..26  Reserved */
    uint32_t Q:1; /*!< bit:     27  Saturation condition flag */
    uint32_t V:1; /*!< bit:     28  Overflow condition code flag */
    uint32_t C:1; /*!< bit:     29  Carry condition code flag */
    uint32_t Z:1; /*!< bit:     30  Zero condition code flag */
    uint32_t N:1; /*!< bit:     31  Negative condition code flag */
  } b; /*!< Structure used for bit  access */
  uint32_t w; /*!< Type      used for word access */
} APSR_Type;

/* APSR Register Definitions */
# 295 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/**
  \brief  Union type to access the Interrupt Program Status Register (IPSR).
 */
typedef union
{
  struct
  {
    uint32_t ISR:9; /*!< bit:  0.. 8  Exception number */
    uint32_t _reserved0:23; /*!< bit:  9..31  Reserved */
  } b; /*!< Structure used for bit  access */
  uint32_t w; /*!< Type      used for word access */
} IPSR_Type;

/* IPSR Register Definitions */




/**
  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 */
typedef union
{
  struct
  {
    uint32_t ISR:9; /*!< bit:  0.. 8  Exception number */
    uint32_t _reserved0:1; /*!< bit:      9  Reserved */
    uint32_t ICI_IT_1:6; /*!< bit: 10..15  ICI/IT part 1 */
    uint32_t GE:4; /*!< bit: 16..19  Greater than or Equal flags */
    uint32_t _reserved1:4; /*!< bit: 20..23  Reserved */
    uint32_t T:1; /*!< bit:     24  Thumb bit */
    uint32_t ICI_IT_2:2; /*!< bit: 25..26  ICI/IT part 2 */
    uint32_t Q:1; /*!< bit:     27  Saturation condition flag */
    uint32_t V:1; /*!< bit:     28  Overflow condition code flag */
    uint32_t C:1; /*!< bit:     29  Carry condition code flag */
    uint32_t Z:1; /*!< bit:     30  Zero condition code flag */
    uint32_t N:1; /*!< bit:     31  Negative condition code flag */
  } b; /*!< Structure used for bit  access */
  uint32_t w; /*!< Type      used for word access */
} xPSR_Type;

/* xPSR Register Definitions */
# 368 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/**
  \brief  Union type to access the Control Registers (CONTROL).
 */
typedef union
{
  struct
  {
    uint32_t nPRIV:1; /*!< bit:      0  Execution privilege in Thread mode */
    uint32_t SPSEL:1; /*!< bit:      1  Stack to be used */
    uint32_t FPCA:1; /*!< bit:      2  FP extension active flag */
    uint32_t _reserved0:29; /*!< bit:  3..31  Reserved */
  } b; /*!< Structure used for bit  access */
  uint32_t w; /*!< Type      used for word access */
} CONTROL_Type;

/* CONTROL Register Definitions */
# 393 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/*@} end of group CMSIS_CORE */


/**
  \ingroup    CMSIS_core_register
  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
  \brief      Type definitions for the NVIC Registers
  @{
 */

/**
  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 */
typedef struct
{
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t ISER[8U]; /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
        uint32_t RESERVED0[24U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t ICER[8U]; /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
        uint32_t RSERVED1[24U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t ISPR[8U]; /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
        uint32_t RESERVED2[24U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t ICPR[8U]; /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
        uint32_t RESERVED3[24U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t IABR[8U]; /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
        uint32_t RESERVED4[56U];
  volatile /*! Defines 'read / write' structure member permissions */ uint8_t IP[240U]; /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bit wide) */
        uint32_t RESERVED5[644U];
  volatile /*! Defines 'write only' structure member permissions */ uint32_t STIR; /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Register */
} NVIC_Type;

/* Software Triggered Interrupt Register Definitions */



/*@} end of group CMSIS_NVIC */


/**
  \ingroup  CMSIS_core_register
  \defgroup CMSIS_SCB     System Control Block (SCB)
  \brief    Type definitions for the System Control Block Registers
  @{
 */

/**
  \brief  Structure type to access the System Control Block (SCB).
 */
typedef struct
{
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t CPUID; /*!< Offset: 0x000 (R/ )  CPUID Base Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t ICSR; /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t VTOR; /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t AIRCR; /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t SCR; /*!< Offset: 0x010 (R/W)  System Control Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t CCR; /*!< Offset: 0x014 (R/W)  Configuration Control Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint8_t SHP[12U]; /*!< Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15) */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t SHCSR; /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t CFSR; /*!< Offset: 0x028 (R/W)  Configurable Fault Status Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t HFSR; /*!< Offset: 0x02C (R/W)  HardFault Status Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t DFSR; /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t MMFAR; /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t BFAR; /*!< Offset: 0x038 (R/W)  BusFault Address Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t AFSR; /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t PFR[2U]; /*!< Offset: 0x040 (R/ )  Processor Feature Register */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t DFR; /*!< Offset: 0x048 (R/ )  Debug Feature Register */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t ADR; /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t MMFR[4U]; /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t ISAR[5U]; /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Register */
        uint32_t RESERVED0[5U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t CPACR; /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Register */
} SCB_Type;

/* SCB CPUID Register Definitions */
# 481 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* SCB Interrupt Control State Register Definitions */
# 512 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* SCB Vector Table Offset Register Definitions */



/* SCB Application Interrupt and Reset Control Register Definitions */
# 538 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* SCB System Control Register Definitions */
# 548 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* SCB Configuration Control Register Definitions */
# 567 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* SCB System Handler Control and State Register Definitions */
# 610 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* SCB Configurable Fault Status Register Definitions */
# 620 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
# 639 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* BusFault Status Register (part of SCB Configurable Fault Status Register) */
# 661 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
# 680 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* SCB Hard Fault Status Register Definitions */
# 690 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* SCB Debug Fault Status Register Definitions */
# 706 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/*@} end of group CMSIS_SCB */


/**
  \ingroup  CMSIS_core_register
  \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
  \brief    Type definitions for the System Control and ID Register not in the SCB
  @{
 */

/**
  \brief  Structure type to access the System Control and ID Register not in the SCB.
 */
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t ICTR; /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t ACTLR; /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
} SCnSCB_Type;

/* Interrupt Controller Type Register Definitions */



/* Auxiliary Control Register Definitions */
# 746 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/*@} end of group CMSIS_SCnotSCB */


/**
  \ingroup  CMSIS_core_register
  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
  \brief    Type definitions for the System Timer Registers.
  @{
 */

/**
  \brief  Structure type to access the System Timer (SysTick).
 */
typedef struct
{
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t CTRL; /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t LOAD; /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t VAL; /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t CALIB; /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
} SysTick_Type;

/* SysTick Control / Status Register Definitions */
# 780 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* SysTick Reload Register Definitions */



/* SysTick Current Register Definitions */



/* SysTick Calibration Register Definitions */
# 798 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/*@} end of group CMSIS_SysTick */


/**
  \ingroup  CMSIS_core_register
  \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
  \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
  @{
 */

/**
  \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 */
typedef struct
{
  volatile /*! Defines 'write only' structure member permissions */ union
  {
    volatile /*! Defines 'write only' structure member permissions */ uint8_t u8; /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
    volatile /*! Defines 'write only' structure member permissions */ uint16_t u16; /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
    volatile /*! Defines 'write only' structure member permissions */ uint32_t u32; /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
  } PORT [32U]; /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
        uint32_t RESERVED0[864U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t TER; /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
        uint32_t RESERVED1[15U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t TPR; /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
        uint32_t RESERVED2[15U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t TCR; /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
        uint32_t RESERVED3[29U];
  volatile /*! Defines 'write only' structure member permissions */ uint32_t IWR; /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t IRR; /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t IMCR; /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Register */
        uint32_t RESERVED4[43U];
  volatile /*! Defines 'write only' structure member permissions */ uint32_t LAR; /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t LSR; /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
        uint32_t RESERVED5[6U];
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t PID4; /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Register #4 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t PID5; /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Register #5 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t PID6; /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Register #6 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t PID7; /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Register #7 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t PID0; /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Register #0 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t PID1; /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Register #1 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t PID2; /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Register #2 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t PID3; /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Register #3 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t CID0; /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Register #0 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t CID1; /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Register #1 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t CID2; /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Register #2 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t CID3; /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Register #3 */
} ITM_Type;

/* ITM Trace Privilege Register Definitions */



/* ITM Trace Control Register Definitions */
# 879 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* ITM Integration Write Register Definitions */



/* ITM Integration Read Register Definitions */



/* ITM Integration Mode Control Register Definitions */



/* ITM Lock Status Register Definitions */
# 901 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/*@}*/ /* end of group CMSIS_ITM */


/**
  \ingroup  CMSIS_core_register
  \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
  \brief    Type definitions for the Data Watchpoint and Trace (DWT)
  @{
 */

/**
  \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 */
typedef struct
{
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t CTRL; /*!< Offset: 0x000 (R/W)  Control Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t CYCCNT; /*!< Offset: 0x004 (R/W)  Cycle Count Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t CPICNT; /*!< Offset: 0x008 (R/W)  CPI Count Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t EXCCNT; /*!< Offset: 0x00C (R/W)  Exception Overhead Count Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t SLEEPCNT; /*!< Offset: 0x010 (R/W)  Sleep Count Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t LSUCNT; /*!< Offset: 0x014 (R/W)  LSU Count Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t FOLDCNT; /*!< Offset: 0x018 (R/W)  Folded-instruction Count Register */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t PCSR; /*!< Offset: 0x01C (R/ )  Program Counter Sample Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t COMP0; /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t MASK0; /*!< Offset: 0x024 (R/W)  Mask Register 0 */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t FUNCTION0; /*!< Offset: 0x028 (R/W)  Function Register 0 */
        uint32_t RESERVED0[1U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t COMP1; /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t MASK1; /*!< Offset: 0x034 (R/W)  Mask Register 1 */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t FUNCTION1; /*!< Offset: 0x038 (R/W)  Function Register 1 */
        uint32_t RESERVED1[1U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t COMP2; /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t MASK2; /*!< Offset: 0x044 (R/W)  Mask Register 2 */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t FUNCTION2; /*!< Offset: 0x048 (R/W)  Function Register 2 */
        uint32_t RESERVED2[1U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t COMP3; /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t MASK3; /*!< Offset: 0x054 (R/W)  Mask Register 3 */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t FUNCTION3; /*!< Offset: 0x058 (R/W)  Function Register 3 */
} DWT_Type;

/* DWT Control Register Definitions */
# 996 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* DWT CPI Count Register Definitions */



/* DWT Exception Overhead Count Register Definitions */



/* DWT Sleep Count Register Definitions */



/* DWT LSU Count Register Definitions */



/* DWT Folded-instruction Count Register Definitions */



/* DWT Comparator Mask Register Definitions */



/* DWT Comparator Function Register Definitions */
# 1048 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/*@}*/ /* end of group CMSIS_DWT */


/**
  \ingroup  CMSIS_core_register
  \defgroup CMSIS_TPI     Trace Port Interface (TPI)
  \brief    Type definitions for the Trace Port Interface (TPI)
  @{
 */

/**
  \brief  Structure type to access the Trace Port Interface Register (TPI).
 */
typedef struct
{
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t SSPSR; /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t CSPSR; /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Register */
        uint32_t RESERVED0[2U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t ACPR; /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Register */
        uint32_t RESERVED1[55U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t SPPR; /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register */
        uint32_t RESERVED2[131U];
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t FFSR; /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t FFCR; /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Register */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t FSCR; /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counter Register */
        uint32_t RESERVED3[759U];
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t TRIGGER; /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t FIFO0; /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t ITATBCTR2; /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
        uint32_t RESERVED4[1U];
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t ITATBCTR0; /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t FIFO1; /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t ITCTRL; /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
        uint32_t RESERVED5[39U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t CLAIMSET; /*!< Offset: 0xFA0 (R/W)  Claim tag set */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t CLAIMCLR; /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
        uint32_t RESERVED7[8U];
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t DEVID; /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t DEVTYPE; /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
} TPI_Type;

/* TPI Asynchronous Clock Prescaler Register Definitions */



/* TPI Selected Pin Protocol Register Definitions */



/* TPI Formatter and Flush Status Register Definitions */
# 1110 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* TPI Formatter and Flush Control Register Definitions */






/* TPI TRIGGER Register Definitions */



/* TPI Integration ETM Data Register Definitions (FIFO0) */
# 1143 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* TPI ITATBCTR2 Register Definitions */






/* TPI Integration ITM Data Register Definitions (FIFO1) */
# 1172 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* TPI ITATBCTR0 Register Definitions */






/* TPI Integration Mode Control Register Definitions */



/* TPI DEVID Register Definitions */
# 1202 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* TPI DEVTYPE Register Definitions */






/*@}*/ /* end of group CMSIS_TPI */



/**
  \ingroup  CMSIS_core_register
  \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
  \brief    Type definitions for the Memory Protection Unit (MPU)
  @{
 */

/**
  \brief  Structure type to access the Memory Protection Unit (MPU).
 */
typedef struct
{
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t TYPE; /*!< Offset: 0x000 (R/ )  MPU Type Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t CTRL; /*!< Offset: 0x004 (R/W)  MPU Control Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t RNR; /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t RBAR; /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t RASR; /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t RBAR_A1; /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t RASR_A1; /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and Size Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t RBAR_A2; /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t RASR_A2; /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and Size Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t RBAR_A3; /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t RASR_A3; /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and Size Register */
} MPU_Type;



/* MPU Type Register Definitions */
# 1250 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* MPU Control Register Definitions */
# 1260 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* MPU Region Number Register Definitions */



/* MPU Region Base Address Register Definitions */
# 1274 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* MPU Region Attribute and Size Register Definitions */
# 1305 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/*@} end of group CMSIS_MPU */



/**
  \ingroup  CMSIS_core_register
  \defgroup CMSIS_FPU     Floating Point Unit (FPU)
  \brief    Type definitions for the Floating Point Unit (FPU)
  @{
 */

/**
  \brief  Structure type to access the Floating Point Unit (FPU).
 */
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t FPCCR; /*!< Offset: 0x004 (R/W)  Floating-Point Context Control Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t FPCAR; /*!< Offset: 0x008 (R/W)  Floating-Point Context Address Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t FPDSCR; /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Control Register */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t MVFR0; /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 */
  volatile const /*! Defines 'read only' structure member permissions */ uint32_t MVFR1; /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 */
} FPU_Type;

/* Floating-Point Context Control Register Definitions */
# 1357 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* Floating-Point Context Address Register Definitions */



/* Floating-Point Default Status Control Register Definitions */
# 1374 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* Media and FP Feature Register 0 Definitions */
# 1399 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* Media and FP Feature Register 1 Definitions */
# 1412 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/*@} end of group CMSIS_FPU */


/**
  \ingroup  CMSIS_core_register
  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
  \brief    Type definitions for the Core Debug Registers
  @{
 */

/**
  \brief  Structure type to access the Core Debug Register (CoreDebug).
 */
typedef struct
{
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t DHCSR; /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status Register */
  volatile /*! Defines 'write only' structure member permissions */ uint32_t DCRSR; /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t DCRDR; /*!< Offset: 0x008 (R/W)  Debug Core Register Data Register */
  volatile /*! Defines 'read / write' structure member permissions */ uint32_t DEMCR; /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register */
} CoreDebug_Type;

/* Debug Halting Control and Status Register Definitions */
# 1470 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* Debug Core Register Selector Register Definitions */






/* Debug Exception and Monitor Control Register Definitions */
# 1517 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/*@} end of group CMSIS_CoreDebug */


/**
  \ingroup    CMSIS_core_register
  \defgroup   CMSIS_core_bitfield     Core register bit field macros
  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
  @{
 */

/**
  \brief   Mask and shift a bit field value for use in a register bit range.
  \param[in] field  Name of the register bit field.
  \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
  \return           Masked and shifted value.
*/


/**
  \brief     Mask and shift a register value to extract a bit filed value.
  \param[in] field  Name of the register bit field.
  \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
  \return           Masked and shifted bit field value.
*/


/*@} end of group CMSIS_core_bitfield */


/**
  \ingroup    CMSIS_core_register
  \defgroup   CMSIS_core_base     Core Definitions
  \brief      Definitions for base addresses, unions, and structures.
  @{
 */

/* Memory mapping of Core Hardware */
# 1580 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/*@} */



/*******************************************************************************
 *                Hardware Abstraction Layer
  Core Function Interface contains:
  - Core NVIC Functions
  - Core SysTick Functions
  - Core Debug Functions
  - Core Register Access Functions
 ******************************************************************************/
/**
  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
*/



/* ##########################   NVIC functions  #################################### */
/**
  \ingroup  CMSIS_Core_FunctionInterface
  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
  \brief    Functions that manage interrupts and exceptions via the NVIC.
  @{
 */
# 1639 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/* The following EXC_RETURN values are saved the LR on exception entry */
# 1648 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h"
/**
  \brief   Set Priority Grouping
  \details Sets the priority grouping field using the required unlock sequence.
           The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
           Only values from 0..7 are used.
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */

  reg_value = ((SCB_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D00UL) /*!< System Control Block Base Address */ ) /*!< SCB configuration struct */->AIRCR; /* read old register configuration    */
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U /*!< SCB AIRCR: VECTKEY Position */) /*!< SCB AIRCR: VECTKEY Mask */ | (7UL << 8U /*!< SCB AIRCR: PRIGROUP Position */) /*!< SCB AIRCR: PRIGROUP Mask */)); /* clear bits to change               */
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U /*!< SCB AIRCR: VECTKEY Position */) |
                (PriorityGroupTmp << 8U /*!< SCB AIRCR: PRIGROUP Position */) ); /* Insert write key and priority group */
  ((SCB_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D00UL) /*!< System Control Block Base Address */ ) /*!< SCB configuration struct */->AIRCR = reg_value;
}


/**
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D00UL) /*!< System Control Block Base Address */ ) /*!< SCB configuration struct */->AIRCR & (7UL << 8U /*!< SCB AIRCR: PRIGROUP Position */) /*!< SCB AIRCR: PRIGROUP Mask */) >> 8U /*!< SCB AIRCR: PRIGROUP Position */));
}


/**
  \brief   Enable Interrupt
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0100UL) /*!< NVIC Base Address */ ) /*!< NVIC configuration struct */->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}


/**
  \brief   Get Interrupt Enable status
  \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \return             0  Interrupt is not enabled.
  \return             1  Interrupt is enabled.
  \note    IRQn must not be negative.
 */
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0100UL) /*!< NVIC Base Address */ ) /*!< NVIC configuration struct */->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}


/**
  \brief   Disable Interrupt
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0100UL) /*!< NVIC Base Address */ ) /*!< NVIC configuration struct */->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __DSB();
    __ISB();
  }
}


/**
  \brief   Get Pending Interrupt
  \details Reads the NVIC pending register and returns the pending bit for the specified device specific interrupt.
  \param [in]      IRQn  Device specific interrupt number.
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0100UL) /*!< NVIC Base Address */ ) /*!< NVIC configuration struct */->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}


/**
  \brief   Set Pending Interrupt
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0100UL) /*!< NVIC Base Address */ ) /*!< NVIC configuration struct */->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}


/**
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0100UL) /*!< NVIC Base Address */ ) /*!< NVIC configuration struct */->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}


/**
  \brief   Get Active Interrupt
  \details Reads the active register in the NVIC and returns the active bit for the device specific interrupt.
  \param [in]      IRQn  Device specific interrupt number.
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0100UL) /*!< NVIC Base Address */ ) /*!< NVIC configuration struct */->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}


/**
  \brief   Set Interrupt Priority
  \details Sets the priority of a device specific interrupt or a processor exception.
           The interrupt number can be positive to specify a device specific interrupt,
           or negative to specify a processor exception.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0100UL) /*!< NVIC Base Address */ ) /*!< NVIC configuration struct */->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - 2 /*!< Number of bits used for Priority Levels */)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D00UL) /*!< System Control Block Base Address */ ) /*!< SCB configuration struct */->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 2 /*!< Number of bits used for Priority Levels */)) & (uint32_t)0xFFUL);
  }
}


/**
  \brief   Get Interrupt Priority
  \details Reads the priority of a device specific interrupt or a processor exception.
           The interrupt number can be positive to specify a device specific interrupt,
           or negative to specify a processor exception.
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0100UL) /*!< NVIC Base Address */ ) /*!< NVIC configuration struct */->IP[((uint32_t)IRQn)] >> (8U - 2 /*!< Number of bits used for Priority Levels */)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D00UL) /*!< System Control Block Base Address */ ) /*!< SCB configuration struct */->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - 2 /*!< Number of bits used for Priority Levels */)));
  }
}


/**
  \brief   Encode Priority
  \details Encodes the priority for an interrupt with the given priority group,
           preemptive priority value, and subpriority value.
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]     PriorityGroup  Used priority group.
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(2 /*!< Number of bits used for Priority Levels */)) ? (uint32_t)(2 /*!< Number of bits used for Priority Levels */) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(2 /*!< Number of bits used for Priority Levels */)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(2 /*!< Number of bits used for Priority Levels */));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}


/**
  \brief   Decode Priority
  \details Decodes an interrupt priority value with a given priority group to
           preemptive priority value and subpriority value.
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
  \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC_GetPriority().
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL); /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(2 /*!< Number of bits used for Priority Levels */)) ? (uint32_t)(2 /*!< Number of bits used for Priority Levels */) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(2 /*!< Number of bits used for Priority Levels */)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(2 /*!< Number of bits used for Priority Levels */));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}


/**
  \brief   Set Interrupt Vector
  \details Sets an interrupt vector in SRAM based interrupt vector table.
           The interrupt number can be positive to specify a device specific interrupt,
           or negative to specify a processor exception.
           VTOR must been relocated to SRAM before.
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D00UL) /*!< System Control Block Base Address */ ) /*!< SCB configuration struct */->VTOR;
  vectors[(int32_t)IRQn + 16] = vector;
}


/**
  \brief   Get Interrupt Vector
  \details Reads an interrupt vector from interrupt vector table.
           The interrupt number can be positive to specify a device specific interrupt,
           or negative to specify a processor exception.
  \param [in]   IRQn      Interrupt number.
  \return                 Address of interrupt handler function
 */
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D00UL) /*!< System Control Block Base Address */ ) /*!< SCB configuration struct */->VTOR;
  return vectors[(int32_t)IRQn + 16];
}


/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__attribute__((__noreturn__)) static inline void __NVIC_SystemReset(void)
{
  __DSB(); /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  ((SCB_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D00UL) /*!< System Control Block Base Address */ ) /*!< SCB configuration struct */->AIRCR = (uint32_t)((0x5FAUL << 16U /*!< SCB AIRCR: VECTKEY Position */) |
                           (((SCB_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D00UL) /*!< System Control Block Base Address */ ) /*!< SCB configuration struct */->AIRCR & (7UL << 8U /*!< SCB AIRCR: PRIGROUP Position */) /*!< SCB AIRCR: PRIGROUP Mask */) |
                            (1UL << 2U /*!< SCB AIRCR: SYSRESETREQ Position */) /*!< SCB AIRCR: SYSRESETREQ Mask */ ); /* Keep priority group unchanged */
  __DSB(); /* Ensure completion of memory access */

  for(;;) /* wait until reset */
  {
    __asm volatile ("nop");
  }
}

/*@} end of CMSIS_Core_NVICFunctions */

/* ##########################  MPU functions  #################################### */



# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/mpu_armv7.h" 1
/******************************************************************************
 * @file     mpu_armv7.h
 * @brief    CMSIS MPU API for Armv7-M MPU
 * @version  V5.0.4
 * @date     10. January 2018
 ******************************************************************************/
/*
 * Copyright (c) 2017-2018 Arm Limited. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
# 70 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/mpu_armv7.h"
/** MPU Region Base Address Register Value
*
* \param Region The region to be configured, number 0 to 15.
* \param BaseAddress The base address for the region.
*/





/**
* MPU Memory Access Attributes
* 
* \param TypeExtField      Type extension field, allows you to configure memory access type, for example strongly ordered, peripheral.
* \param IsShareable       Region is shareable between multiple bus masters.
* \param IsCacheable       Region is cacheable, i.e. its value may be kept in cache.
* \param IsBufferable      Region is bufferable, i.e. using write-back caching. Cacheable but non-bufferable regions use write-through policy.
*/






/**
* MPU Region Attribute and Size Register Value
* 
* \param DisableExec       Instruction access disable bit, 1= disable instruction fetches.
* \param AccessPermission  Data access permissions, allows you to configure read/write access for User and Privileged mode.
* \param AccessAttributes  Memory access attribution, see \ref ARM_MPU_ACCESS_.
* \param SubRegionDisable  Sub-region disable field.
* \param Size              Region size of the region to be configured, for example 4K, 8K.
*/





/**
* MPU Region Attribute and Size Register Value
* 
* \param DisableExec       Instruction access disable bit, 1= disable instruction fetches.
* \param AccessPermission  Data access permissions, allows you to configure read/write access for User and Privileged mode.
* \param TypeExtField      Type extension field, allows you to configure memory access type, for example strongly ordered, peripheral.
* \param IsShareable       Region is shareable between multiple bus masters.
* \param IsCacheable       Region is cacheable, i.e. its value may be kept in cache.
* \param IsBufferable      Region is bufferable, i.e. using write-back caching. Cacheable but non-bufferable regions use write-through policy.
* \param SubRegionDisable  Sub-region disable field.
* \param Size              Region size of the region to be configured, for example 4K, 8K.
*/



/**
* MPU Memory Access Attribute for strongly ordered memory.
*  - TEX: 000b
*  - Shareable
*  - Non-cacheable
*  - Non-bufferable
*/


/**
* MPU Memory Access Attribute for device memory.
*  - TEX: 000b (if non-shareable) or 010b (if shareable)
*  - Shareable or non-shareable
*  - Non-cacheable
*  - Bufferable (if shareable) or non-bufferable (if non-shareable)
*
* \param IsShareable Configures the device memory as shareable or non-shareable.
*/


/**
* MPU Memory Access Attribute for normal memory.
*  - TEX: 1BBb (reflecting outer cacheability rules)
*  - Shareable or non-shareable
*  - Cacheable or non-cacheable (reflecting inner cacheability rules)
*  - Bufferable or non-bufferable (reflecting inner cacheability rules)
*
* \param OuterCp Configures the outer cache policy.
* \param InnerCp Configures the inner cache policy.
* \param IsShareable Configures the memory as shareable or non-shareable.
*/


/**
* MPU Memory Access Attribute non-cacheable policy.
*/


/**
* MPU Memory Access Attribute write-back, write and read allocate policy.
*/


/**
* MPU Memory Access Attribute write-through, no write allocate policy.
*/


/**
* MPU Memory Access Attribute write-back, no write allocate policy.
*/



/**
* Struct for a single MPU Region
*/
typedef struct {
  uint32_t RBAR; //!< The region base address register value (RBAR)
  uint32_t RASR; //!< The region attribute and size register value (RASR) \ref MPU_RASR
} ARM_MPU_Region_t;

/** Enable the MPU.
* \param MPU_Control Default access permissions for unconfigured regions.
*/
static inline void ARM_MPU_Enable(uint32_t MPU_Control)
{
  __DSB();
  __ISB();
  ((MPU_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D90UL) /*!< Memory Protection Unit */ ) /*!< Memory Protection Unit */->CTRL = MPU_Control | (1UL /*<< MPU_CTRL_ENABLE_Pos*/) /*!< MPU CTRL: ENABLE Mask */;

  ((SCB_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D00UL) /*!< System Control Block Base Address */ ) /*!< SCB configuration struct */->SHCSR |= (1UL << 16U /*!< SCB SHCSR: MEMFAULTENA Position */) /*!< SCB SHCSR: MEMFAULTENA Mask */;

}

/** Disable the MPU.
*/
static inline void ARM_MPU_Disable(void)
{
  __DSB();
  __ISB();

  ((SCB_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D00UL) /*!< System Control Block Base Address */ ) /*!< SCB configuration struct */->SHCSR &= ~(1UL << 16U /*!< SCB SHCSR: MEMFAULTENA Position */) /*!< SCB SHCSR: MEMFAULTENA Mask */;

  ((MPU_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D90UL) /*!< Memory Protection Unit */ ) /*!< Memory Protection Unit */->CTRL &= ~(1UL /*<< MPU_CTRL_ENABLE_Pos*/) /*!< MPU CTRL: ENABLE Mask */;
}

/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
static inline void ARM_MPU_ClrRegion(uint32_t rnr)
{
  ((MPU_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D90UL) /*!< Memory Protection Unit */ ) /*!< Memory Protection Unit */->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D90UL) /*!< Memory Protection Unit */ ) /*!< Memory Protection Unit */->RASR = 0U;
}

/** Configure an MPU region.
* \param rbar Value for RBAR register.
* \param rsar Value for RSAR register.
*/
static inline void ARM_MPU_SetRegion(uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D90UL) /*!< Memory Protection Unit */ ) /*!< Memory Protection Unit */->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D90UL) /*!< Memory Protection Unit */ ) /*!< Memory Protection Unit */->RASR = rasr;
}

/** Configure the given MPU region.
* \param rnr Region number to be configured.
* \param rbar Value for RBAR register.
* \param rsar Value for RSAR register.
*/
static inline void ARM_MPU_SetRegionEx(uint32_t rnr, uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D90UL) /*!< Memory Protection Unit */ ) /*!< Memory Protection Unit */->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D90UL) /*!< Memory Protection Unit */ ) /*!< Memory Protection Unit */->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D90UL) /*!< Memory Protection Unit */ ) /*!< Memory Protection Unit */->RASR = rasr;
}

/** Memcopy with strictly ordered memory access, e.g. for register targets.
* \param dst Destination data is copied to.
* \param src Source data is copied from.
* \param len Amount of data words to be copied.
*/
static inline void orderedCpy(volatile uint32_t* dst, const uint32_t* src, uint32_t len)
{
  uint32_t i;
  for (i = 0U; i < len; ++i)
  {
    dst[i] = src[i];
  }
}

/** Load the given number of MPU regions from a table.
* \param table Pointer to the MPU configuration table.
* \param cnt Amount of regions to be configured.
*/
static inline void ARM_MPU_Load(ARM_MPU_Region_t const* table, uint32_t cnt)
{
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
  while (cnt > 4U) {
    orderedCpy(&(((MPU_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D90UL) /*!< Memory Protection Unit */ ) /*!< Memory Protection Unit */->RBAR), &(table->RBAR), 4U*rowWordSize);
    table += 4U;
    cnt -= 4U;
  }
  orderedCpy(&(((MPU_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0D90UL) /*!< Memory Protection Unit */ ) /*!< Memory Protection Unit */->RBAR), &(table->RBAR), cnt*rowWordSize);
}
# 1961 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS/5.4.0/CMSIS/Core/Include/core_cm4.h" 2




/* ##########################  FPU functions  #################################### */
/**
  \ingroup  CMSIS_Core_FunctionInterface
  \defgroup CMSIS_Core_FpuFunctions FPU Functions
  \brief    Function that provides FPU type.
  @{
 */

/**
  \brief   get FPU type
  \details returns the FPU type
  \returns
   - \b  0: No FPU
   - \b  1: Single precision FPU
   - \b  2: Double + Single precision FPU
 */
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = ((FPU_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0F30UL) /*!< Floating Point Unit */ ) /*!< Floating Point Unit */->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U /*!< MVFR0: Single-precision bits Position */) /*!< MVFR0: Single-precision bits Mask */ | (0xFUL << 8U /*!< MVFR0: Double-precision bits Position */) /*!< MVFR0: Double-precision bits Mask */)) == 0x020U)
  {
    return 1U; /* Single precision FPU */
  }
  else
  {
    return 0U; /* No FPU */
  }
}


/*@} end of CMSIS_Core_FpuFunctions */



/* ##################################    SysTick function  ############################################ */
/**
  \ingroup  CMSIS_Core_FunctionInterface
  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
  \brief    Functions that configure the System.
  @{
 */



/**
  \brief   System Tick Configuration
  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
           Counter is in free running mode to generate periodic interrupts.
  \param [in]  ticks  Number of ticks between two interrupts.
  \return          0  Function succeeded.
  \return          1  Function failed.
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/) /*!< SysTick LOAD: RELOAD Mask */)
  {
    return (1UL); /* Reload value impossible */
  }

  ((SysTick_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0010UL) /*!< SysTick Base Address */ ) /*!< SysTick configuration struct */->LOAD = (uint32_t)(ticks - 1UL); /* set reload register */
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 2 /*!< Number of bits used for Priority Levels */) - 1UL); /* set Priority for Systick Interrupt */
  ((SysTick_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0010UL) /*!< SysTick Base Address */ ) /*!< SysTick configuration struct */->VAL = 0UL; /* Load the SysTick Counter Value */
  ((SysTick_Type *) ((0xE000E000UL) /*!< System Control Space Base Address */ + 0x0010UL) /*!< SysTick Base Address */ ) /*!< SysTick configuration struct */->CTRL = (1UL << 2U /*!< SysTick CTRL: CLKSOURCE Position */) /*!< SysTick CTRL: CLKSOURCE Mask */ |
                   (1UL << 1U /*!< SysTick CTRL: TICKINT Position */) /*!< SysTick CTRL: TICKINT Mask */ |
                   (1UL /*<< SysTick_CTRL_ENABLE_Pos*/) /*!< SysTick CTRL: ENABLE Mask */; /* Enable SysTick IRQ and SysTick Timer */
  return (0UL); /* Function successful */
}



/*@} end of CMSIS_Core_SysTickFunctions */



/* ##################################### Debug In/Output function ########################################### */
/**
  \ingroup  CMSIS_Core_FunctionInterface
  \defgroup CMSIS_core_DebugFunctions ITM Functions
  \brief    Functions that access the ITM debug interface.
  @{
 */

extern volatile int32_t ITM_RxBuffer; /*!< External variable to receive characters. */



/**
  \brief   ITM Send Character
  \details Transmits a character via the ITM channel 0, and
           \li Just returns when no debugger is connected that has booked the output.
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) /*!< ITM Base Address */ ) /*!< ITM configuration struct */->TCR & (1UL /*<< ITM_TCR_ITMENA_Pos*/) /*!< ITM TCR: ITM Enable bit Mask */) != 0UL) && /* ITM enabled */
      ((((ITM_Type *) (0xE0000000UL) /*!< ITM Base Address */ ) /*!< ITM configuration struct */->TER & 1UL ) != 0UL) ) /* ITM Port #0 enabled */
  {
    while (((ITM_Type *) (0xE0000000UL) /*!< ITM Base Address */ ) /*!< ITM configuration struct */->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) /*!< ITM Base Address */ ) /*!< ITM configuration struct */->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}


/**
  \brief   ITM Receive Character
  \details Inputs a character via the external variable \ref ITM_RxBuffer.
  \return             Received character.
  \return         -1  No character pending.
 */
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1; /* no character available */

  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U) /*!< Value identifying \ref ITM_RxBuffer is ready for next character. */)
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U) /*!< Value identifying \ref ITM_RxBuffer is ready for next character. */; /* ready for next character */
  }

  return (ch);
}


/**
  \brief   ITM Check Character
  \details Checks whether a character is pending for reading in the variable \ref ITM_RxBuffer.
  \return          0  No character available.
  \return          1  Character available.
 */
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U) /*!< Value identifying \ref ITM_RxBuffer is ready for next character. */)
  {
    return (0); /* no character available */
  }
  else
  {
    return (1); /*    character available */
  }
}

/*@} end of CMSIS_core_DebugFunctions */





}
# 564 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/system_samd51.h" 1
/**
 * \file
 *
 * \brief Low-level initialization functions called upon chip startup
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */





extern "C" {




extern uint32_t SystemCoreClock; /*!< System Clock Frequency (Core Clock)  */

void SystemInit(void);
void SystemCoreClockUpdate(void);


}
# 566 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2


/*@}*/

/* ************************************************************************** */
/**  SOFTWARE PERIPHERAL API DEFINITION FOR SAMD51P20A */
/* ************************************************************************** */
/** \defgroup SAMD51P20A_api Peripheral Software API */
/*@{*/

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h" 1
/**
 * \file
 *
 * \brief Component description for AC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR AC */
/* ========================================================================== */
/** \addtogroup SAMD51_AC Analog Comparators */
/*@{*/




/* -------- AC_CTRLA : (AC Offset: 0x00) (R/W  8) Control A -------- */

typedef union {
  struct {
    uint8_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint8_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AC_CTRLA_Type;
# 62 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_CTRLB : (AC Offset: 0x01) ( /W  8) Control B -------- */

typedef union {
  struct {
    uint8_t START0:1; /*!< bit:      0  Comparator 0 Start Comparison      */
    uint8_t START1:1; /*!< bit:      1  Comparator 1 Start Comparison      */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t START:2; /*!< bit:  0.. 1  Comparator x Start Comparison      */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AC_CTRLB_Type;
# 90 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_EVCTRL : (AC Offset: 0x02) (R/W 16) Event Control -------- */

typedef union {
  struct {
    uint16_t COMPEO0:1; /*!< bit:      0  Comparator 0 Event Output Enable   */
    uint16_t COMPEO1:1; /*!< bit:      1  Comparator 1 Event Output Enable   */
    uint16_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint16_t WINEO0:1; /*!< bit:      4  Window 0 Event Output Enable       */
    uint16_t :3; /*!< bit:  5.. 7  Reserved                           */
    uint16_t COMPEI0:1; /*!< bit:      8  Comparator 0 Event Input Enable    */
    uint16_t COMPEI1:1; /*!< bit:      9  Comparator 1 Event Input Enable    */
    uint16_t :2; /*!< bit: 10..11  Reserved                           */
    uint16_t INVEI0:1; /*!< bit:     12  Comparator 0 Input Event Invert Enable */
    uint16_t INVEI1:1; /*!< bit:     13  Comparator 1 Input Event Invert Enable */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t COMPEO:2; /*!< bit:  0.. 1  Comparator x Event Output Enable   */
    uint16_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint16_t WINEO:1; /*!< bit:      4  Window x Event Output Enable       */
    uint16_t :3; /*!< bit:  5.. 7  Reserved                           */
    uint16_t COMPEI:2; /*!< bit:  8.. 9  Comparator x Event Input Enable    */
    uint16_t :2; /*!< bit: 10..11  Reserved                           */
    uint16_t INVEI:2; /*!< bit: 12..13  Comparator x Input Event Invert Enable */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} AC_EVCTRL_Type;
# 151 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_INTENCLR : (AC Offset: 0x04) (R/W  8) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t COMP0:1; /*!< bit:      0  Comparator 0 Interrupt Enable      */
    uint8_t COMP1:1; /*!< bit:      1  Comparator 1 Interrupt Enable      */
    uint8_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint8_t WIN0:1; /*!< bit:      4  Window 0 Interrupt Enable          */
    uint8_t :3; /*!< bit:  5.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t COMP:2; /*!< bit:  0.. 1  Comparator x Interrupt Enable      */
    uint8_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint8_t WIN:1; /*!< bit:      4  Window x Interrupt Enable          */
    uint8_t :3; /*!< bit:  5.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AC_INTENCLR_Type;
# 188 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_INTENSET : (AC Offset: 0x05) (R/W  8) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t COMP0:1; /*!< bit:      0  Comparator 0 Interrupt Enable      */
    uint8_t COMP1:1; /*!< bit:      1  Comparator 1 Interrupt Enable      */
    uint8_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint8_t WIN0:1; /*!< bit:      4  Window 0 Interrupt Enable          */
    uint8_t :3; /*!< bit:  5.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t COMP:2; /*!< bit:  0.. 1  Comparator x Interrupt Enable      */
    uint8_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint8_t WIN:1; /*!< bit:      4  Window x Interrupt Enable          */
    uint8_t :3; /*!< bit:  5.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AC_INTENSET_Type;
# 225 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_INTFLAG : (AC Offset: 0x06) (R/W  8) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t COMP0:1; /*!< bit:      0  Comparator 0                       */
    volatile /*!< Defines 'read only' permissions */ uint8_t COMP1:1; /*!< bit:      1  Comparator 1                       */
    volatile /*!< Defines 'read only' permissions */ uint8_t :2; /*!< bit:  2.. 3  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t WIN0:1; /*!< bit:      4  Window 0                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t :3; /*!< bit:  5.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t COMP:2; /*!< bit:  0.. 1  Comparator x                       */
    volatile /*!< Defines 'read only' permissions */ uint8_t :2; /*!< bit:  2.. 3  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t WIN:1; /*!< bit:      4  Window x                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t :3; /*!< bit:  5.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AC_INTFLAG_Type;
# 262 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_STATUSA : (AC Offset: 0x07) (R/   8) Status A -------- */

typedef union {
  struct {
    uint8_t STATE0:1; /*!< bit:      0  Comparator 0 Current State         */
    uint8_t STATE1:1; /*!< bit:      1  Comparator 1 Current State         */
    uint8_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint8_t WSTATE0:2; /*!< bit:  4.. 5  Window 0 Current State             */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t STATE:2; /*!< bit:  0.. 1  Comparator x Current State         */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AC_STATUSA_Type;
# 301 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_STATUSB : (AC Offset: 0x08) (R/   8) Status B -------- */

typedef union {
  struct {
    uint8_t READY0:1; /*!< bit:      0  Comparator 0 Ready                 */
    uint8_t READY1:1; /*!< bit:      1  Comparator 1 Ready                 */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t READY:2; /*!< bit:  0.. 1  Comparator x Ready                 */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AC_STATUSB_Type;
# 329 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_DBGCTRL : (AC Offset: 0x09) (R/W  8) Debug Control -------- */

typedef union {
  struct {
    uint8_t DBGRUN:1; /*!< bit:      0  Debug Run                          */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AC_DBGCTRL_Type;
# 347 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_WINCTRL : (AC Offset: 0x0A) (R/W  8) Window Control -------- */

typedef union {
  struct {
    uint8_t WEN0:1; /*!< bit:      0  Window 0 Mode Enable               */
    uint8_t WINTSEL0:2; /*!< bit:  1.. 2  Window 0 Interrupt Selection       */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AC_WINCTRL_Type;
# 377 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_SCALER : (AC Offset: 0x0C) (R/W  8) Scaler n -------- */

typedef union {
  struct {
    uint8_t VALUE:6; /*!< bit:  0.. 5  Scaler Value                       */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AC_SCALER_Type;
# 396 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_COMPCTRL : (AC Offset: 0x10) (R/W 32) Comparator Control n -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t SINGLE:1; /*!< bit:      2  Single-Shot Mode                   */
    uint32_t INTSEL:2; /*!< bit:  3.. 4  Interrupt Selection                */
    uint32_t :1; /*!< bit:      5  Reserved                           */
    uint32_t RUNSTDBY:1; /*!< bit:      6  Run in Standby                     */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t MUXNEG:3; /*!< bit:  8..10  Negative Input Mux Selection       */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t MUXPOS:3; /*!< bit: 12..14  Positive Input Mux Selection       */
    uint32_t SWAP:1; /*!< bit:     15  Swap Inputs and Invert             */
    uint32_t SPEED:2; /*!< bit: 16..17  Speed Selection                    */
    uint32_t :1; /*!< bit:     18  Reserved                           */
    uint32_t HYSTEN:1; /*!< bit:     19  Hysteresis Enable                  */
    uint32_t HYST:2; /*!< bit: 20..21  Hysteresis Level                   */
    uint32_t :2; /*!< bit: 22..23  Reserved                           */
    uint32_t FLEN:3; /*!< bit: 24..26  Filter Length                      */
    uint32_t :1; /*!< bit:     27  Reserved                           */
    uint32_t OUT:2; /*!< bit: 28..29  Output                             */
    uint32_t :2; /*!< bit: 30..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} AC_COMPCTRL_Type;
# 515 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_SYNCBUSY : (AC Offset: 0x20) (R/  32) Synchronization Busy -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset Synchronization Busy */
    uint32_t ENABLE:1; /*!< bit:      1  Enable Synchronization Busy        */
    uint32_t WINCTRL:1; /*!< bit:      2  WINCTRL Synchronization Busy       */
    uint32_t COMPCTRL0:1; /*!< bit:      3  COMPCTRL 0 Synchronization Busy    */
    uint32_t COMPCTRL1:1; /*!< bit:      4  COMPCTRL 1 Synchronization Busy    */
    uint32_t :27; /*!< bit:  5..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :3; /*!< bit:  0.. 2  Reserved                           */
    uint32_t COMPCTRL:2; /*!< bit:  3.. 4  COMPCTRL x Synchronization Busy    */
    uint32_t :27; /*!< bit:  5..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} AC_SYNCBUSY_Type;
# 553 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/* -------- AC_CALIB : (AC Offset: 0x24) (R/W 16) Calibration -------- */

typedef union {
  struct {
    uint16_t BIAS0:2; /*!< bit:  0.. 1  COMP0/1 Bias Scaling               */
    uint16_t :14; /*!< bit:  2..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} AC_CALIB_Type;
# 572 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ac.h"
/** \brief AC hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ AC_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W  8) Control A */
  volatile /*!< Defines 'write only' permissions */ AC_CTRLB_Type CTRLB; /**< \brief Offset: 0x01 ( /W  8) Control B */
  volatile /*!< Defines 'read / write' permissions */ AC_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x02 (R/W 16) Event Control */
  volatile /*!< Defines 'read / write' permissions */ AC_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x04 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ AC_INTENSET_Type INTENSET; /**< \brief Offset: 0x05 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ AC_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x06 (R/W  8) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read only' permissions */ AC_STATUSA_Type STATUSA; /**< \brief Offset: 0x07 (R/   8) Status A */
  volatile /*!< Defines 'read only' permissions */ AC_STATUSB_Type STATUSB; /**< \brief Offset: 0x08 (R/   8) Status B */
  volatile /*!< Defines 'read / write' permissions */ AC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x09 (R/W  8) Debug Control */
  volatile /*!< Defines 'read / write' permissions */ AC_WINCTRL_Type WINCTRL; /**< \brief Offset: 0x0A (R/W  8) Window Control */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read / write' permissions */ AC_SCALER_Type SCALER[2]; /**< \brief Offset: 0x0C (R/W  8) Scaler n */
       RoReg8 Reserved2[0x2];
  volatile /*!< Defines 'read / write' permissions */ AC_COMPCTRL_Type COMPCTRL[2]; /**< \brief Offset: 0x10 (R/W 32) Comparator Control n */
       RoReg8 Reserved3[0x8];
  volatile /*!< Defines 'read only' permissions */ AC_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x20 (R/  32) Synchronization Busy */
  volatile /*!< Defines 'read / write' permissions */ AC_CALIB_Type CALIB; /**< \brief Offset: 0x24 (R/W 16) Calibration */
} Ac;


/*@}*/
# 577 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h" 1
/**
 * \file
 *
 * \brief Component description for ADC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR ADC */
/* ========================================================================== */
/** \addtogroup SAMD51_ADC Analog Digital Converter */
/*@{*/




/* -------- ADC_CTRLA : (ADC Offset: 0x00) (R/W 16) Control A -------- */

typedef union {
  struct {
    uint16_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint16_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint16_t :1; /*!< bit:      2  Reserved                           */
    uint16_t DUALSEL:2; /*!< bit:  3.. 4  Dual Mode Trigger Selection        */
    uint16_t SLAVEEN:1; /*!< bit:      5  Slave Enable                       */
    uint16_t RUNSTDBY:1; /*!< bit:      6  Run in Standby                     */
    uint16_t ONDEMAND:1; /*!< bit:      7  On Demand Control                  */
    uint16_t PRESCALER:3; /*!< bit:  8..10  Prescaler Configuration            */
    uint16_t :4; /*!< bit: 11..14  Reserved                           */
    uint16_t R2R:1; /*!< bit:     15  Rail to Rail Operation Enable      */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} ADC_CTRLA_Type;
# 103 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_EVCTRL : (ADC Offset: 0x02) (R/W  8) Event Control -------- */

typedef union {
  struct {
    uint8_t FLUSHEI:1; /*!< bit:      0  Flush Event Input Enable           */
    uint8_t STARTEI:1; /*!< bit:      1  Start Conversion Event Input Enable */
    uint8_t FLUSHINV:1; /*!< bit:      2  Flush Event Invert Enable          */
    uint8_t STARTINV:1; /*!< bit:      3  Start Conversion Event Invert Enable */
    uint8_t RESRDYEO:1; /*!< bit:      4  Result Ready Event Out             */
    uint8_t WINMONEO:1; /*!< bit:      5  Window Monitor Event Out           */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} ADC_EVCTRL_Type;
# 136 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_DBGCTRL : (ADC Offset: 0x03) (R/W  8) Debug Control -------- */

typedef union {
  struct {
    uint8_t DBGRUN:1; /*!< bit:      0  Debug Run                          */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} ADC_DBGCTRL_Type;
# 154 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_INPUTCTRL : (ADC Offset: 0x04) (R/W 16) Input Control -------- */

typedef union {
  struct {
    uint16_t MUXPOS:5; /*!< bit:  0.. 4  Positive Mux Input Selection       */
    uint16_t :2; /*!< bit:  5.. 6  Reserved                           */
    uint16_t DIFFMODE:1; /*!< bit:      7  Differential Mode                  */
    uint16_t MUXNEG:5; /*!< bit:  8..12  Negative Mux Input Selection       */
    uint16_t :2; /*!< bit: 13..14  Reserved                           */
    uint16_t DSEQSTOP:1; /*!< bit:     15  Stop DMA Sequencing                */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} ADC_INPUTCTRL_Type;
# 266 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_CTRLB : (ADC Offset: 0x06) (R/W 16) Control B -------- */

typedef union {
  struct {
    uint16_t LEFTADJ:1; /*!< bit:      0  Left-Adjusted Result               */
    uint16_t FREERUN:1; /*!< bit:      1  Free Running Mode                  */
    uint16_t CORREN:1; /*!< bit:      2  Digital Correction Logic Enable    */
    uint16_t RESSEL:2; /*!< bit:  3.. 4  Conversion Result Resolution       */
    uint16_t :3; /*!< bit:  5.. 7  Reserved                           */
    uint16_t WINMODE:3; /*!< bit:  8..10  Window Monitor Mode                */
    uint16_t WINSS:1; /*!< bit:     11  Window Single Sample               */
    uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} ADC_CTRLB_Type;
# 320 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_REFCTRL : (ADC Offset: 0x08) (R/W  8) Reference Control -------- */

typedef union {
  struct {
    uint8_t REFSEL:4; /*!< bit:  0.. 3  Reference Selection                */
    uint8_t :3; /*!< bit:  4.. 6  Reserved                           */
    uint8_t REFCOMP:1; /*!< bit:      7  Reference Buffer Offset Compensation Enable */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} ADC_REFCTRL_Type;
# 354 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_AVGCTRL : (ADC Offset: 0x0A) (R/W  8) Average Control -------- */

typedef union {
  struct {
    uint8_t SAMPLENUM:4; /*!< bit:  0.. 3  Number of Samples to be Collected  */
    uint8_t ADJRES:3; /*!< bit:  4.. 6  Adjusting Result / Division Coefficient */
    uint8_t :1; /*!< bit:      7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} ADC_AVGCTRL_Type;
# 399 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_SAMPCTRL : (ADC Offset: 0x0B) (R/W  8) Sample Time Control -------- */

typedef union {
  struct {
    uint8_t SAMPLEN:6; /*!< bit:  0.. 5  Sampling Time Length               */
    uint8_t :1; /*!< bit:      6  Reserved                           */
    uint8_t OFFCOMP:1; /*!< bit:      7  Comparator Offset Compensation Enable */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} ADC_SAMPCTRL_Type;
# 421 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_WINLT : (ADC Offset: 0x0C) (R/W 16) Window Monitor Lower Threshold -------- */

typedef union {
  struct {
    uint16_t WINLT:16; /*!< bit:  0..15  Window Lower Threshold             */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} ADC_WINLT_Type;
# 439 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_WINUT : (ADC Offset: 0x0E) (R/W 16) Window Monitor Upper Threshold -------- */

typedef union {
  struct {
    uint16_t WINUT:16; /*!< bit:  0..15  Window Upper Threshold             */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} ADC_WINUT_Type;
# 457 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_GAINCORR : (ADC Offset: 0x10) (R/W 16) Gain Correction -------- */

typedef union {
  struct {
    uint16_t GAINCORR:12; /*!< bit:  0..11  Gain Correction Value              */
    uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} ADC_GAINCORR_Type;
# 476 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_OFFSETCORR : (ADC Offset: 0x12) (R/W 16) Offset Correction -------- */

typedef union {
  struct {
    uint16_t OFFSETCORR:12; /*!< bit:  0..11  Offset Correction Value            */
    uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} ADC_OFFSETCORR_Type;
# 495 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_SWTRIG : (ADC Offset: 0x14) (R/W  8) Software Trigger -------- */

typedef union {
  struct {
    uint8_t FLUSH:1; /*!< bit:      0  ADC Conversion Flush               */
    uint8_t START:1; /*!< bit:      1  Start ADC Conversion               */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} ADC_SWTRIG_Type;
# 516 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_INTENCLR : (ADC Offset: 0x2C) (R/W  8) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t RESRDY:1; /*!< bit:      0  Result Ready Interrupt Disable     */
    uint8_t OVERRUN:1; /*!< bit:      1  Overrun Interrupt Disable          */
    uint8_t WINMON:1; /*!< bit:      2  Window Monitor Interrupt Disable   */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} ADC_INTENCLR_Type;
# 540 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_INTENSET : (ADC Offset: 0x2D) (R/W  8) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t RESRDY:1; /*!< bit:      0  Result Ready Interrupt Enable      */
    uint8_t OVERRUN:1; /*!< bit:      1  Overrun Interrupt Enable           */
    uint8_t WINMON:1; /*!< bit:      2  Window Monitor Interrupt Enable    */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} ADC_INTENSET_Type;
# 564 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_INTFLAG : (ADC Offset: 0x2E) (R/W  8) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t RESRDY:1; /*!< bit:      0  Result Ready Interrupt Flag        */
    volatile /*!< Defines 'read only' permissions */ uint8_t OVERRUN:1; /*!< bit:      1  Overrun Interrupt Flag             */
    volatile /*!< Defines 'read only' permissions */ uint8_t WINMON:1; /*!< bit:      2  Window Monitor Interrupt Flag      */
    volatile /*!< Defines 'read only' permissions */ uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} ADC_INTFLAG_Type;
# 588 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_STATUS : (ADC Offset: 0x2F) (R/   8) Status -------- */

typedef union {
  struct {
    uint8_t ADCBUSY:1; /*!< bit:      0  ADC Busy Status                    */
    uint8_t :1; /*!< bit:      1  Reserved                           */
    uint8_t WCC:6; /*!< bit:  2.. 7  Window Comparator Counter          */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} ADC_STATUS_Type;
# 610 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_SYNCBUSY : (ADC Offset: 0x30) (R/  32) Synchronization Busy -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  SWRST Synchronization Busy         */
    uint32_t ENABLE:1; /*!< bit:      1  ENABLE Synchronization Busy        */
    uint32_t INPUTCTRL:1; /*!< bit:      2  Input Control Synchronization Busy */
    uint32_t CTRLB:1; /*!< bit:      3  Control B Synchronization Busy     */
    uint32_t REFCTRL:1; /*!< bit:      4  Reference Control Synchronization Busy */
    uint32_t AVGCTRL:1; /*!< bit:      5  Average Control Synchronization Busy */
    uint32_t SAMPCTRL:1; /*!< bit:      6  Sampling Time Control Synchronization Busy */
    uint32_t WINLT:1; /*!< bit:      7  Window Monitor Lower Threshold Synchronization Busy */
    uint32_t WINUT:1; /*!< bit:      8  Window Monitor Upper Threshold Synchronization Busy */
    uint32_t GAINCORR:1; /*!< bit:      9  Gain Correction Synchronization Busy */
    uint32_t OFFSETCORR:1; /*!< bit:     10  Offset Correction Synchronization Busy */
    uint32_t SWTRIG:1; /*!< bit:     11  Software Trigger Synchronization Busy */
    uint32_t :20; /*!< bit: 12..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ADC_SYNCBUSY_Type;
# 661 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_DSEQDATA : (ADC Offset: 0x34) ( /W 32) DMA Sequencial Data -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  DMA Sequential Data                */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ADC_DSEQDATA_Type;
# 679 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_DSEQCTRL : (ADC Offset: 0x38) (R/W 32) DMA Sequential Control -------- */

typedef union {
  struct {
    uint32_t INPUTCTRL:1; /*!< bit:      0  Input Control                      */
    uint32_t CTRLB:1; /*!< bit:      1  Control B                          */
    uint32_t REFCTRL:1; /*!< bit:      2  Reference Control                  */
    uint32_t AVGCTRL:1; /*!< bit:      3  Average Control                    */
    uint32_t SAMPCTRL:1; /*!< bit:      4  Sampling Time Control              */
    uint32_t WINLT:1; /*!< bit:      5  Window Monitor Lower Threshold     */
    uint32_t WINUT:1; /*!< bit:      6  Window Monitor Upper Threshold     */
    uint32_t GAINCORR:1; /*!< bit:      7  Gain Correction                    */
    uint32_t OFFSETCORR:1; /*!< bit:      8  Offset Correction                  */
    uint32_t :22; /*!< bit:  9..30  Reserved                           */
    uint32_t AUTOSTART:1; /*!< bit:     31  ADC Auto-Start Conversion          */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ADC_DSEQCTRL_Type;
# 724 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_DSEQSTAT : (ADC Offset: 0x3C) (R/  32) DMA Sequencial Status -------- */

typedef union {
  struct {
    uint32_t INPUTCTRL:1; /*!< bit:      0  Input Control                      */
    uint32_t CTRLB:1; /*!< bit:      1  Control B                          */
    uint32_t REFCTRL:1; /*!< bit:      2  Reference Control                  */
    uint32_t AVGCTRL:1; /*!< bit:      3  Average Control                    */
    uint32_t SAMPCTRL:1; /*!< bit:      4  Sampling Time Control              */
    uint32_t WINLT:1; /*!< bit:      5  Window Monitor Lower Threshold     */
    uint32_t WINUT:1; /*!< bit:      6  Window Monitor Upper Threshold     */
    uint32_t GAINCORR:1; /*!< bit:      7  Gain Correction                    */
    uint32_t OFFSETCORR:1; /*!< bit:      8  Offset Correction                  */
    uint32_t :22; /*!< bit:  9..30  Reserved                           */
    uint32_t BUSY:1; /*!< bit:     31  DMA Sequencing Busy                */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ADC_DSEQSTAT_Type;
# 769 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_RESULT : (ADC Offset: 0x40) (R/  16) Result Conversion Value -------- */

typedef union {
  struct {
    uint16_t RESULT:16; /*!< bit:  0..15  Result Conversion Value            */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} ADC_RESULT_Type;
# 787 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_RESS : (ADC Offset: 0x44) (R/  16) Last Sample Result -------- */

typedef union {
  struct {
    uint16_t RESS:16; /*!< bit:  0..15  Last ADC conversion result         */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} ADC_RESS_Type;
# 805 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/* -------- ADC_CALIB : (ADC Offset: 0x48) (R/W 16) Calibration -------- */

typedef union {
  struct {
    uint16_t BIASCOMP:3; /*!< bit:  0.. 2  Bias Comparator Scaling            */
    uint16_t :1; /*!< bit:      3  Reserved                           */
    uint16_t BIASR2R:3; /*!< bit:  4.. 6  Bias R2R Ampli scaling             */
    uint16_t :1; /*!< bit:      7  Reserved                           */
    uint16_t BIASREFBUF:3; /*!< bit:  8..10  Bias  Reference Buffer Scaling     */
    uint16_t :5; /*!< bit: 11..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} ADC_CALIB_Type;
# 834 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/adc.h"
/** \brief ADC hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ ADC_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 16) Control A */
  volatile /*!< Defines 'read / write' permissions */ ADC_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x02 (R/W  8) Event Control */
  volatile /*!< Defines 'read / write' permissions */ ADC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x03 (R/W  8) Debug Control */
  volatile /*!< Defines 'read / write' permissions */ ADC_INPUTCTRL_Type INPUTCTRL; /**< \brief Offset: 0x04 (R/W 16) Input Control */
  volatile /*!< Defines 'read / write' permissions */ ADC_CTRLB_Type CTRLB; /**< \brief Offset: 0x06 (R/W 16) Control B */
  volatile /*!< Defines 'read / write' permissions */ ADC_REFCTRL_Type REFCTRL; /**< \brief Offset: 0x08 (R/W  8) Reference Control */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read / write' permissions */ ADC_AVGCTRL_Type AVGCTRL; /**< \brief Offset: 0x0A (R/W  8) Average Control */
  volatile /*!< Defines 'read / write' permissions */ ADC_SAMPCTRL_Type SAMPCTRL; /**< \brief Offset: 0x0B (R/W  8) Sample Time Control */
  volatile /*!< Defines 'read / write' permissions */ ADC_WINLT_Type WINLT; /**< \brief Offset: 0x0C (R/W 16) Window Monitor Lower Threshold */
  volatile /*!< Defines 'read / write' permissions */ ADC_WINUT_Type WINUT; /**< \brief Offset: 0x0E (R/W 16) Window Monitor Upper Threshold */
  volatile /*!< Defines 'read / write' permissions */ ADC_GAINCORR_Type GAINCORR; /**< \brief Offset: 0x10 (R/W 16) Gain Correction */
  volatile /*!< Defines 'read / write' permissions */ ADC_OFFSETCORR_Type OFFSETCORR; /**< \brief Offset: 0x12 (R/W 16) Offset Correction */
  volatile /*!< Defines 'read / write' permissions */ ADC_SWTRIG_Type SWTRIG; /**< \brief Offset: 0x14 (R/W  8) Software Trigger */
       RoReg8 Reserved2[0x17];
  volatile /*!< Defines 'read / write' permissions */ ADC_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x2C (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ ADC_INTENSET_Type INTENSET; /**< \brief Offset: 0x2D (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ ADC_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x2E (R/W  8) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read only' permissions */ ADC_STATUS_Type STATUS; /**< \brief Offset: 0x2F (R/   8) Status */
  volatile /*!< Defines 'read only' permissions */ ADC_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x30 (R/  32) Synchronization Busy */
  volatile /*!< Defines 'write only' permissions */ ADC_DSEQDATA_Type DSEQDATA; /**< \brief Offset: 0x34 ( /W 32) DMA Sequencial Data */
  volatile /*!< Defines 'read / write' permissions */ ADC_DSEQCTRL_Type DSEQCTRL; /**< \brief Offset: 0x38 (R/W 32) DMA Sequential Control */
  volatile /*!< Defines 'read only' permissions */ ADC_DSEQSTAT_Type DSEQSTAT; /**< \brief Offset: 0x3C (R/  32) DMA Sequencial Status */
  volatile /*!< Defines 'read only' permissions */ ADC_RESULT_Type RESULT; /**< \brief Offset: 0x40 (R/  16) Result Conversion Value */
       RoReg8 Reserved3[0x2];
  volatile /*!< Defines 'read only' permissions */ ADC_RESS_Type RESS; /**< \brief Offset: 0x44 (R/  16) Last Sample Result */
       RoReg8 Reserved4[0x2];
  volatile /*!< Defines 'read / write' permissions */ ADC_CALIB_Type CALIB; /**< \brief Offset: 0x48 (R/W 16) Calibration */
} Adc;


/*@}*/
# 578 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/aes.h" 1
/**
 * \file
 *
 * \brief Component description for AES
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR AES */
/* ========================================================================== */
/** \addtogroup SAMD51_AES Advanced Encryption Standard */
/*@{*/




/* -------- AES_CTRLA : (AES Offset: 0x00) (R/W 32) Control A -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t AESMODE:3; /*!< bit:  2.. 4  AES Modes of operation             */
    uint32_t CFBS:3; /*!< bit:  5.. 7  Cipher Feedback Block Size         */
    uint32_t KEYSIZE:2; /*!< bit:  8.. 9  Encryption Key Size                */
    uint32_t CIPHER:1; /*!< bit:     10  Cipher Mode                        */
    uint32_t STARTMODE:1; /*!< bit:     11  Start Mode Select                  */
    uint32_t LOD:1; /*!< bit:     12  Last Output Data Mode              */
    uint32_t KEYGEN:1; /*!< bit:     13  Last Key Generation                */
    uint32_t XORKEY:1; /*!< bit:     14  XOR Key Operation                  */
    uint32_t :1; /*!< bit:     15  Reserved                           */
    uint32_t CTYPE:4; /*!< bit: 16..19  Counter Measure Type               */
    uint32_t :12; /*!< bit: 20..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} AES_CTRLA_Type;
# 144 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/aes.h"
/* -------- AES_CTRLB : (AES Offset: 0x04) (R/W  8) Control B -------- */

typedef union {
  struct {
    uint8_t START:1; /*!< bit:      0  Start Encryption/Decryption        */
    uint8_t NEWMSG:1; /*!< bit:      1  New message                        */
    uint8_t EOM:1; /*!< bit:      2  End of message                     */
    uint8_t GFMUL:1; /*!< bit:      3  GF Multiplication                  */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AES_CTRLB_Type;
# 171 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/aes.h"
/* -------- AES_INTENCLR : (AES Offset: 0x05) (R/W  8) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t ENCCMP:1; /*!< bit:      0  Encryption Complete Interrupt Enable */
    uint8_t GFMCMP:1; /*!< bit:      1  GF Multiplication Complete Interrupt Enable */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AES_INTENCLR_Type;
# 192 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/aes.h"
/* -------- AES_INTENSET : (AES Offset: 0x06) (R/W  8) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t ENCCMP:1; /*!< bit:      0  Encryption Complete Interrupt Enable */
    uint8_t GFMCMP:1; /*!< bit:      1  GF Multiplication Complete Interrupt Enable */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AES_INTENSET_Type;
# 213 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/aes.h"
/* -------- AES_INTFLAG : (AES Offset: 0x07) (R/W  8) Interrupt Flag Status -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t ENCCMP:1; /*!< bit:      0  Encryption Complete                */
    volatile /*!< Defines 'read only' permissions */ uint8_t GFMCMP:1; /*!< bit:      1  GF Multiplication Complete         */
    volatile /*!< Defines 'read only' permissions */ uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AES_INTFLAG_Type;
# 234 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/aes.h"
/* -------- AES_DATABUFPTR : (AES Offset: 0x08) (R/W  8) Data buffer pointer -------- */

typedef union {
  struct {
    uint8_t INDATAPTR:2; /*!< bit:  0.. 1  Input Data Pointer                 */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AES_DATABUFPTR_Type;
# 253 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/aes.h"
/* -------- AES_DBGCTRL : (AES Offset: 0x09) (R/W  8) Debug control -------- */

typedef union {
  struct {
    uint8_t DBGRUN:1; /*!< bit:      0  Debug Run                          */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} AES_DBGCTRL_Type;
# 271 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/aes.h"
/* -------- AES_KEYWORD : (AES Offset: 0x0C) ( /W 32) Keyword n -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} AES_KEYWORD_Type;






/* -------- AES_INDATA : (AES Offset: 0x38) (R/W 32) Indata -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} AES_INDATA_Type;






/* -------- AES_INTVECTV : (AES Offset: 0x3C) ( /W 32) Initialisation Vector n -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} AES_INTVECTV_Type;






/* -------- AES_HASHKEY : (AES Offset: 0x5C) (R/W 32) Hash key n -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} AES_HASHKEY_Type;






/* -------- AES_GHASH : (AES Offset: 0x6C) (R/W 32) Galois Hash n -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} AES_GHASH_Type;






/* -------- AES_CIPLEN : (AES Offset: 0x80) (R/W 32) Cipher Length -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} AES_CIPLEN_Type;






/* -------- AES_RANDSEED : (AES Offset: 0x84) (R/W 32) Random Seed -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} AES_RANDSEED_Type;






/** \brief AES hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ AES_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 32) Control A */
  volatile /*!< Defines 'read / write' permissions */ AES_CTRLB_Type CTRLB; /**< \brief Offset: 0x04 (R/W  8) Control B */
  volatile /*!< Defines 'read / write' permissions */ AES_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x05 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ AES_INTENSET_Type INTENSET; /**< \brief Offset: 0x06 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ AES_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x07 (R/W  8) Interrupt Flag Status */
  volatile /*!< Defines 'read / write' permissions */ AES_DATABUFPTR_Type DATABUFPTR; /**< \brief Offset: 0x08 (R/W  8) Data buffer pointer */
  volatile /*!< Defines 'read / write' permissions */ AES_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x09 (R/W  8) Debug control */
       RoReg8 Reserved1[0x2];
  volatile /*!< Defines 'write only' permissions */ AES_KEYWORD_Type KEYWORD[8]; /**< \brief Offset: 0x0C ( /W 32) Keyword n */
       RoReg8 Reserved2[0xC];
  volatile /*!< Defines 'read / write' permissions */ AES_INDATA_Type INDATA; /**< \brief Offset: 0x38 (R/W 32) Indata */
  volatile /*!< Defines 'write only' permissions */ AES_INTVECTV_Type INTVECTV[4]; /**< \brief Offset: 0x3C ( /W 32) Initialisation Vector n */
       RoReg8 Reserved3[0x10];
  volatile /*!< Defines 'read / write' permissions */ AES_HASHKEY_Type HASHKEY[4]; /**< \brief Offset: 0x5C (R/W 32) Hash key n */
  volatile /*!< Defines 'read / write' permissions */ AES_GHASH_Type GHASH[4]; /**< \brief Offset: 0x6C (R/W 32) Galois Hash n */
       RoReg8 Reserved4[0x4];
  volatile /*!< Defines 'read / write' permissions */ AES_CIPLEN_Type CIPLEN; /**< \brief Offset: 0x80 (R/W 32) Cipher Length */
  volatile /*!< Defines 'read / write' permissions */ AES_RANDSEED_Type RANDSEED; /**< \brief Offset: 0x84 (R/W 32) Random Seed */
} Aes;


/*@}*/
# 579 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ccl.h" 1
/**
 * \file
 *
 * \brief Component description for CCL
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR CCL */
/* ========================================================================== */
/** \addtogroup SAMD51_CCL Configurable Custom Logic */
/*@{*/




/* -------- CCL_CTRL : (CCL Offset: 0x0) (R/W  8) Control -------- */

typedef union {
  struct {
    uint8_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint8_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint8_t :4; /*!< bit:  2.. 5  Reserved                           */
    uint8_t RUNSTDBY:1; /*!< bit:      6  Run in Standby                     */
    uint8_t :1; /*!< bit:      7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} CCL_CTRL_Type;
# 66 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ccl.h"
/* -------- CCL_SEQCTRL : (CCL Offset: 0x4) (R/W  8) SEQ Control x -------- */

typedef union {
  struct {
    uint8_t SEQSEL:4; /*!< bit:  0.. 3  Sequential Selection               */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} CCL_SEQCTRL_Type;
# 95 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ccl.h"
/* -------- CCL_LUTCTRL : (CCL Offset: 0x8) (R/W 32) LUT Control x -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t ENABLE:1; /*!< bit:      1  LUT Enable                         */
    uint32_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint32_t FILTSEL:2; /*!< bit:  4.. 5  Filter Selection                   */
    uint32_t :1; /*!< bit:      6  Reserved                           */
    uint32_t EDGESEL:1; /*!< bit:      7  Edge Selection                     */
    uint32_t INSEL0:4; /*!< bit:  8..11  Input Selection 0                  */
    uint32_t INSEL1:4; /*!< bit: 12..15  Input Selection 1                  */
    uint32_t INSEL2:4; /*!< bit: 16..19  Input Selection 2                  */
    uint32_t INVEI:1; /*!< bit:     20  Inverted Event Input Enable        */
    uint32_t LUTEI:1; /*!< bit:     21  LUT Event Input Enable             */
    uint32_t LUTEO:1; /*!< bit:     22  LUT Event Output Enable            */
    uint32_t :1; /*!< bit:     23  Reserved                           */
    uint32_t TRUTH:8; /*!< bit: 24..31  Truth Value                        */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} CCL_LUTCTRL_Type;
# 214 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ccl.h"
/** \brief CCL hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ CCL_CTRL_Type CTRL; /**< \brief Offset: 0x0 (R/W  8) Control */
       RoReg8 Reserved1[0x3];
  volatile /*!< Defines 'read / write' permissions */ CCL_SEQCTRL_Type SEQCTRL[2]; /**< \brief Offset: 0x4 (R/W  8) SEQ Control x */
       RoReg8 Reserved2[0x2];
  volatile /*!< Defines 'read / write' permissions */ CCL_LUTCTRL_Type LUTCTRL[4]; /**< \brief Offset: 0x8 (R/W 32) LUT Control x */
} Ccl;


/*@}*/
# 580 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/cmcc.h" 1
/**
 * \file
 *
 * \brief Component description for CMCC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR CMCC */
/* ========================================================================== */
/** \addtogroup SAMD51_CMCC Cortex M Cache Controller */
/*@{*/




/* -------- CMCC_TYPE : (CMCC Offset: 0x00) (R/  32) Cache Type Register -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t GCLK:1; /*!< bit:      1  dynamic Clock Gating supported     */
    uint32_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint32_t RRP:1; /*!< bit:      4  Round Robin Policy supported       */
    uint32_t WAYNUM:2; /*!< bit:  5.. 6  Number of Way                      */
    uint32_t LCKDOWN:1; /*!< bit:      7  Lock Down supported                */
    uint32_t CSIZE:3; /*!< bit:  8..10  Cache Size                         */
    uint32_t CLSIZE:3; /*!< bit: 11..13  Cache Line Size                    */
    uint32_t :18; /*!< bit: 14..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} CMCC_TYPE_Type;
# 111 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/cmcc.h"
/* -------- CMCC_CFG : (CMCC Offset: 0x04) (R/W 32) Cache Configuration Register -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t ICDIS:1; /*!< bit:      1  Instruction Cache Disable          */
    uint32_t DCDIS:1; /*!< bit:      2  Data Cache Disable                 */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t CSIZESW:3; /*!< bit:  4.. 6  Cache size configured by software  */
    uint32_t :25; /*!< bit:  7..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} CMCC_CFG_Type;
# 152 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/cmcc.h"
/* -------- CMCC_CTRL : (CMCC Offset: 0x08) ( /W 32) Cache Control Register -------- */

typedef union {
  struct {
    uint32_t CEN:1; /*!< bit:      0  Cache Controller Enable            */
    uint32_t :31; /*!< bit:  1..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} CMCC_CTRL_Type;
# 170 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/cmcc.h"
/* -------- CMCC_SR : (CMCC Offset: 0x0C) (R/  32) Cache Status Register -------- */

typedef union {
  struct {
    uint32_t CSTS:1; /*!< bit:      0  Cache Controller Status            */
    uint32_t :31; /*!< bit:  1..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} CMCC_SR_Type;
# 188 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/cmcc.h"
/* -------- CMCC_LCKWAY : (CMCC Offset: 0x10) (R/W 32) Cache Lock per Way Register -------- */

typedef union {
  struct {
    uint32_t LCKWAY:4; /*!< bit:  0.. 3  Lockdown way Register              */
    uint32_t :28; /*!< bit:  4..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} CMCC_LCKWAY_Type;
# 207 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/cmcc.h"
/* -------- CMCC_MAINT0 : (CMCC Offset: 0x20) ( /W 32) Cache Maintenance Register 0 -------- */

typedef union {
  struct {
    uint32_t INVALL:1; /*!< bit:      0  Cache Controller invalidate All    */
    uint32_t :31; /*!< bit:  1..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} CMCC_MAINT0_Type;
# 225 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/cmcc.h"
/* -------- CMCC_MAINT1 : (CMCC Offset: 0x24) ( /W 32) Cache Maintenance Register 1 -------- */

typedef union {
  struct {
    uint32_t :4; /*!< bit:  0.. 3  Reserved                           */
    uint32_t INDEX:8; /*!< bit:  4..11  Invalidate Index                   */
    uint32_t :16; /*!< bit: 12..27  Reserved                           */
    uint32_t WAY:4; /*!< bit: 28..31  Invalidate Way                     */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} CMCC_MAINT1_Type;
# 257 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/cmcc.h"
/* -------- CMCC_MCFG : (CMCC Offset: 0x28) (R/W 32) Cache Monitor Configuration Register -------- */

typedef union {
  struct {
    uint32_t MODE:2; /*!< bit:  0.. 1  Cache Controller Monitor Counter Mode */
    uint32_t :30; /*!< bit:  2..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} CMCC_MCFG_Type;
# 282 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/cmcc.h"
/* -------- CMCC_MEN : (CMCC Offset: 0x2C) (R/W 32) Cache Monitor Enable Register -------- */

typedef union {
  struct {
    uint32_t MENABLE:1; /*!< bit:      0  Cache Controller Monitor Enable    */
    uint32_t :31; /*!< bit:  1..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} CMCC_MEN_Type;
# 300 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/cmcc.h"
/* -------- CMCC_MCTRL : (CMCC Offset: 0x30) ( /W 32) Cache Monitor Control Register -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Cache Controller Software Reset    */
    uint32_t :31; /*!< bit:  1..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} CMCC_MCTRL_Type;
# 318 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/cmcc.h"
/* -------- CMCC_MSR : (CMCC Offset: 0x34) (R/  32) Cache Monitor Status Register -------- */

typedef union {
  struct {
    uint32_t EVENT_CNT:32; /*!< bit:  0..31  Monitor Event Counter              */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} CMCC_MSR_Type;
# 336 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/cmcc.h"
/** \brief CMCC APB hardware registers */

typedef struct {
  volatile /*!< Defines 'read only' permissions */ CMCC_TYPE_Type TYPE; /**< \brief Offset: 0x00 (R/  32) Cache Type Register */
  volatile /*!< Defines 'read / write' permissions */ CMCC_CFG_Type CFG; /**< \brief Offset: 0x04 (R/W 32) Cache Configuration Register */
  volatile /*!< Defines 'write only' permissions */ CMCC_CTRL_Type CTRL; /**< \brief Offset: 0x08 ( /W 32) Cache Control Register */
  volatile /*!< Defines 'read only' permissions */ CMCC_SR_Type SR; /**< \brief Offset: 0x0C (R/  32) Cache Status Register */
  volatile /*!< Defines 'read / write' permissions */ CMCC_LCKWAY_Type LCKWAY; /**< \brief Offset: 0x10 (R/W 32) Cache Lock per Way Register */
       RoReg8 Reserved1[0xC];
  volatile /*!< Defines 'write only' permissions */ CMCC_MAINT0_Type MAINT0; /**< \brief Offset: 0x20 ( /W 32) Cache Maintenance Register 0 */
  volatile /*!< Defines 'write only' permissions */ CMCC_MAINT1_Type MAINT1; /**< \brief Offset: 0x24 ( /W 32) Cache Maintenance Register 1 */
  volatile /*!< Defines 'read / write' permissions */ CMCC_MCFG_Type MCFG; /**< \brief Offset: 0x28 (R/W 32) Cache Monitor Configuration Register */
  volatile /*!< Defines 'read / write' permissions */ CMCC_MEN_Type MEN; /**< \brief Offset: 0x2C (R/W 32) Cache Monitor Enable Register */
  volatile /*!< Defines 'write only' permissions */ CMCC_MCTRL_Type MCTRL; /**< \brief Offset: 0x30 ( /W 32) Cache Monitor Control Register */
  volatile /*!< Defines 'read only' permissions */ CMCC_MSR_Type MSR; /**< \brief Offset: 0x34 (R/  32) Cache Monitor Status Register */
} Cmcc;


/*@}*/
# 581 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h" 1
/**
 * \file
 *
 * \brief Component description for DAC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR DAC */
/* ========================================================================== */
/** \addtogroup SAMD51_DAC Digital-to-Analog Converter */
/*@{*/




/* -------- DAC_CTRLA : (DAC Offset: 0x00) (R/W  8) Control A -------- */

typedef union {
  struct {
    uint8_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint8_t ENABLE:1; /*!< bit:      1  Enable DAC Controller              */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DAC_CTRLA_Type;
# 62 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/* -------- DAC_CTRLB : (DAC Offset: 0x01) (R/W  8) Control B -------- */

typedef union {
  struct {
    uint8_t DIFF:1; /*!< bit:      0  Differential mode enable           */
    uint8_t REFSEL:2; /*!< bit:  1.. 2  Reference Selection for DAC0/1     */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DAC_CTRLB_Type;
# 92 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/* -------- DAC_EVCTRL : (DAC Offset: 0x02) (R/W  8) Event Control -------- */

typedef union {
  struct {
    uint8_t STARTEI0:1; /*!< bit:      0  Start Conversion Event Input DAC 0 */
    uint8_t STARTEI1:1; /*!< bit:      1  Start Conversion Event Input DAC 1 */
    uint8_t EMPTYEO0:1; /*!< bit:      2  Data Buffer Empty Event Output DAC 0 */
    uint8_t EMPTYEO1:1; /*!< bit:      3  Data Buffer Empty Event Output DAC 1 */
    uint8_t INVEI0:1; /*!< bit:      4  Enable Invertion of DAC 0 input event */
    uint8_t INVEI1:1; /*!< bit:      5  Enable Invertion of DAC 1 input event */
    uint8_t RESRDYEO0:1; /*!< bit:      6  Result Ready Event Output 0        */
    uint8_t RESRDYEO1:1; /*!< bit:      7  Result Ready Event Output 1        */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t STARTEI:2; /*!< bit:  0.. 1  Start Conversion Event Input DAC x */
    uint8_t EMPTYEO:2; /*!< bit:  2.. 3  Data Buffer Empty Event Output DAC x */
    uint8_t INVEI:2; /*!< bit:  4.. 5  Enable Invertion of DAC x input event */
    uint8_t RESRDYEO:2; /*!< bit:  6.. 7  Result Ready Event Output x        */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DAC_EVCTRL_Type;
# 148 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/* -------- DAC_INTENCLR : (DAC Offset: 0x04) (R/W  8) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t UNDERRUN0:1; /*!< bit:      0  Underrun 0 Interrupt Enable        */
    uint8_t UNDERRUN1:1; /*!< bit:      1  Underrun 1 Interrupt Enable        */
    uint8_t EMPTY0:1; /*!< bit:      2  Data Buffer 0 Empty Interrupt Enable */
    uint8_t EMPTY1:1; /*!< bit:      3  Data Buffer 1 Empty Interrupt Enable */
    uint8_t RESRDY0:1; /*!< bit:      4  Result 0 Ready Interrupt Enable    */
    uint8_t RESRDY1:1; /*!< bit:      5  Result 1 Ready Interrupt Enable    */
    uint8_t OVERRUN0:1; /*!< bit:      6  Overrun 0 Interrupt Enable         */
    uint8_t OVERRUN1:1; /*!< bit:      7  Overrun 1 Interrupt Enable         */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t UNDERRUN:2; /*!< bit:  0.. 1  Underrun x Interrupt Enable        */
    uint8_t EMPTY:2; /*!< bit:  2.. 3  Data Buffer x Empty Interrupt Enable */
    uint8_t RESRDY:2; /*!< bit:  4.. 5  Result x Ready Interrupt Enable    */
    uint8_t OVERRUN:2; /*!< bit:  6.. 7  Overrun x Interrupt Enable         */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DAC_INTENCLR_Type;
# 204 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/* -------- DAC_INTENSET : (DAC Offset: 0x05) (R/W  8) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t UNDERRUN0:1; /*!< bit:      0  Underrun 0 Interrupt Enable        */
    uint8_t UNDERRUN1:1; /*!< bit:      1  Underrun 1 Interrupt Enable        */
    uint8_t EMPTY0:1; /*!< bit:      2  Data Buffer 0 Empty Interrupt Enable */
    uint8_t EMPTY1:1; /*!< bit:      3  Data Buffer 1 Empty Interrupt Enable */
    uint8_t RESRDY0:1; /*!< bit:      4  Result 0 Ready Interrupt Enable    */
    uint8_t RESRDY1:1; /*!< bit:      5  Result 1 Ready Interrupt Enable    */
    uint8_t OVERRUN0:1; /*!< bit:      6  Overrun 0 Interrupt Enable         */
    uint8_t OVERRUN1:1; /*!< bit:      7  Overrun 1 Interrupt Enable         */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t UNDERRUN:2; /*!< bit:  0.. 1  Underrun x Interrupt Enable        */
    uint8_t EMPTY:2; /*!< bit:  2.. 3  Data Buffer x Empty Interrupt Enable */
    uint8_t RESRDY:2; /*!< bit:  4.. 5  Result x Ready Interrupt Enable    */
    uint8_t OVERRUN:2; /*!< bit:  6.. 7  Overrun x Interrupt Enable         */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DAC_INTENSET_Type;
# 260 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/* -------- DAC_INTFLAG : (DAC Offset: 0x06) (R/W  8) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t UNDERRUN0:1; /*!< bit:      0  Result 0 Underrun                  */
    volatile /*!< Defines 'read only' permissions */ uint8_t UNDERRUN1:1; /*!< bit:      1  Result 1 Underrun                  */
    volatile /*!< Defines 'read only' permissions */ uint8_t EMPTY0:1; /*!< bit:      2  Data Buffer 0 Empty                */
    volatile /*!< Defines 'read only' permissions */ uint8_t EMPTY1:1; /*!< bit:      3  Data Buffer 1 Empty                */
    volatile /*!< Defines 'read only' permissions */ uint8_t RESRDY0:1; /*!< bit:      4  Result 0 Ready                     */
    volatile /*!< Defines 'read only' permissions */ uint8_t RESRDY1:1; /*!< bit:      5  Result 1 Ready                     */
    volatile /*!< Defines 'read only' permissions */ uint8_t OVERRUN0:1; /*!< bit:      6  Result 0 Overrun                   */
    volatile /*!< Defines 'read only' permissions */ uint8_t OVERRUN1:1; /*!< bit:      7  Result 1 Overrun                   */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t UNDERRUN:2; /*!< bit:  0.. 1  Result x Underrun                  */
    volatile /*!< Defines 'read only' permissions */ uint8_t EMPTY:2; /*!< bit:  2.. 3  Data Buffer x Empty                */
    volatile /*!< Defines 'read only' permissions */ uint8_t RESRDY:2; /*!< bit:  4.. 5  Result x Ready                     */
    volatile /*!< Defines 'read only' permissions */ uint8_t OVERRUN:2; /*!< bit:  6.. 7  Result x Overrun                   */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DAC_INTFLAG_Type;
# 316 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/* -------- DAC_STATUS : (DAC Offset: 0x07) (R/   8) Status -------- */

typedef union {
  struct {
    uint8_t READY0:1; /*!< bit:      0  DAC 0 Startup Ready                */
    uint8_t READY1:1; /*!< bit:      1  DAC 1 Startup Ready                */
    uint8_t EOC0:1; /*!< bit:      2  DAC 0 End of Conversion            */
    uint8_t EOC1:1; /*!< bit:      3  DAC 1 End of Conversion            */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t READY:2; /*!< bit:  0.. 1  DAC x Startup Ready                */
    uint8_t EOC:2; /*!< bit:  2.. 3  DAC x End of Conversion            */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DAC_STATUS_Type;
# 354 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/* -------- DAC_SYNCBUSY : (DAC Offset: 0x08) (R/  32) Synchronization Busy -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint32_t ENABLE:1; /*!< bit:      1  DAC Enable Status                  */
    uint32_t DATA0:1; /*!< bit:      2  Data DAC 0                         */
    uint32_t DATA1:1; /*!< bit:      3  Data DAC 1                         */
    uint32_t DATABUF0:1; /*!< bit:      4  Data Buffer DAC 0                  */
    uint32_t DATABUF1:1; /*!< bit:      5  Data Buffer DAC 1                  */
    uint32_t :26; /*!< bit:  6..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint32_t DATA:2; /*!< bit:  2.. 3  Data DAC x                         */
    uint32_t DATABUF:2; /*!< bit:  4.. 5  Data Buffer DAC x                  */
    uint32_t :26; /*!< bit:  6..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DAC_SYNCBUSY_Type;
# 399 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/* -------- DAC_DACCTRL : (DAC Offset: 0x0C) (R/W 16) DAC n Control -------- */

typedef union {
  struct {
    uint16_t LEFTADJ:1; /*!< bit:      0  Left Adjusted Data                 */
    uint16_t ENABLE:1; /*!< bit:      1  Enable DAC0                        */
    uint16_t CCTRL:2; /*!< bit:  2.. 3  Current Control                    */
    uint16_t :1; /*!< bit:      4  Reserved                           */
    uint16_t FEXT:1; /*!< bit:      5  Standalone Filter                  */
    uint16_t RUNSTDBY:1; /*!< bit:      6  Run in Standby                     */
    uint16_t DITHER:1; /*!< bit:      7  Dithering Mode                     */
    uint16_t REFRESH:4; /*!< bit:  8..11  Refresh period                     */
    uint16_t :1; /*!< bit:     12  Reserved                           */
    uint16_t OSR:3; /*!< bit: 13..15  Sampling Rate                      */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} DAC_DACCTRL_Type;
# 448 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/* -------- DAC_DATA : (DAC Offset: 0x10) ( /W 16) DAC n Data -------- */

typedef union {
  struct {
    uint16_t DATA:16; /*!< bit:  0..15  DAC0 Data                          */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} DAC_DATA_Type;
# 466 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/* -------- DAC_DATABUF : (DAC Offset: 0x14) ( /W 16) DAC n Data Buffer -------- */

typedef union {
  struct {
    uint16_t DATABUF:16; /*!< bit:  0..15  DAC0 Data Buffer                   */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} DAC_DATABUF_Type;
# 484 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/* -------- DAC_DBGCTRL : (DAC Offset: 0x18) (R/W  8) Debug Control -------- */

typedef union {
  struct {
    uint8_t DBGRUN:1; /*!< bit:      0  Debug Run                          */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DAC_DBGCTRL_Type;
# 502 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/* -------- DAC_RESULT : (DAC Offset: 0x1C) (R/  16) Filter Result -------- */

typedef union {
  struct {
    uint16_t RESULT:16; /*!< bit:  0..15  Filter Result                      */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} DAC_RESULT_Type;
# 520 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dac.h"
/** \brief DAC hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ DAC_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W  8) Control A */
  volatile /*!< Defines 'read / write' permissions */ DAC_CTRLB_Type CTRLB; /**< \brief Offset: 0x01 (R/W  8) Control B */
  volatile /*!< Defines 'read / write' permissions */ DAC_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x02 (R/W  8) Event Control */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read / write' permissions */ DAC_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x04 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ DAC_INTENSET_Type INTENSET; /**< \brief Offset: 0x05 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ DAC_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x06 (R/W  8) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read only' permissions */ DAC_STATUS_Type STATUS; /**< \brief Offset: 0x07 (R/   8) Status */
  volatile /*!< Defines 'read only' permissions */ DAC_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x08 (R/  32) Synchronization Busy */
  volatile /*!< Defines 'read / write' permissions */ DAC_DACCTRL_Type DACCTRL[2]; /**< \brief Offset: 0x0C (R/W 16) DAC n Control */
  volatile /*!< Defines 'write only' permissions */ DAC_DATA_Type DATA[2]; /**< \brief Offset: 0x10 ( /W 16) DAC n Data */
  volatile /*!< Defines 'write only' permissions */ DAC_DATABUF_Type DATABUF[2]; /**< \brief Offset: 0x14 ( /W 16) DAC n Data Buffer */
  volatile /*!< Defines 'read / write' permissions */ DAC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x18 (R/W  8) Debug Control */
       RoReg8 Reserved2[0x3];
  volatile /*!< Defines 'read only' permissions */ DAC_RESULT_Type RESULT[2]; /**< \brief Offset: 0x1C (R/  16) Filter Result */
} Dac;


/*@}*/
# 582 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h" 1
/**
 * \file
 *
 * \brief Component description for DMAC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR DMAC */
/* ========================================================================== */
/** \addtogroup SAMD51_DMAC Direct Memory Access Controller */
/*@{*/




/* -------- DMAC_CTRL : (DMAC Offset: 0x00) (R/W 16) Control -------- */

typedef union {
  struct {
    uint16_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint16_t DMAENABLE:1; /*!< bit:      1  DMA Enable                         */
    uint16_t :6; /*!< bit:  2.. 7  Reserved                           */
    uint16_t LVLEN0:1; /*!< bit:      8  Priority Level 0 Enable            */
    uint16_t LVLEN1:1; /*!< bit:      9  Priority Level 1 Enable            */
    uint16_t LVLEN2:1; /*!< bit:     10  Priority Level 2 Enable            */
    uint16_t LVLEN3:1; /*!< bit:     11  Priority Level 3 Enable            */
    uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t :8; /*!< bit:  0.. 7  Reserved                           */
    uint16_t LVLEN:4; /*!< bit:  8..11  Priority Level x Enable            */
    uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} DMAC_CTRL_Type;
# 83 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_CRCCTRL : (DMAC Offset: 0x02) (R/W 16) CRC Control -------- */

typedef union {
  struct {
    uint16_t CRCBEATSIZE:2; /*!< bit:  0.. 1  CRC Beat Size                      */
    uint16_t CRCPOLY:2; /*!< bit:  2.. 3  CRC Polynomial Type                */
    uint16_t :4; /*!< bit:  4.. 7  Reserved                           */
    uint16_t CRCSRC:6; /*!< bit:  8..13  CRC Input Source                   */
    uint16_t CRCMODE:2; /*!< bit: 14..15  CRC Operating Mode                 */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} DMAC_CRCCTRL_Type;
# 134 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_CRCDATAIN : (DMAC Offset: 0x04) (R/W 32) CRC Data Input -------- */

typedef union {
  struct {
    uint32_t CRCDATAIN:32; /*!< bit:  0..31  CRC Data Input                     */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_CRCDATAIN_Type;
# 152 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_CRCCHKSUM : (DMAC Offset: 0x08) (R/W 32) CRC Checksum -------- */

typedef union {
  struct {
    uint32_t CRCCHKSUM:32; /*!< bit:  0..31  CRC Checksum                       */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_CRCCHKSUM_Type;
# 170 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_CRCSTATUS : (DMAC Offset: 0x0C) (R/W  8) CRC Status -------- */

typedef union {
  struct {
    uint8_t CRCBUSY:1; /*!< bit:      0  CRC Module Busy                    */
    uint8_t CRCZERO:1; /*!< bit:      1  CRC Zero                           */
    uint8_t CRCERR:1; /*!< bit:      2  CRC Error                          */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DMAC_CRCSTATUS_Type;
# 194 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_DBGCTRL : (DMAC Offset: 0x0D) (R/W  8) Debug Control -------- */

typedef union {
  struct {
    uint8_t DBGRUN:1; /*!< bit:      0  Debug Run                          */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DMAC_DBGCTRL_Type;
# 212 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_SWTRIGCTRL : (DMAC Offset: 0x10) (R/W 32) Software Trigger Control -------- */

typedef union {
  struct {
    uint32_t SWTRIG0:1; /*!< bit:      0  Channel 0 Software Trigger         */
    uint32_t SWTRIG1:1; /*!< bit:      1  Channel 1 Software Trigger         */
    uint32_t SWTRIG2:1; /*!< bit:      2  Channel 2 Software Trigger         */
    uint32_t SWTRIG3:1; /*!< bit:      3  Channel 3 Software Trigger         */
    uint32_t SWTRIG4:1; /*!< bit:      4  Channel 4 Software Trigger         */
    uint32_t SWTRIG5:1; /*!< bit:      5  Channel 5 Software Trigger         */
    uint32_t SWTRIG6:1; /*!< bit:      6  Channel 6 Software Trigger         */
    uint32_t SWTRIG7:1; /*!< bit:      7  Channel 7 Software Trigger         */
    uint32_t SWTRIG8:1; /*!< bit:      8  Channel 8 Software Trigger         */
    uint32_t SWTRIG9:1; /*!< bit:      9  Channel 9 Software Trigger         */
    uint32_t SWTRIG10:1; /*!< bit:     10  Channel 10 Software Trigger        */
    uint32_t SWTRIG11:1; /*!< bit:     11  Channel 11 Software Trigger        */
    uint32_t SWTRIG12:1; /*!< bit:     12  Channel 12 Software Trigger        */
    uint32_t SWTRIG13:1; /*!< bit:     13  Channel 13 Software Trigger        */
    uint32_t SWTRIG14:1; /*!< bit:     14  Channel 14 Software Trigger        */
    uint32_t SWTRIG15:1; /*!< bit:     15  Channel 15 Software Trigger        */
    uint32_t SWTRIG16:1; /*!< bit:     16  Channel 16 Software Trigger        */
    uint32_t SWTRIG17:1; /*!< bit:     17  Channel 17 Software Trigger        */
    uint32_t SWTRIG18:1; /*!< bit:     18  Channel 18 Software Trigger        */
    uint32_t SWTRIG19:1; /*!< bit:     19  Channel 19 Software Trigger        */
    uint32_t SWTRIG20:1; /*!< bit:     20  Channel 20 Software Trigger        */
    uint32_t SWTRIG21:1; /*!< bit:     21  Channel 21 Software Trigger        */
    uint32_t SWTRIG22:1; /*!< bit:     22  Channel 22 Software Trigger        */
    uint32_t SWTRIG23:1; /*!< bit:     23  Channel 23 Software Trigger        */
    uint32_t SWTRIG24:1; /*!< bit:     24  Channel 24 Software Trigger        */
    uint32_t SWTRIG25:1; /*!< bit:     25  Channel 25 Software Trigger        */
    uint32_t SWTRIG26:1; /*!< bit:     26  Channel 26 Software Trigger        */
    uint32_t SWTRIG27:1; /*!< bit:     27  Channel 27 Software Trigger        */
    uint32_t SWTRIG28:1; /*!< bit:     28  Channel 28 Software Trigger        */
    uint32_t SWTRIG29:1; /*!< bit:     29  Channel 29 Software Trigger        */
    uint32_t SWTRIG30:1; /*!< bit:     30  Channel 30 Software Trigger        */
    uint32_t SWTRIG31:1; /*!< bit:     31  Channel 31 Software Trigger        */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t SWTRIG:32; /*!< bit:  0..31  Channel x Software Trigger         */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_SWTRIGCTRL_Type;
# 328 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_PRICTRL0 : (DMAC Offset: 0x14) (R/W 32) Priority Control 0 -------- */

typedef union {
  struct {
    uint32_t LVLPRI0:5; /*!< bit:  0.. 4  Level 0 Channel Priority Number    */
    uint32_t QOS0:2; /*!< bit:  5.. 6  Level 0 Quality of Service         */
    uint32_t RRLVLEN0:1; /*!< bit:      7  Level 0 Round-Robin Scheduling Enable */
    uint32_t LVLPRI1:5; /*!< bit:  8..12  Level 1 Channel Priority Number    */
    uint32_t QOS1:2; /*!< bit: 13..14  Level 1 Quality of Service         */
    uint32_t RRLVLEN1:1; /*!< bit:     15  Level 1 Round-Robin Scheduling Enable */
    uint32_t LVLPRI2:5; /*!< bit: 16..20  Level 2 Channel Priority Number    */
    uint32_t QOS2:2; /*!< bit: 21..22  Level 2 Quality of Service         */
    uint32_t RRLVLEN2:1; /*!< bit:     23  Level 2 Round-Robin Scheduling Enable */
    uint32_t LVLPRI3:5; /*!< bit: 24..28  Level 3 Channel Priority Number    */
    uint32_t QOS3:2; /*!< bit: 29..30  Level 3 Quality of Service         */
    uint32_t RRLVLEN3:1; /*!< bit:     31  Level 3 Round-Robin Scheduling Enable */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_PRICTRL0_Type;
# 418 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_INTPEND : (DMAC Offset: 0x20) (R/W 16) Interrupt Pending -------- */

typedef union {
  struct {
    uint16_t ID:5; /*!< bit:  0.. 4  Channel ID                         */
    uint16_t :3; /*!< bit:  5.. 7  Reserved                           */
    uint16_t TERR:1; /*!< bit:      8  Transfer Error                     */
    uint16_t TCMPL:1; /*!< bit:      9  Transfer Complete                  */
    uint16_t SUSP:1; /*!< bit:     10  Channel Suspend                    */
    uint16_t :1; /*!< bit:     11  Reserved                           */
    uint16_t CRCERR:1; /*!< bit:     12  CRC Error                          */
    uint16_t FERR:1; /*!< bit:     13  Fetch Error                        */
    uint16_t BUSY:1; /*!< bit:     14  Busy                               */
    uint16_t PEND:1; /*!< bit:     15  Pending                            */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} DMAC_INTPEND_Type;
# 459 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_INTSTATUS : (DMAC Offset: 0x24) (R/  32) Interrupt Status -------- */

typedef union {
  struct {
    uint32_t CHINT0:1; /*!< bit:      0  Channel 0 Pending Interrupt        */
    uint32_t CHINT1:1; /*!< bit:      1  Channel 1 Pending Interrupt        */
    uint32_t CHINT2:1; /*!< bit:      2  Channel 2 Pending Interrupt        */
    uint32_t CHINT3:1; /*!< bit:      3  Channel 3 Pending Interrupt        */
    uint32_t CHINT4:1; /*!< bit:      4  Channel 4 Pending Interrupt        */
    uint32_t CHINT5:1; /*!< bit:      5  Channel 5 Pending Interrupt        */
    uint32_t CHINT6:1; /*!< bit:      6  Channel 6 Pending Interrupt        */
    uint32_t CHINT7:1; /*!< bit:      7  Channel 7 Pending Interrupt        */
    uint32_t CHINT8:1; /*!< bit:      8  Channel 8 Pending Interrupt        */
    uint32_t CHINT9:1; /*!< bit:      9  Channel 9 Pending Interrupt        */
    uint32_t CHINT10:1; /*!< bit:     10  Channel 10 Pending Interrupt       */
    uint32_t CHINT11:1; /*!< bit:     11  Channel 11 Pending Interrupt       */
    uint32_t CHINT12:1; /*!< bit:     12  Channel 12 Pending Interrupt       */
    uint32_t CHINT13:1; /*!< bit:     13  Channel 13 Pending Interrupt       */
    uint32_t CHINT14:1; /*!< bit:     14  Channel 14 Pending Interrupt       */
    uint32_t CHINT15:1; /*!< bit:     15  Channel 15 Pending Interrupt       */
    uint32_t CHINT16:1; /*!< bit:     16  Channel 16 Pending Interrupt       */
    uint32_t CHINT17:1; /*!< bit:     17  Channel 17 Pending Interrupt       */
    uint32_t CHINT18:1; /*!< bit:     18  Channel 18 Pending Interrupt       */
    uint32_t CHINT19:1; /*!< bit:     19  Channel 19 Pending Interrupt       */
    uint32_t CHINT20:1; /*!< bit:     20  Channel 20 Pending Interrupt       */
    uint32_t CHINT21:1; /*!< bit:     21  Channel 21 Pending Interrupt       */
    uint32_t CHINT22:1; /*!< bit:     22  Channel 22 Pending Interrupt       */
    uint32_t CHINT23:1; /*!< bit:     23  Channel 23 Pending Interrupt       */
    uint32_t CHINT24:1; /*!< bit:     24  Channel 24 Pending Interrupt       */
    uint32_t CHINT25:1; /*!< bit:     25  Channel 25 Pending Interrupt       */
    uint32_t CHINT26:1; /*!< bit:     26  Channel 26 Pending Interrupt       */
    uint32_t CHINT27:1; /*!< bit:     27  Channel 27 Pending Interrupt       */
    uint32_t CHINT28:1; /*!< bit:     28  Channel 28 Pending Interrupt       */
    uint32_t CHINT29:1; /*!< bit:     29  Channel 29 Pending Interrupt       */
    uint32_t CHINT30:1; /*!< bit:     30  Channel 30 Pending Interrupt       */
    uint32_t CHINT31:1; /*!< bit:     31  Channel 31 Pending Interrupt       */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t CHINT:32; /*!< bit:  0..31  Channel x Pending Interrupt        */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_INTSTATUS_Type;
# 575 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_BUSYCH : (DMAC Offset: 0x28) (R/  32) Busy Channels -------- */

typedef union {
  struct {
    uint32_t BUSYCH0:1; /*!< bit:      0  Busy Channel 0                     */
    uint32_t BUSYCH1:1; /*!< bit:      1  Busy Channel 1                     */
    uint32_t BUSYCH2:1; /*!< bit:      2  Busy Channel 2                     */
    uint32_t BUSYCH3:1; /*!< bit:      3  Busy Channel 3                     */
    uint32_t BUSYCH4:1; /*!< bit:      4  Busy Channel 4                     */
    uint32_t BUSYCH5:1; /*!< bit:      5  Busy Channel 5                     */
    uint32_t BUSYCH6:1; /*!< bit:      6  Busy Channel 6                     */
    uint32_t BUSYCH7:1; /*!< bit:      7  Busy Channel 7                     */
    uint32_t BUSYCH8:1; /*!< bit:      8  Busy Channel 8                     */
    uint32_t BUSYCH9:1; /*!< bit:      9  Busy Channel 9                     */
    uint32_t BUSYCH10:1; /*!< bit:     10  Busy Channel 10                    */
    uint32_t BUSYCH11:1; /*!< bit:     11  Busy Channel 11                    */
    uint32_t BUSYCH12:1; /*!< bit:     12  Busy Channel 12                    */
    uint32_t BUSYCH13:1; /*!< bit:     13  Busy Channel 13                    */
    uint32_t BUSYCH14:1; /*!< bit:     14  Busy Channel 14                    */
    uint32_t BUSYCH15:1; /*!< bit:     15  Busy Channel 15                    */
    uint32_t BUSYCH16:1; /*!< bit:     16  Busy Channel 16                    */
    uint32_t BUSYCH17:1; /*!< bit:     17  Busy Channel 17                    */
    uint32_t BUSYCH18:1; /*!< bit:     18  Busy Channel 18                    */
    uint32_t BUSYCH19:1; /*!< bit:     19  Busy Channel 19                    */
    uint32_t BUSYCH20:1; /*!< bit:     20  Busy Channel 20                    */
    uint32_t BUSYCH21:1; /*!< bit:     21  Busy Channel 21                    */
    uint32_t BUSYCH22:1; /*!< bit:     22  Busy Channel 22                    */
    uint32_t BUSYCH23:1; /*!< bit:     23  Busy Channel 23                    */
    uint32_t BUSYCH24:1; /*!< bit:     24  Busy Channel 24                    */
    uint32_t BUSYCH25:1; /*!< bit:     25  Busy Channel 25                    */
    uint32_t BUSYCH26:1; /*!< bit:     26  Busy Channel 26                    */
    uint32_t BUSYCH27:1; /*!< bit:     27  Busy Channel 27                    */
    uint32_t BUSYCH28:1; /*!< bit:     28  Busy Channel 28                    */
    uint32_t BUSYCH29:1; /*!< bit:     29  Busy Channel 29                    */
    uint32_t BUSYCH30:1; /*!< bit:     30  Busy Channel 30                    */
    uint32_t BUSYCH31:1; /*!< bit:     31  Busy Channel 31                    */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t BUSYCH:32; /*!< bit:  0..31  Busy Channel x                     */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_BUSYCH_Type;
# 691 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_PENDCH : (DMAC Offset: 0x2C) (R/  32) Pending Channels -------- */

typedef union {
  struct {
    uint32_t PENDCH0:1; /*!< bit:      0  Pending Channel 0                  */
    uint32_t PENDCH1:1; /*!< bit:      1  Pending Channel 1                  */
    uint32_t PENDCH2:1; /*!< bit:      2  Pending Channel 2                  */
    uint32_t PENDCH3:1; /*!< bit:      3  Pending Channel 3                  */
    uint32_t PENDCH4:1; /*!< bit:      4  Pending Channel 4                  */
    uint32_t PENDCH5:1; /*!< bit:      5  Pending Channel 5                  */
    uint32_t PENDCH6:1; /*!< bit:      6  Pending Channel 6                  */
    uint32_t PENDCH7:1; /*!< bit:      7  Pending Channel 7                  */
    uint32_t PENDCH8:1; /*!< bit:      8  Pending Channel 8                  */
    uint32_t PENDCH9:1; /*!< bit:      9  Pending Channel 9                  */
    uint32_t PENDCH10:1; /*!< bit:     10  Pending Channel 10                 */
    uint32_t PENDCH11:1; /*!< bit:     11  Pending Channel 11                 */
    uint32_t PENDCH12:1; /*!< bit:     12  Pending Channel 12                 */
    uint32_t PENDCH13:1; /*!< bit:     13  Pending Channel 13                 */
    uint32_t PENDCH14:1; /*!< bit:     14  Pending Channel 14                 */
    uint32_t PENDCH15:1; /*!< bit:     15  Pending Channel 15                 */
    uint32_t PENDCH16:1; /*!< bit:     16  Pending Channel 16                 */
    uint32_t PENDCH17:1; /*!< bit:     17  Pending Channel 17                 */
    uint32_t PENDCH18:1; /*!< bit:     18  Pending Channel 18                 */
    uint32_t PENDCH19:1; /*!< bit:     19  Pending Channel 19                 */
    uint32_t PENDCH20:1; /*!< bit:     20  Pending Channel 20                 */
    uint32_t PENDCH21:1; /*!< bit:     21  Pending Channel 21                 */
    uint32_t PENDCH22:1; /*!< bit:     22  Pending Channel 22                 */
    uint32_t PENDCH23:1; /*!< bit:     23  Pending Channel 23                 */
    uint32_t PENDCH24:1; /*!< bit:     24  Pending Channel 24                 */
    uint32_t PENDCH25:1; /*!< bit:     25  Pending Channel 25                 */
    uint32_t PENDCH26:1; /*!< bit:     26  Pending Channel 26                 */
    uint32_t PENDCH27:1; /*!< bit:     27  Pending Channel 27                 */
    uint32_t PENDCH28:1; /*!< bit:     28  Pending Channel 28                 */
    uint32_t PENDCH29:1; /*!< bit:     29  Pending Channel 29                 */
    uint32_t PENDCH30:1; /*!< bit:     30  Pending Channel 30                 */
    uint32_t PENDCH31:1; /*!< bit:     31  Pending Channel 31                 */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t PENDCH:32; /*!< bit:  0..31  Pending Channel x                  */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_PENDCH_Type;
# 807 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_ACTIVE : (DMAC Offset: 0x30) (R/  32) Active Channel and Levels -------- */

typedef union {
  struct {
    uint32_t LVLEX0:1; /*!< bit:      0  Level 0 Channel Trigger Request Executing */
    uint32_t LVLEX1:1; /*!< bit:      1  Level 1 Channel Trigger Request Executing */
    uint32_t LVLEX2:1; /*!< bit:      2  Level 2 Channel Trigger Request Executing */
    uint32_t LVLEX3:1; /*!< bit:      3  Level 3 Channel Trigger Request Executing */
    uint32_t :4; /*!< bit:  4.. 7  Reserved                           */
    uint32_t ID:5; /*!< bit:  8..12  Active Channel ID                  */
    uint32_t :2; /*!< bit: 13..14  Reserved                           */
    uint32_t ABUSY:1; /*!< bit:     15  Active Channel Busy                */
    uint32_t BTCNT:16; /*!< bit: 16..31  Active Channel Block Transfer Count */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t LVLEX:4; /*!< bit:  0.. 3  Level x Channel Trigger Request Executing */
    uint32_t :28; /*!< bit:  4..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_ACTIVE_Type;
# 853 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_BASEADDR : (DMAC Offset: 0x34) (R/W 32) Descriptor Memory Section Base Address -------- */

typedef union {
  struct {
    uint32_t BASEADDR:32; /*!< bit:  0..31  Descriptor Memory Base Address     */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_BASEADDR_Type;
# 871 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_WRBADDR : (DMAC Offset: 0x38) (R/W 32) Write-Back Memory Section Base Address -------- */

typedef union {
  struct {
    uint32_t WRBADDR:32; /*!< bit:  0..31  Write-Back Memory Base Address     */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_WRBADDR_Type;
# 889 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_CHCTRLA : (DMAC Offset: 0x40) (R/W 32) CHANNEL Channel n Control A -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Channel Software Reset             */
    uint32_t ENABLE:1; /*!< bit:      1  Channel Enable                     */
    uint32_t :4; /*!< bit:  2.. 5  Reserved                           */
    uint32_t RUNSTDBY:1; /*!< bit:      6  Channel Run in Standby             */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t TRIGSRC:7; /*!< bit:  8..14  Trigger Source                     */
    uint32_t :5; /*!< bit: 15..19  Reserved                           */
    uint32_t TRIGACT:2; /*!< bit: 20..21  Trigger Action                     */
    uint32_t :2; /*!< bit: 22..23  Reserved                           */
    uint32_t BURSTLEN:4; /*!< bit: 24..27  Burst Length                       */
    uint32_t THRESHOLD:2; /*!< bit: 28..29  FIFO Threshold                     */
    uint32_t :2; /*!< bit: 30..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_CHCTRLA_Type;
# 981 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_CHCTRLB : (DMAC Offset: 0x44) (R/W  8) CHANNEL Channel n Control B -------- */

typedef union {
  struct {
    uint8_t CMD:2; /*!< bit:  0.. 1  Software Command                   */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DMAC_CHCTRLB_Type;
# 1006 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_CHPRILVL : (DMAC Offset: 0x45) (R/W  8) CHANNEL Channel n Priority Level -------- */

typedef union {
  struct {
    uint8_t PRILVL:2; /*!< bit:  0.. 1  Channel Priority Level             */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DMAC_CHPRILVL_Type;
# 1041 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_CHEVCTRL : (DMAC Offset: 0x46) (R/W  8) CHANNEL Channel n Event Control -------- */

typedef union {
  struct {
    uint8_t EVACT:3; /*!< bit:  0.. 2  Channel Event Input Action         */
    uint8_t :1; /*!< bit:      3  Reserved                           */
    uint8_t EVOMODE:2; /*!< bit:  4.. 5  Channel Event Output Mode          */
    uint8_t EVIE:1; /*!< bit:      6  Channel Event Input Enable         */
    uint8_t EVOE:1; /*!< bit:      7  Channel Event Output Enable        */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DMAC_CHEVCTRL_Type;
# 1090 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_CHINTENCLR : (DMAC Offset: 0x4C) (R/W  8) CHANNEL Channel n Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t TERR:1; /*!< bit:      0  Channel Transfer Error Interrupt Enable */
    uint8_t TCMPL:1; /*!< bit:      1  Channel Transfer Complete Interrupt Enable */
    uint8_t SUSP:1; /*!< bit:      2  Channel Suspend Interrupt Enable   */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DMAC_CHINTENCLR_Type;
# 1114 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_CHINTENSET : (DMAC Offset: 0x4D) (R/W  8) CHANNEL Channel n Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t TERR:1; /*!< bit:      0  Channel Transfer Error Interrupt Enable */
    uint8_t TCMPL:1; /*!< bit:      1  Channel Transfer Complete Interrupt Enable */
    uint8_t SUSP:1; /*!< bit:      2  Channel Suspend Interrupt Enable   */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DMAC_CHINTENSET_Type;
# 1138 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_CHINTFLAG : (DMAC Offset: 0x4E) (R/W  8) CHANNEL Channel n Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t TERR:1; /*!< bit:      0  Channel Transfer Error             */
    volatile /*!< Defines 'read only' permissions */ uint8_t TCMPL:1; /*!< bit:      1  Channel Transfer Complete          */
    volatile /*!< Defines 'read only' permissions */ uint8_t SUSP:1; /*!< bit:      2  Channel Suspend                    */
    volatile /*!< Defines 'read only' permissions */ uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DMAC_CHINTFLAG_Type;
# 1162 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_CHSTATUS : (DMAC Offset: 0x4F) (R/W  8) CHANNEL Channel n Status -------- */

typedef union {
  struct {
    uint8_t PEND:1; /*!< bit:      0  Channel Pending                    */
    uint8_t BUSY:1; /*!< bit:      1  Channel Busy                       */
    uint8_t FERR:1; /*!< bit:      2  Channel Fetch Error                */
    uint8_t CRCERR:1; /*!< bit:      3  Channel CRC Error                  */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DMAC_CHSTATUS_Type;
# 1189 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_BTCTRL : (DMAC Offset: 0x00) (R/W 16) Block Transfer Control -------- */

typedef union {
  struct {
    uint16_t VALID:1; /*!< bit:      0  Descriptor Valid                   */
    uint16_t EVOSEL:2; /*!< bit:  1.. 2  Block Event Output Selection       */
    uint16_t BLOCKACT:2; /*!< bit:  3.. 4  Block Action                       */
    uint16_t :3; /*!< bit:  5.. 7  Reserved                           */
    uint16_t BEATSIZE:2; /*!< bit:  8.. 9  Beat Size                          */
    uint16_t SRCINC:1; /*!< bit:     10  Source Address Increment Enable    */
    uint16_t DSTINC:1; /*!< bit:     11  Destination Address Increment Enable */
    uint16_t STEPSEL:1; /*!< bit:     12  Step Selection                     */
    uint16_t STEPSIZE:3; /*!< bit: 13..15  Address Increment Step Size        */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} DMAC_BTCTRL_Type;
# 1272 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_BTCNT : (DMAC Offset: 0x02) (R/W 16) Block Transfer Count -------- */

typedef union {
  struct {
    uint16_t BTCNT:16; /*!< bit:  0..15  Block Transfer Count               */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} DMAC_BTCNT_Type;
# 1290 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_SRCADDR : (DMAC Offset: 0x04) (R/W 32) Block Transfer Source Address -------- */

typedef union {
  struct {
    uint32_t SRCADDR:32; /*!< bit:  0..31  Transfer Source Address            */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_SRCADDR_Type;
# 1308 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_DSTADDR : (DMAC Offset: 0x08) (R/W 32) Block Transfer Destination Address -------- */

typedef union {
  struct { // CRC mode
    uint32_t CHKINIT:32; /*!< bit:  0..31  CRC Checksum Initial Value         */
  } CRC; /*!< Structure used for CRC                          */
  struct {
    uint32_t DSTADDR:32; /*!< bit:  0..31  Transfer Destination Address       */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_DSTADDR_Type;




// CRC mode
# 1334 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/* -------- DMAC_DESCADDR : (DMAC Offset: 0x0C) (R/W 32) Next Descriptor Address -------- */

typedef union {
  struct {
    uint32_t DESCADDR:32; /*!< bit:  0..31  Next Descriptor Address            */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DMAC_DESCADDR_Type;
# 1351 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/** \brief DmacChannel hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ DMAC_CHCTRLA_Type CHCTRLA; /**< \brief Offset: 0x00 (R/W 32) Channel n Control A */
  volatile /*!< Defines 'read / write' permissions */ DMAC_CHCTRLB_Type CHCTRLB; /**< \brief Offset: 0x04 (R/W  8) Channel n Control B */
  volatile /*!< Defines 'read / write' permissions */ DMAC_CHPRILVL_Type CHPRILVL; /**< \brief Offset: 0x05 (R/W  8) Channel n Priority Level */
  volatile /*!< Defines 'read / write' permissions */ DMAC_CHEVCTRL_Type CHEVCTRL; /**< \brief Offset: 0x06 (R/W  8) Channel n Event Control */
       RoReg8 Reserved1[0x5];
  volatile /*!< Defines 'read / write' permissions */ DMAC_CHINTENCLR_Type CHINTENCLR; /**< \brief Offset: 0x0C (R/W  8) Channel n Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ DMAC_CHINTENSET_Type CHINTENSET; /**< \brief Offset: 0x0D (R/W  8) Channel n Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ DMAC_CHINTFLAG_Type CHINTFLAG; /**< \brief Offset: 0x0E (R/W  8) Channel n Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read / write' permissions */ DMAC_CHSTATUS_Type CHSTATUS; /**< \brief Offset: 0x0F (R/W  8) Channel n Status */
} DmacChannel;


/** \brief DMAC APB hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ DMAC_CTRL_Type CTRL; /**< \brief Offset: 0x00 (R/W 16) Control */
  volatile /*!< Defines 'read / write' permissions */ DMAC_CRCCTRL_Type CRCCTRL; /**< \brief Offset: 0x02 (R/W 16) CRC Control */
  volatile /*!< Defines 'read / write' permissions */ DMAC_CRCDATAIN_Type CRCDATAIN; /**< \brief Offset: 0x04 (R/W 32) CRC Data Input */
  volatile /*!< Defines 'read / write' permissions */ DMAC_CRCCHKSUM_Type CRCCHKSUM; /**< \brief Offset: 0x08 (R/W 32) CRC Checksum */
  volatile /*!< Defines 'read / write' permissions */ DMAC_CRCSTATUS_Type CRCSTATUS; /**< \brief Offset: 0x0C (R/W  8) CRC Status */
  volatile /*!< Defines 'read / write' permissions */ DMAC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x0D (R/W  8) Debug Control */
       RoReg8 Reserved1[0x2];
  volatile /*!< Defines 'read / write' permissions */ DMAC_SWTRIGCTRL_Type SWTRIGCTRL; /**< \brief Offset: 0x10 (R/W 32) Software Trigger Control */
  volatile /*!< Defines 'read / write' permissions */ DMAC_PRICTRL0_Type PRICTRL0; /**< \brief Offset: 0x14 (R/W 32) Priority Control 0 */
       RoReg8 Reserved2[0x8];
  volatile /*!< Defines 'read / write' permissions */ DMAC_INTPEND_Type INTPEND; /**< \brief Offset: 0x20 (R/W 16) Interrupt Pending */
       RoReg8 Reserved3[0x2];
  volatile /*!< Defines 'read only' permissions */ DMAC_INTSTATUS_Type INTSTATUS; /**< \brief Offset: 0x24 (R/  32) Interrupt Status */
  volatile /*!< Defines 'read only' permissions */ DMAC_BUSYCH_Type BUSYCH; /**< \brief Offset: 0x28 (R/  32) Busy Channels */
  volatile /*!< Defines 'read only' permissions */ DMAC_PENDCH_Type PENDCH; /**< \brief Offset: 0x2C (R/  32) Pending Channels */
  volatile /*!< Defines 'read only' permissions */ DMAC_ACTIVE_Type ACTIVE; /**< \brief Offset: 0x30 (R/  32) Active Channel and Levels */
  volatile /*!< Defines 'read / write' permissions */ DMAC_BASEADDR_Type BASEADDR; /**< \brief Offset: 0x34 (R/W 32) Descriptor Memory Section Base Address */
  volatile /*!< Defines 'read / write' permissions */ DMAC_WRBADDR_Type WRBADDR; /**< \brief Offset: 0x38 (R/W 32) Write-Back Memory Section Base Address */
       RoReg8 Reserved4[0x4];
       DmacChannel Channel[32]; /**< \brief Offset: 0x40 DmacChannel groups [CH_NUM] */
} Dmac;


/** \brief DMAC Descriptor SRAM registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ DMAC_BTCTRL_Type BTCTRL; /**< \brief Offset: 0x00 (R/W 16) Block Transfer Control */
  volatile /*!< Defines 'read / write' permissions */ DMAC_BTCNT_Type BTCNT; /**< \brief Offset: 0x02 (R/W 16) Block Transfer Count */
  volatile /*!< Defines 'read / write' permissions */ DMAC_SRCADDR_Type SRCADDR; /**< \brief Offset: 0x04 (R/W 32) Block Transfer Source Address */
  volatile /*!< Defines 'read / write' permissions */ DMAC_DSTADDR_Type DSTADDR; /**< \brief Offset: 0x08 (R/W 32) Block Transfer Destination Address */
  volatile /*!< Defines 'read / write' permissions */ DMAC_DESCADDR_Type DESCADDR; /**< \brief Offset: 0x0C (R/W 32) Next Descriptor Address */
} DmacDescriptor

  __attribute__ ((aligned (8)))

;
# 1413 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dmac.h"
/*@}*/
# 583 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h" 1
/**
 * \file
 *
 * \brief Component description for DSU
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR DSU */
/* ========================================================================== */
/** \addtogroup SAMD51_DSU Device Service Unit */
/*@{*/




/* -------- DSU_CTRL : (DSU Offset: 0x0000) ( /W  8) Control -------- */

typedef union {
  struct {
    uint8_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint8_t :1; /*!< bit:      1  Reserved                           */
    uint8_t CRC:1; /*!< bit:      2  32-bit Cyclic Redundancy Code      */
    uint8_t MBIST:1; /*!< bit:      3  Memory built-in self-test          */
    uint8_t CE:1; /*!< bit:      4  Chip-Erase                         */
    uint8_t :1; /*!< bit:      5  Reserved                           */
    uint8_t ARR:1; /*!< bit:      6  Auxiliary Row Read                 */
    uint8_t SMSA:1; /*!< bit:      7  Start Memory Stream Access         */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DSU_CTRL_Type;
# 75 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_STATUSA : (DSU Offset: 0x0001) (R/W  8) Status A -------- */

typedef union {
  struct {
    uint8_t DONE:1; /*!< bit:      0  Done                               */
    uint8_t CRSTEXT:1; /*!< bit:      1  CPU Reset Phase Extension          */
    uint8_t BERR:1; /*!< bit:      2  Bus Error                          */
    uint8_t FAIL:1; /*!< bit:      3  Failure                            */
    uint8_t PERR:1; /*!< bit:      4  Protection Error                   */
    uint8_t :3; /*!< bit:  5.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DSU_STATUSA_Type;
# 105 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_STATUSB : (DSU Offset: 0x0002) (R/   8) Status B -------- */

typedef union {
  struct {
    uint8_t PROT:1; /*!< bit:      0  Protected                          */
    uint8_t DBGPRES:1; /*!< bit:      1  Debugger Present                   */
    uint8_t DCCD0:1; /*!< bit:      2  Debug Communication Channel 0 Dirty */
    uint8_t DCCD1:1; /*!< bit:      3  Debug Communication Channel 1 Dirty */
    uint8_t HPE:1; /*!< bit:      4  Hot-Plugging Enable                */
    uint8_t CELCK:1; /*!< bit:      5  Chip Erase Locked                  */
    uint8_t TDCCD0:1; /*!< bit:      6  Test Debug Communication Channel 0 Dirty */
    uint8_t TDCCD1:1; /*!< bit:      7  Test Debug Communication Channel 1 Dirty */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint8_t DCCD:2; /*!< bit:  2.. 3  Debug Communication Channel x Dirty */
    uint8_t :2; /*!< bit:  4.. 5  Reserved                           */
    uint8_t TDCCD:2; /*!< bit:  6.. 7  Test Debug Communication Channel x Dirty */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} DSU_STATUSB_Type;
# 155 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_ADDR : (DSU Offset: 0x0004) (R/W 32) Address -------- */

typedef union {
  struct {
    uint32_t AMOD:2; /*!< bit:  0.. 1  Access Mode                        */
    uint32_t ADDR:30; /*!< bit:  2..31  Address                            */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_ADDR_Type;
# 177 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_LENGTH : (DSU Offset: 0x0008) (R/W 32) Length -------- */

typedef union {
  struct {
    uint32_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint32_t LENGTH:30; /*!< bit:  2..31  Length                             */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_LENGTH_Type;
# 196 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_DATA : (DSU Offset: 0x000C) (R/W 32) Data -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  Data                               */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_DATA_Type;
# 214 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_DCC : (DSU Offset: 0x0010) (R/W 32) Debug Communication Channel n -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  Data                               */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_DCC_Type;
# 232 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_DID : (DSU Offset: 0x0018) (R/  32) Device Identification -------- */

typedef union {
  struct {
    uint32_t DEVSEL:8; /*!< bit:  0.. 7  Device Select                      */
    uint32_t REVISION:4; /*!< bit:  8..11  Revision Number                    */
    uint32_t DIE:4; /*!< bit: 12..15  Die Number                         */
    uint32_t SERIES:6; /*!< bit: 16..21  Series                             */
    uint32_t :1; /*!< bit:     22  Reserved                           */
    uint32_t FAMILY:5; /*!< bit: 23..27  Family                             */
    uint32_t PROCESSOR:4; /*!< bit: 28..31  Processor                          */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_DID_Type;
# 282 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_CFG : (DSU Offset: 0x001C) (R/W 32) Configuration -------- */

typedef union {
  struct {
    uint32_t LQOS:2; /*!< bit:  0.. 1  Latency Quality Of Service         */
    uint32_t DCCDMALEVEL:2; /*!< bit:  2.. 3  DMA Trigger Level                  */
    uint32_t ETBRAMEN:1; /*!< bit:      4  Trace Control                      */
    uint32_t :27; /*!< bit:  5..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_CFG_Type;
# 312 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_MBCTRL : (DSU Offset: 0x0040) (R/W 32) MBIST Control -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  MBIST Software Reset               */
    uint32_t ENABLE:1; /*!< bit:      1  MBIST Enable                       */
    uint32_t :30; /*!< bit:  2..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_MBCTRL_Type;
# 333 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_MBCONFIG : (DSU Offset: 0x0044) (R/W 32) MBIST Configuration -------- */

typedef union {
  struct {
    uint32_t ALGO:5; /*!< bit:  0.. 4  MBIST Algorithm                    */
    uint32_t :1; /*!< bit:      5  Reserved                           */
    uint32_t DEFRDMARGIN:1; /*!< bit:      6  Force Default Read Margin          */
    uint32_t DBG:1; /*!< bit:      7  Enable Debug Mode                  */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_MBCONFIG_Type;
# 377 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_MBWORD : (DSU Offset: 0x0048) (R/W 32) MBIST Background Word -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  MBIST Background Word              */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_MBWORD_Type;
# 395 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_MBGSTAT : (DSU Offset: 0x004C) (R/W 32) MBIST Global Status -------- */

typedef union {
  struct {
    uint32_t ALLDONE:1; /*!< bit:      0  MBIST Completed                    */
    uint32_t FAILED:1; /*!< bit:      1  MBIST Failed                       */
    uint32_t ERRINFO:1; /*!< bit:      2  MBIST Error Info Present           */
    uint32_t CONFIGURED:1; /*!< bit:      3  MBIST Configuration Sent           */
    uint32_t :28; /*!< bit:  4..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_MBGSTAT_Type;
# 422 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_MBDFAIL : (DSU Offset: 0x0050) (R/  32) MBIST Fail Data -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  Error Data Read                    */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_MBDFAIL_Type;
# 440 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_MBDEXP : (DSU Offset: 0x0054) (R/  32) MBIST Expected Data -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  Expected Data                      */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_MBDEXP_Type;
# 458 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_MBAFAIL : (DSU Offset: 0x0058) (R/  32) MBIST Fail Address -------- */

typedef union {
  struct {
    uint32_t ADDR:14; /*!< bit:  0..13  Error Address                      */
    uint32_t :18; /*!< bit: 14..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_MBAFAIL_Type;
# 477 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_MBCONTEXT : (DSU Offset: 0x005C) (R/  32) MBIST Fail Context -------- */

typedef union {
  struct {
    uint32_t SUBSTEP:5; /*!< bit:  0.. 4  Algorithm Sub-step                 */
    uint32_t STEP:5; /*!< bit:  5.. 9  Algorithm Step                     */
    uint32_t PORT:1; /*!< bit:     10  DPRAM Port Index                   */
    uint32_t :21; /*!< bit: 11..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_MBCONTEXT_Type;
# 539 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_MBENABLE0 : (DSU Offset: 0x0060) (R/W 32) MBIST Memory Enable 0 -------- */

typedef union {
  struct {
    uint32_t ENABLE0:1; /*!< bit:      0  Memory 0 MBIST Enable              */
    uint32_t ENABLE1:1; /*!< bit:      1  Memory 1 MBIST Enable              */
    uint32_t ENABLE2:1; /*!< bit:      2  Memory 2 MBIST Enable              */
    uint32_t ENABLE3:1; /*!< bit:      3  Memory 3 MBIST Enable              */
    uint32_t ENABLE4:1; /*!< bit:      4  Memory 4 MBIST Enable              */
    uint32_t ENABLE5:1; /*!< bit:      5  Memory 5 MBIST Enable              */
    uint32_t ENABLE6:1; /*!< bit:      6  Memory 6 MBIST Enable              */
    uint32_t ENABLE7:1; /*!< bit:      7  Memory 7 MBIST Enable              */
    uint32_t ENABLE8:1; /*!< bit:      8  Memory 8 MBIST Enable              */
    uint32_t ENABLE9:1; /*!< bit:      9  Memory 9 MBIST Enable              */
    uint32_t ENABLE10:1; /*!< bit:     10  Memory 10 MBIST Enable             */
    uint32_t ENABLE11:1; /*!< bit:     11  Memory 11 MBIST Enable             */
    uint32_t ENABLE12:1; /*!< bit:     12  Memory 12 MBIST Enable             */
    uint32_t ENABLE13:1; /*!< bit:     13  Memory 13 MBIST Enable             */
    uint32_t ENABLE14:1; /*!< bit:     14  Memory 14 MBIST Enable             */
    uint32_t ENABLE15:1; /*!< bit:     15  Memory 15 MBIST Enable             */
    uint32_t ENABLE16:1; /*!< bit:     16  Memory 16 MBIST Enable             */
    uint32_t ENABLE17:1; /*!< bit:     17  Memory 17 MBIST Enable             */
    uint32_t ENABLE18:1; /*!< bit:     18  Memory 18 MBIST Enable             */
    uint32_t ENABLE19:1; /*!< bit:     19  Memory 19 MBIST Enable             */
    uint32_t ENABLE20:1; /*!< bit:     20  Memory 20 MBIST Enable             */
    uint32_t ENABLE21:1; /*!< bit:     21  Memory 21 MBIST Enable             */
    uint32_t ENABLE22:1; /*!< bit:     22  Memory 22 MBIST Enable             */
    uint32_t ENABLE23:1; /*!< bit:     23  Memory 23 MBIST Enable             */
    uint32_t ENABLE24:1; /*!< bit:     24  Memory 24 MBIST Enable             */
    uint32_t ENABLE25:1; /*!< bit:     25  Memory 25 MBIST Enable             */
    uint32_t ENABLE26:1; /*!< bit:     26  Memory 26 MBIST Enable             */
    uint32_t ENABLE27:1; /*!< bit:     27  Memory 27 MBIST Enable             */
    uint32_t ENABLE28:1; /*!< bit:     28  Memory 28 MBIST Enable             */
    uint32_t :3; /*!< bit: 29..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t ENABLE:29; /*!< bit:  0..28  Memory x MBIST Enable              */
    uint32_t :3; /*!< bit: 29..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_MBENABLE0_Type;
# 648 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_MBBUSY0 : (DSU Offset: 0x0068) (R/  32) MBIST Memory Busy 0 -------- */

typedef union {
  struct {
    uint32_t BUSY0:1; /*!< bit:      0  Memory 0 BIST Busy                 */
    uint32_t BUSY1:1; /*!< bit:      1  Memory 1 BIST Busy                 */
    uint32_t BUSY2:1; /*!< bit:      2  Memory 2 BIST Busy                 */
    uint32_t BUSY3:1; /*!< bit:      3  Memory 3 BIST Busy                 */
    uint32_t BUSY4:1; /*!< bit:      4  Memory 4 BIST Busy                 */
    uint32_t BUSY5:1; /*!< bit:      5  Memory 5 BIST Busy                 */
    uint32_t BUSY6:1; /*!< bit:      6  Memory 6 BIST Busy                 */
    uint32_t BUSY7:1; /*!< bit:      7  Memory 7 BIST Busy                 */
    uint32_t BUSY8:1; /*!< bit:      8  Memory 8 BIST Busy                 */
    uint32_t BUSY9:1; /*!< bit:      9  Memory 9 BIST Busy                 */
    uint32_t BUSY10:1; /*!< bit:     10  Memory 10 BIST Busy                */
    uint32_t BUSY11:1; /*!< bit:     11  Memory 11 BIST Busy                */
    uint32_t BUSY12:1; /*!< bit:     12  Memory 12 BIST Busy                */
    uint32_t BUSY13:1; /*!< bit:     13  Memory 13 BIST Busy                */
    uint32_t BUSY14:1; /*!< bit:     14  Memory 14 BIST Busy                */
    uint32_t BUSY15:1; /*!< bit:     15  Memory 15 BIST Busy                */
    uint32_t BUSY16:1; /*!< bit:     16  Memory 16 BIST Busy                */
    uint32_t BUSY17:1; /*!< bit:     17  Memory 17 BIST Busy                */
    uint32_t BUSY18:1; /*!< bit:     18  Memory 18 BIST Busy                */
    uint32_t BUSY19:1; /*!< bit:     19  Memory 19 BIST Busy                */
    uint32_t BUSY20:1; /*!< bit:     20  Memory 20 BIST Busy                */
    uint32_t BUSY21:1; /*!< bit:     21  Memory 21 BIST Busy                */
    uint32_t BUSY22:1; /*!< bit:     22  Memory 22 BIST Busy                */
    uint32_t BUSY23:1; /*!< bit:     23  Memory 23 BIST Busy                */
    uint32_t BUSY24:1; /*!< bit:     24  Memory 24 BIST Busy                */
    uint32_t BUSY25:1; /*!< bit:     25  Memory 25 BIST Busy                */
    uint32_t BUSY26:1; /*!< bit:     26  Memory 26 BIST Busy                */
    uint32_t BUSY27:1; /*!< bit:     27  Memory 27 BIST Busy                */
    uint32_t BUSY28:1; /*!< bit:     28  Memory 28 BIST Busy                */
    uint32_t :3; /*!< bit: 29..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t BUSY:29; /*!< bit:  0..28  Memory x BIST Busy                 */
    uint32_t :3; /*!< bit: 29..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_MBBUSY0_Type;
# 757 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_MBSTATUS0 : (DSU Offset: 0x0070) (R/W 32) MBIST Memory Status 0 -------- */

typedef union {
  struct {
    uint32_t STATUS0:1; /*!< bit:      0  Memory 0 MBIST Status              */
    uint32_t STATUS1:1; /*!< bit:      1  Memory 1 MBIST Status              */
    uint32_t STATUS2:1; /*!< bit:      2  Memory 2 MBIST Status              */
    uint32_t STATUS3:1; /*!< bit:      3  Memory 3 MBIST Status              */
    uint32_t STATUS4:1; /*!< bit:      4  Memory 4 MBIST Status              */
    uint32_t STATUS5:1; /*!< bit:      5  Memory 5 MBIST Status              */
    uint32_t STATUS6:1; /*!< bit:      6  Memory 6 MBIST Status              */
    uint32_t STATUS7:1; /*!< bit:      7  Memory 7 MBIST Status              */
    uint32_t STATUS8:1; /*!< bit:      8  Memory 8 MBIST Status              */
    uint32_t STATUS9:1; /*!< bit:      9  Memory 9 MBIST Status              */
    uint32_t STATUS10:1; /*!< bit:     10  Memory 10 MBIST Status             */
    uint32_t STATUS11:1; /*!< bit:     11  Memory 11 MBIST Status             */
    uint32_t STATUS12:1; /*!< bit:     12  Memory 12 MBIST Status             */
    uint32_t STATUS13:1; /*!< bit:     13  Memory 13 MBIST Status             */
    uint32_t STATUS14:1; /*!< bit:     14  Memory 14 MBIST Status             */
    uint32_t STATUS15:1; /*!< bit:     15  Memory 15 MBIST Status             */
    uint32_t STATUS16:1; /*!< bit:     16  Memory 16 MBIST Status             */
    uint32_t STATUS17:1; /*!< bit:     17  Memory 17 MBIST Status             */
    uint32_t STATUS18:1; /*!< bit:     18  Memory 18 MBIST Status             */
    uint32_t STATUS19:1; /*!< bit:     19  Memory 19 MBIST Status             */
    uint32_t STATUS20:1; /*!< bit:     20  Memory 20 MBIST Status             */
    uint32_t STATUS21:1; /*!< bit:     21  Memory 21 MBIST Status             */
    uint32_t STATUS22:1; /*!< bit:     22  Memory 22 MBIST Status             */
    uint32_t STATUS23:1; /*!< bit:     23  Memory 23 MBIST Status             */
    uint32_t STATUS24:1; /*!< bit:     24  Memory 24 MBIST Status             */
    uint32_t STATUS25:1; /*!< bit:     25  Memory 25 MBIST Status             */
    uint32_t STATUS26:1; /*!< bit:     26  Memory 26 MBIST Status             */
    uint32_t STATUS27:1; /*!< bit:     27  Memory 27 MBIST Status             */
    uint32_t STATUS28:1; /*!< bit:     28  Memory 28 MBIST Status             */
    uint32_t :3; /*!< bit: 29..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t STATUS:29; /*!< bit:  0..28  Memory x MBIST Status              */
    uint32_t :3; /*!< bit: 29..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_MBSTATUS0_Type;
# 866 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_DCFG : (DSU Offset: 0x00F0) (R/W 32) Device Configuration -------- */

typedef union {
  struct {
    uint32_t DCFG:32; /*!< bit:  0..31  Device Configuration               */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_DCFG_Type;
# 884 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_ENTRY : (DSU Offset: 0x1000) (R/  32) Coresight ROM Table Entry n -------- */

typedef union {
  struct {
    uint32_t EPRES:1; /*!< bit:      0  Entry Present                      */
    uint32_t FMT:1; /*!< bit:      1  Format                             */
    uint32_t :10; /*!< bit:  2..11  Reserved                           */
    uint32_t ADDOFF:20; /*!< bit: 12..31  Address Offset                     */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_ENTRY_Type;
# 908 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_END : (DSU Offset: 0x1008) (R/  32) Coresight ROM Table End -------- */

typedef union {
  struct {
    uint32_t END:32; /*!< bit:  0..31  End Marker                         */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_END_Type;
# 926 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_MEMTYPE : (DSU Offset: 0x1FCC) (R/  32) Coresight ROM Table Memory Type -------- */

typedef union {
  struct {
    uint32_t SMEMP:1; /*!< bit:      0  System Memory Present              */
    uint32_t :31; /*!< bit:  1..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_MEMTYPE_Type;
# 944 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_PID4 : (DSU Offset: 0x1FD0) (R/  32) Peripheral Identification 4 -------- */

typedef union {
  struct {
    uint32_t JEPCC:4; /*!< bit:  0.. 3  JEP-106 Continuation Code          */
    uint32_t FKBC:4; /*!< bit:  4.. 7  4KB count                          */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_PID4_Type;
# 967 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_PID5 : (DSU Offset: 0x1FD4) (R/  32) Peripheral Identification 5 -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} DSU_PID5_Type;





/* -------- DSU_PID6 : (DSU Offset: 0x1FD8) (R/  32) Peripheral Identification 6 -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} DSU_PID6_Type;





/* -------- DSU_PID7 : (DSU Offset: 0x1FDC) (R/  32) Peripheral Identification 7 -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} DSU_PID7_Type;





/* -------- DSU_PID0 : (DSU Offset: 0x1FE0) (R/  32) Peripheral Identification 0 -------- */

typedef union {
  struct {
    uint32_t PARTNBL:8; /*!< bit:  0.. 7  Part Number Low                    */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_PID0_Type;
# 1016 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_PID1 : (DSU Offset: 0x1FE4) (R/  32) Peripheral Identification 1 -------- */

typedef union {
  struct {
    uint32_t PARTNBH:4; /*!< bit:  0.. 3  Part Number High                   */
    uint32_t JEPIDCL:4; /*!< bit:  4.. 7  Low part of the JEP-106 Identity Code */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_PID1_Type;
# 1039 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_PID2 : (DSU Offset: 0x1FE8) (R/  32) Peripheral Identification 2 -------- */

typedef union {
  struct {
    uint32_t JEPIDCH:3; /*!< bit:  0.. 2  JEP-106 Identity Code High         */
    uint32_t JEPU:1; /*!< bit:      3  JEP-106 Identity Code is used      */
    uint32_t REVISION:4; /*!< bit:  4.. 7  Revision Number                    */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_PID2_Type;
# 1065 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_PID3 : (DSU Offset: 0x1FEC) (R/  32) Peripheral Identification 3 -------- */

typedef union {
  struct {
    uint32_t CUSMOD:4; /*!< bit:  0.. 3  ARM CUSMOD                         */
    uint32_t REVAND:4; /*!< bit:  4.. 7  Revision Number                    */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_PID3_Type;
# 1088 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_CID0 : (DSU Offset: 0x1FF0) (R/  32) Component Identification 0 -------- */

typedef union {
  struct {
    uint32_t PREAMBLEB0:8; /*!< bit:  0.. 7  Preamble Byte 0                    */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_CID0_Type;
# 1107 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_CID1 : (DSU Offset: 0x1FF4) (R/  32) Component Identification 1 -------- */

typedef union {
  struct {
    uint32_t PREAMBLE:4; /*!< bit:  0.. 3  Preamble                           */
    uint32_t CCLASS:4; /*!< bit:  4.. 7  Component Class                    */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_CID1_Type;
# 1130 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_CID2 : (DSU Offset: 0x1FF8) (R/  32) Component Identification 2 -------- */

typedef union {
  struct {
    uint32_t PREAMBLEB2:8; /*!< bit:  0.. 7  Preamble Byte 2                    */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_CID2_Type;
# 1149 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/* -------- DSU_CID3 : (DSU Offset: 0x1FFC) (R/  32) Component Identification 3 -------- */

typedef union {
  struct {
    uint32_t PREAMBLEB3:8; /*!< bit:  0.. 7  Preamble Byte 3                    */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} DSU_CID3_Type;
# 1168 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/dsu.h"
/** \brief DSU hardware registers */

typedef struct {
  volatile /*!< Defines 'write only' permissions */ DSU_CTRL_Type CTRL; /**< \brief Offset: 0x0000 ( /W  8) Control */
  volatile /*!< Defines 'read / write' permissions */ DSU_STATUSA_Type STATUSA; /**< \brief Offset: 0x0001 (R/W  8) Status A */
  volatile /*!< Defines 'read only' permissions */ DSU_STATUSB_Type STATUSB; /**< \brief Offset: 0x0002 (R/   8) Status B */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read / write' permissions */ DSU_ADDR_Type ADDR; /**< \brief Offset: 0x0004 (R/W 32) Address */
  volatile /*!< Defines 'read / write' permissions */ DSU_LENGTH_Type LENGTH; /**< \brief Offset: 0x0008 (R/W 32) Length */
  volatile /*!< Defines 'read / write' permissions */ DSU_DATA_Type DATA; /**< \brief Offset: 0x000C (R/W 32) Data */
  volatile /*!< Defines 'read / write' permissions */ DSU_DCC_Type DCC[2]; /**< \brief Offset: 0x0010 (R/W 32) Debug Communication Channel n */
  volatile /*!< Defines 'read only' permissions */ DSU_DID_Type DID; /**< \brief Offset: 0x0018 (R/  32) Device Identification */
  volatile /*!< Defines 'read / write' permissions */ DSU_CFG_Type CFG; /**< \brief Offset: 0x001C (R/W 32) Configuration */
       RoReg8 Reserved2[0x20];
  volatile /*!< Defines 'read / write' permissions */ DSU_MBCTRL_Type MBCTRL; /**< \brief Offset: 0x0040 (R/W 32) MBIST Control */
  volatile /*!< Defines 'read / write' permissions */ DSU_MBCONFIG_Type MBCONFIG; /**< \brief Offset: 0x0044 (R/W 32) MBIST Configuration */
  volatile /*!< Defines 'read / write' permissions */ DSU_MBWORD_Type MBWORD; /**< \brief Offset: 0x0048 (R/W 32) MBIST Background Word */
  volatile /*!< Defines 'read / write' permissions */ DSU_MBGSTAT_Type MBGSTAT; /**< \brief Offset: 0x004C (R/W 32) MBIST Global Status */
  volatile /*!< Defines 'read only' permissions */ DSU_MBDFAIL_Type MBDFAIL; /**< \brief Offset: 0x0050 (R/  32) MBIST Fail Data */
  volatile /*!< Defines 'read only' permissions */ DSU_MBDEXP_Type MBDEXP; /**< \brief Offset: 0x0054 (R/  32) MBIST Expected Data */
  volatile /*!< Defines 'read only' permissions */ DSU_MBAFAIL_Type MBAFAIL; /**< \brief Offset: 0x0058 (R/  32) MBIST Fail Address */
  volatile /*!< Defines 'read only' permissions */ DSU_MBCONTEXT_Type MBCONTEXT; /**< \brief Offset: 0x005C (R/  32) MBIST Fail Context */
  volatile /*!< Defines 'read / write' permissions */ DSU_MBENABLE0_Type MBENABLE0; /**< \brief Offset: 0x0060 (R/W 32) MBIST Memory Enable 0 */
       RoReg8 Reserved3[0x4];
  volatile /*!< Defines 'read only' permissions */ DSU_MBBUSY0_Type MBBUSY0; /**< \brief Offset: 0x0068 (R/  32) MBIST Memory Busy 0 */
       RoReg8 Reserved4[0x4];
  volatile /*!< Defines 'read / write' permissions */ DSU_MBSTATUS0_Type MBSTATUS0; /**< \brief Offset: 0x0070 (R/W 32) MBIST Memory Status 0 */
       RoReg8 Reserved5[0x7C];
  volatile /*!< Defines 'read / write' permissions */ DSU_DCFG_Type DCFG[2]; /**< \brief Offset: 0x00F0 (R/W 32) Device Configuration */
       RoReg8 Reserved6[0xF08];
  volatile /*!< Defines 'read only' permissions */ DSU_ENTRY_Type ENTRY[2]; /**< \brief Offset: 0x1000 (R/  32) Coresight ROM Table Entry n */
  volatile /*!< Defines 'read only' permissions */ DSU_END_Type END; /**< \brief Offset: 0x1008 (R/  32) Coresight ROM Table End */
       RoReg8 Reserved7[0xFC0];
  volatile /*!< Defines 'read only' permissions */ DSU_MEMTYPE_Type MEMTYPE; /**< \brief Offset: 0x1FCC (R/  32) Coresight ROM Table Memory Type */
  volatile /*!< Defines 'read only' permissions */ DSU_PID4_Type PID4; /**< \brief Offset: 0x1FD0 (R/  32) Peripheral Identification 4 */
  volatile /*!< Defines 'read only' permissions */ DSU_PID5_Type PID5; /**< \brief Offset: 0x1FD4 (R/  32) Peripheral Identification 5 */
  volatile /*!< Defines 'read only' permissions */ DSU_PID6_Type PID6; /**< \brief Offset: 0x1FD8 (R/  32) Peripheral Identification 6 */
  volatile /*!< Defines 'read only' permissions */ DSU_PID7_Type PID7; /**< \brief Offset: 0x1FDC (R/  32) Peripheral Identification 7 */
  volatile /*!< Defines 'read only' permissions */ DSU_PID0_Type PID0; /**< \brief Offset: 0x1FE0 (R/  32) Peripheral Identification 0 */
  volatile /*!< Defines 'read only' permissions */ DSU_PID1_Type PID1; /**< \brief Offset: 0x1FE4 (R/  32) Peripheral Identification 1 */
  volatile /*!< Defines 'read only' permissions */ DSU_PID2_Type PID2; /**< \brief Offset: 0x1FE8 (R/  32) Peripheral Identification 2 */
  volatile /*!< Defines 'read only' permissions */ DSU_PID3_Type PID3; /**< \brief Offset: 0x1FEC (R/  32) Peripheral Identification 3 */
  volatile /*!< Defines 'read only' permissions */ DSU_CID0_Type CID0; /**< \brief Offset: 0x1FF0 (R/  32) Component Identification 0 */
  volatile /*!< Defines 'read only' permissions */ DSU_CID1_Type CID1; /**< \brief Offset: 0x1FF4 (R/  32) Component Identification 1 */
  volatile /*!< Defines 'read only' permissions */ DSU_CID2_Type CID2; /**< \brief Offset: 0x1FF8 (R/  32) Component Identification 2 */
  volatile /*!< Defines 'read only' permissions */ DSU_CID3_Type CID3; /**< \brief Offset: 0x1FFC (R/  32) Component Identification 3 */
} Dsu;


/*@}*/
# 584 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h" 1
/**
 * \file
 *
 * \brief Component description for EIC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR EIC */
/* ========================================================================== */
/** \addtogroup SAMD51_EIC External Interrupt Controller */
/*@{*/




/* -------- EIC_CTRLA : (EIC Offset: 0x00) (R/W  8) Control A -------- */

typedef union {
  struct {
    uint8_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint8_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint8_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint8_t CKSEL:1; /*!< bit:      4  Clock Selection                    */
    uint8_t :3; /*!< bit:  5.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} EIC_CTRLA_Type;
# 66 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/* -------- EIC_NMICTRL : (EIC Offset: 0x01) (R/W  8) Non-Maskable Interrupt Control -------- */

typedef union {
  struct {
    uint8_t NMISENSE:3; /*!< bit:  0.. 2  Non-Maskable Interrupt Sense Configuration */
    uint8_t NMIFILTEN:1; /*!< bit:      3  Non-Maskable Interrupt Filter Enable */
    uint8_t NMIASYNCH:1; /*!< bit:      4  Asynchronous Edge Detection Mode   */
    uint8_t :3; /*!< bit:  5.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} EIC_NMICTRL_Type;
# 103 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/* -------- EIC_NMIFLAG : (EIC Offset: 0x02) (R/W 16) Non-Maskable Interrupt Flag Status and Clear -------- */

typedef union {
  struct {
    uint16_t NMI:1; /*!< bit:      0  Non-Maskable Interrupt             */
    uint16_t :15; /*!< bit:  1..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} EIC_NMIFLAG_Type;
# 121 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/* -------- EIC_SYNCBUSY : (EIC Offset: 0x04) (R/  32) Synchronization Busy -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset Synchronization Busy Status */
    uint32_t ENABLE:1; /*!< bit:      1  Enable Synchronization Busy Status */
    uint32_t :30; /*!< bit:  2..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EIC_SYNCBUSY_Type;
# 142 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/* -------- EIC_EVCTRL : (EIC Offset: 0x08) (R/W 32) Event Control -------- */

typedef union {
  struct {
    uint32_t EXTINTEO:16; /*!< bit:  0..15  External Interrupt Event Output Enable */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EIC_EVCTRL_Type;
# 161 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/* -------- EIC_INTENCLR : (EIC Offset: 0x0C) (R/W 32) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint32_t EXTINT:16; /*!< bit:  0..15  External Interrupt Enable          */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EIC_INTENCLR_Type;
# 180 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/* -------- EIC_INTENSET : (EIC Offset: 0x10) (R/W 32) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint32_t EXTINT:16; /*!< bit:  0..15  External Interrupt Enable          */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EIC_INTENSET_Type;
# 199 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/* -------- EIC_INTFLAG : (EIC Offset: 0x14) (R/W 32) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t EXTINT:16; /*!< bit:  0..15  External Interrupt                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EIC_INTFLAG_Type;
# 218 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/* -------- EIC_ASYNCH : (EIC Offset: 0x18) (R/W 32) External Interrupt Asynchronous Mode -------- */

typedef union {
  struct {
    uint32_t ASYNCH:16; /*!< bit:  0..15  Asynchronous Edge Detection Mode   */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EIC_ASYNCH_Type;
# 237 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/* -------- EIC_CONFIG : (EIC Offset: 0x1C) (R/W 32) External Interrupt Sense Configuration -------- */

typedef union {
  struct {
    uint32_t SENSE0:3; /*!< bit:  0.. 2  Input Sense Configuration 0        */
    uint32_t FILTEN0:1; /*!< bit:      3  Filter Enable 0                    */
    uint32_t SENSE1:3; /*!< bit:  4.. 6  Input Sense Configuration 1        */
    uint32_t FILTEN1:1; /*!< bit:      7  Filter Enable 1                    */
    uint32_t SENSE2:3; /*!< bit:  8..10  Input Sense Configuration 2        */
    uint32_t FILTEN2:1; /*!< bit:     11  Filter Enable 2                    */
    uint32_t SENSE3:3; /*!< bit: 12..14  Input Sense Configuration 3        */
    uint32_t FILTEN3:1; /*!< bit:     15  Filter Enable 3                    */
    uint32_t SENSE4:3; /*!< bit: 16..18  Input Sense Configuration 4        */
    uint32_t FILTEN4:1; /*!< bit:     19  Filter Enable 4                    */
    uint32_t SENSE5:3; /*!< bit: 20..22  Input Sense Configuration 5        */
    uint32_t FILTEN5:1; /*!< bit:     23  Filter Enable 5                    */
    uint32_t SENSE6:3; /*!< bit: 24..26  Input Sense Configuration 6        */
    uint32_t FILTEN6:1; /*!< bit:     27  Filter Enable 6                    */
    uint32_t SENSE7:3; /*!< bit: 28..30  Input Sense Configuration 7        */
    uint32_t FILTEN7:1; /*!< bit:     31  Filter Enable 7                    */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EIC_CONFIG_Type;
# 403 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/* -------- EIC_DEBOUNCEN : (EIC Offset: 0x30) (R/W 32) Debouncer Enable -------- */

typedef union {
  struct {
    uint32_t DEBOUNCEN:16; /*!< bit:  0..15  Debouncer Enable                   */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EIC_DEBOUNCEN_Type;
# 422 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/* -------- EIC_DPRESCALER : (EIC Offset: 0x34) (R/W 32) Debouncer Prescaler -------- */

typedef union {
  struct {
    uint32_t PRESCALER0:3; /*!< bit:  0.. 2  Debouncer Prescaler                */
    uint32_t STATES0:1; /*!< bit:      3  Debouncer number of states         */
    uint32_t PRESCALER1:3; /*!< bit:  4.. 6  Debouncer Prescaler                */
    uint32_t STATES1:1; /*!< bit:      7  Debouncer number of states         */
    uint32_t :8; /*!< bit:  8..15  Reserved                           */
    uint32_t TICKON:1; /*!< bit:     16  Pin Sampler frequency selection    */
    uint32_t :15; /*!< bit: 17..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EIC_DPRESCALER_Type;
# 455 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/* -------- EIC_PINSTATE : (EIC Offset: 0x38) (R/  32) Pin State -------- */

typedef union {
  struct {
    uint32_t PINSTATE:16; /*!< bit:  0..15  Pin State                          */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EIC_PINSTATE_Type;
# 474 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/eic.h"
/** \brief EIC hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ EIC_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W  8) Control A */
  volatile /*!< Defines 'read / write' permissions */ EIC_NMICTRL_Type NMICTRL; /**< \brief Offset: 0x01 (R/W  8) Non-Maskable Interrupt Control */
  volatile /*!< Defines 'read / write' permissions */ EIC_NMIFLAG_Type NMIFLAG; /**< \brief Offset: 0x02 (R/W 16) Non-Maskable Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read only' permissions */ EIC_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x04 (R/  32) Synchronization Busy */
  volatile /*!< Defines 'read / write' permissions */ EIC_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x08 (R/W 32) Event Control */
  volatile /*!< Defines 'read / write' permissions */ EIC_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x0C (R/W 32) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ EIC_INTENSET_Type INTENSET; /**< \brief Offset: 0x10 (R/W 32) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ EIC_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x14 (R/W 32) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read / write' permissions */ EIC_ASYNCH_Type ASYNCH; /**< \brief Offset: 0x18 (R/W 32) External Interrupt Asynchronous Mode */
  volatile /*!< Defines 'read / write' permissions */ EIC_CONFIG_Type CONFIG[2]; /**< \brief Offset: 0x1C (R/W 32) External Interrupt Sense Configuration */
       RoReg8 Reserved1[0xC];
  volatile /*!< Defines 'read / write' permissions */ EIC_DEBOUNCEN_Type DEBOUNCEN; /**< \brief Offset: 0x30 (R/W 32) Debouncer Enable */
  volatile /*!< Defines 'read / write' permissions */ EIC_DPRESCALER_Type DPRESCALER; /**< \brief Offset: 0x34 (R/W 32) Debouncer Prescaler */
  volatile /*!< Defines 'read only' permissions */ EIC_PINSTATE_Type PINSTATE; /**< \brief Offset: 0x38 (R/  32) Pin State */
} Eic;


/*@}*/
# 585 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h" 1
/**
 * \file
 *
 * \brief Component description for EVSYS
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR EVSYS */
/* ========================================================================== */
/** \addtogroup SAMD51_EVSYS Event System Interface */
/*@{*/




/* -------- EVSYS_CTRLA : (EVSYS Offset: 0x000) (R/W  8) Control -------- */

typedef union {
  struct {
    uint8_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} EVSYS_CTRLA_Type;
# 59 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/* -------- EVSYS_SWEVT : (EVSYS Offset: 0x004) ( /W 32) Software Event -------- */

typedef union {
  struct {
    uint32_t CHANNEL0:1; /*!< bit:      0  Channel 0 Software Selection       */
    uint32_t CHANNEL1:1; /*!< bit:      1  Channel 1 Software Selection       */
    uint32_t CHANNEL2:1; /*!< bit:      2  Channel 2 Software Selection       */
    uint32_t CHANNEL3:1; /*!< bit:      3  Channel 3 Software Selection       */
    uint32_t CHANNEL4:1; /*!< bit:      4  Channel 4 Software Selection       */
    uint32_t CHANNEL5:1; /*!< bit:      5  Channel 5 Software Selection       */
    uint32_t CHANNEL6:1; /*!< bit:      6  Channel 6 Software Selection       */
    uint32_t CHANNEL7:1; /*!< bit:      7  Channel 7 Software Selection       */
    uint32_t CHANNEL8:1; /*!< bit:      8  Channel 8 Software Selection       */
    uint32_t CHANNEL9:1; /*!< bit:      9  Channel 9 Software Selection       */
    uint32_t CHANNEL10:1; /*!< bit:     10  Channel 10 Software Selection      */
    uint32_t CHANNEL11:1; /*!< bit:     11  Channel 11 Software Selection      */
    uint32_t CHANNEL12:1; /*!< bit:     12  Channel 12 Software Selection      */
    uint32_t CHANNEL13:1; /*!< bit:     13  Channel 13 Software Selection      */
    uint32_t CHANNEL14:1; /*!< bit:     14  Channel 14 Software Selection      */
    uint32_t CHANNEL15:1; /*!< bit:     15  Channel 15 Software Selection      */
    uint32_t CHANNEL16:1; /*!< bit:     16  Channel 16 Software Selection      */
    uint32_t CHANNEL17:1; /*!< bit:     17  Channel 17 Software Selection      */
    uint32_t CHANNEL18:1; /*!< bit:     18  Channel 18 Software Selection      */
    uint32_t CHANNEL19:1; /*!< bit:     19  Channel 19 Software Selection      */
    uint32_t CHANNEL20:1; /*!< bit:     20  Channel 20 Software Selection      */
    uint32_t CHANNEL21:1; /*!< bit:     21  Channel 21 Software Selection      */
    uint32_t CHANNEL22:1; /*!< bit:     22  Channel 22 Software Selection      */
    uint32_t CHANNEL23:1; /*!< bit:     23  Channel 23 Software Selection      */
    uint32_t CHANNEL24:1; /*!< bit:     24  Channel 24 Software Selection      */
    uint32_t CHANNEL25:1; /*!< bit:     25  Channel 25 Software Selection      */
    uint32_t CHANNEL26:1; /*!< bit:     26  Channel 26 Software Selection      */
    uint32_t CHANNEL27:1; /*!< bit:     27  Channel 27 Software Selection      */
    uint32_t CHANNEL28:1; /*!< bit:     28  Channel 28 Software Selection      */
    uint32_t CHANNEL29:1; /*!< bit:     29  Channel 29 Software Selection      */
    uint32_t CHANNEL30:1; /*!< bit:     30  Channel 30 Software Selection      */
    uint32_t CHANNEL31:1; /*!< bit:     31  Channel 31 Software Selection      */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t CHANNEL:32; /*!< bit:  0..31  Channel x Software Selection       */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EVSYS_SWEVT_Type;
# 175 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/* -------- EVSYS_PRICTRL : (EVSYS Offset: 0x008) (R/W  8) Priority Control -------- */

typedef union {
  struct {
    uint8_t PRI:4; /*!< bit:  0.. 3  Channel Priority Number            */
    uint8_t :3; /*!< bit:  4.. 6  Reserved                           */
    uint8_t RREN:1; /*!< bit:      7  Round-Robin Scheduling Enable      */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} EVSYS_PRICTRL_Type;
# 197 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/* -------- EVSYS_INTPEND : (EVSYS Offset: 0x010) (R/W 16) Channel Pending Interrupt -------- */

typedef union {
  struct {
    uint16_t ID:4; /*!< bit:  0.. 3  Channel ID                         */
    uint16_t :4; /*!< bit:  4.. 7  Reserved                           */
    uint16_t OVR:1; /*!< bit:      8  Channel Overrun                    */
    uint16_t EVD:1; /*!< bit:      9  Channel Event Detected             */
    uint16_t :4; /*!< bit: 10..13  Reserved                           */
    uint16_t READY:1; /*!< bit:     14  Ready                              */
    uint16_t BUSY:1; /*!< bit:     15  Busy                               */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} EVSYS_INTPEND_Type;
# 229 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/* -------- EVSYS_INTSTATUS : (EVSYS Offset: 0x014) (R/  32) Interrupt Status -------- */

typedef union {
  struct {
    uint32_t CHINT0:1; /*!< bit:      0  Channel 0 Pending Interrupt        */
    uint32_t CHINT1:1; /*!< bit:      1  Channel 1 Pending Interrupt        */
    uint32_t CHINT2:1; /*!< bit:      2  Channel 2 Pending Interrupt        */
    uint32_t CHINT3:1; /*!< bit:      3  Channel 3 Pending Interrupt        */
    uint32_t CHINT4:1; /*!< bit:      4  Channel 4 Pending Interrupt        */
    uint32_t CHINT5:1; /*!< bit:      5  Channel 5 Pending Interrupt        */
    uint32_t CHINT6:1; /*!< bit:      6  Channel 6 Pending Interrupt        */
    uint32_t CHINT7:1; /*!< bit:      7  Channel 7 Pending Interrupt        */
    uint32_t CHINT8:1; /*!< bit:      8  Channel 8 Pending Interrupt        */
    uint32_t CHINT9:1; /*!< bit:      9  Channel 9 Pending Interrupt        */
    uint32_t CHINT10:1; /*!< bit:     10  Channel 10 Pending Interrupt       */
    uint32_t CHINT11:1; /*!< bit:     11  Channel 11 Pending Interrupt       */
    uint32_t :20; /*!< bit: 12..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t CHINT:12; /*!< bit:  0..11  Channel x Pending Interrupt        */
    uint32_t :20; /*!< bit: 12..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EVSYS_INTSTATUS_Type;
# 287 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/* -------- EVSYS_BUSYCH : (EVSYS Offset: 0x018) (R/  32) Busy Channels -------- */

typedef union {
  struct {
    uint32_t BUSYCH0:1; /*!< bit:      0  Busy Channel 0                     */
    uint32_t BUSYCH1:1; /*!< bit:      1  Busy Channel 1                     */
    uint32_t BUSYCH2:1; /*!< bit:      2  Busy Channel 2                     */
    uint32_t BUSYCH3:1; /*!< bit:      3  Busy Channel 3                     */
    uint32_t BUSYCH4:1; /*!< bit:      4  Busy Channel 4                     */
    uint32_t BUSYCH5:1; /*!< bit:      5  Busy Channel 5                     */
    uint32_t BUSYCH6:1; /*!< bit:      6  Busy Channel 6                     */
    uint32_t BUSYCH7:1; /*!< bit:      7  Busy Channel 7                     */
    uint32_t BUSYCH8:1; /*!< bit:      8  Busy Channel 8                     */
    uint32_t BUSYCH9:1; /*!< bit:      9  Busy Channel 9                     */
    uint32_t BUSYCH10:1; /*!< bit:     10  Busy Channel 10                    */
    uint32_t BUSYCH11:1; /*!< bit:     11  Busy Channel 11                    */
    uint32_t :20; /*!< bit: 12..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t BUSYCH:12; /*!< bit:  0..11  Busy Channel x                     */
    uint32_t :20; /*!< bit: 12..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EVSYS_BUSYCH_Type;
# 345 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/* -------- EVSYS_READYUSR : (EVSYS Offset: 0x01C) (R/  32) Ready Users -------- */

typedef union {
  struct {
    uint32_t READYUSR0:1; /*!< bit:      0  Ready User for Channel 0           */
    uint32_t READYUSR1:1; /*!< bit:      1  Ready User for Channel 1           */
    uint32_t READYUSR2:1; /*!< bit:      2  Ready User for Channel 2           */
    uint32_t READYUSR3:1; /*!< bit:      3  Ready User for Channel 3           */
    uint32_t READYUSR4:1; /*!< bit:      4  Ready User for Channel 4           */
    uint32_t READYUSR5:1; /*!< bit:      5  Ready User for Channel 5           */
    uint32_t READYUSR6:1; /*!< bit:      6  Ready User for Channel 6           */
    uint32_t READYUSR7:1; /*!< bit:      7  Ready User for Channel 7           */
    uint32_t READYUSR8:1; /*!< bit:      8  Ready User for Channel 8           */
    uint32_t READYUSR9:1; /*!< bit:      9  Ready User for Channel 9           */
    uint32_t READYUSR10:1; /*!< bit:     10  Ready User for Channel 10          */
    uint32_t READYUSR11:1; /*!< bit:     11  Ready User for Channel 11          */
    uint32_t :20; /*!< bit: 12..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t READYUSR:12; /*!< bit:  0..11  Ready User for Channel x           */
    uint32_t :20; /*!< bit: 12..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EVSYS_READYUSR_Type;
# 403 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/* -------- EVSYS_CHANNEL : (EVSYS Offset: 0x020) (R/W 32) CHANNEL Channel n Control -------- */

typedef union {
  struct {
    uint32_t EVGEN:7; /*!< bit:  0.. 6  Event Generator Selection          */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t PATH:2; /*!< bit:  8.. 9  Path Selection                     */
    uint32_t EDGSEL:2; /*!< bit: 10..11  Edge Detection Selection           */
    uint32_t :2; /*!< bit: 12..13  Reserved                           */
    uint32_t RUNSTDBY:1; /*!< bit:     14  Run in standby                     */
    uint32_t ONDEMAND:1; /*!< bit:     15  Generic Clock On Demand            */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EVSYS_CHANNEL_Type;
# 452 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/* -------- EVSYS_CHINTENCLR : (EVSYS Offset: 0x024) (R/W  8) CHANNEL Channel n Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t OVR:1; /*!< bit:      0  Channel Overrun Interrupt Disable  */
    uint8_t EVD:1; /*!< bit:      1  Channel Event Detected Interrupt Disable */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} EVSYS_CHINTENCLR_Type;
# 473 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/* -------- EVSYS_CHINTENSET : (EVSYS Offset: 0x025) (R/W  8) CHANNEL Channel n Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t OVR:1; /*!< bit:      0  Channel Overrun Interrupt Enable   */
    uint8_t EVD:1; /*!< bit:      1  Channel Event Detected Interrupt Enable */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} EVSYS_CHINTENSET_Type;
# 494 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/* -------- EVSYS_CHINTFLAG : (EVSYS Offset: 0x026) (R/W  8) CHANNEL Channel n Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t OVR:1; /*!< bit:      0  Channel Overrun                    */
    volatile /*!< Defines 'read only' permissions */ uint8_t EVD:1; /*!< bit:      1  Channel Event Detected             */
    volatile /*!< Defines 'read only' permissions */ uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} EVSYS_CHINTFLAG_Type;
# 515 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/* -------- EVSYS_CHSTATUS : (EVSYS Offset: 0x027) (R/   8) CHANNEL Channel n Status -------- */

typedef union {
  struct {
    uint8_t RDYUSR:1; /*!< bit:      0  Ready User                         */
    uint8_t BUSYCH:1; /*!< bit:      1  Busy Channel                       */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} EVSYS_CHSTATUS_Type;
# 536 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/* -------- EVSYS_USER : (EVSYS Offset: 0x120) (R/W 32) User Multiplexer n -------- */

typedef union {
  struct {
    uint32_t CHANNEL:6; /*!< bit:  0.. 5  Channel Event Selection            */
    uint32_t :26; /*!< bit:  6..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} EVSYS_USER_Type;
# 555 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/evsys.h"
/** \brief EvsysChannel hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ EVSYS_CHANNEL_Type CHANNEL; /**< \brief Offset: 0x000 (R/W 32) Channel n Control */
  volatile /*!< Defines 'read / write' permissions */ EVSYS_CHINTENCLR_Type CHINTENCLR; /**< \brief Offset: 0x004 (R/W  8) Channel n Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ EVSYS_CHINTENSET_Type CHINTENSET; /**< \brief Offset: 0x005 (R/W  8) Channel n Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ EVSYS_CHINTFLAG_Type CHINTFLAG; /**< \brief Offset: 0x006 (R/W  8) Channel n Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read only' permissions */ EVSYS_CHSTATUS_Type CHSTATUS; /**< \brief Offset: 0x007 (R/   8) Channel n Status */
} EvsysChannel;


/** \brief EVSYS hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ EVSYS_CTRLA_Type CTRLA; /**< \brief Offset: 0x000 (R/W  8) Control */
       RoReg8 Reserved1[0x3];
  volatile /*!< Defines 'write only' permissions */ EVSYS_SWEVT_Type SWEVT; /**< \brief Offset: 0x004 ( /W 32) Software Event */
  volatile /*!< Defines 'read / write' permissions */ EVSYS_PRICTRL_Type PRICTRL; /**< \brief Offset: 0x008 (R/W  8) Priority Control */
       RoReg8 Reserved2[0x7];
  volatile /*!< Defines 'read / write' permissions */ EVSYS_INTPEND_Type INTPEND; /**< \brief Offset: 0x010 (R/W 16) Channel Pending Interrupt */
       RoReg8 Reserved3[0x2];
  volatile /*!< Defines 'read only' permissions */ EVSYS_INTSTATUS_Type INTSTATUS; /**< \brief Offset: 0x014 (R/  32) Interrupt Status */
  volatile /*!< Defines 'read only' permissions */ EVSYS_BUSYCH_Type BUSYCH; /**< \brief Offset: 0x018 (R/  32) Busy Channels */
  volatile /*!< Defines 'read only' permissions */ EVSYS_READYUSR_Type READYUSR; /**< \brief Offset: 0x01C (R/  32) Ready Users */
       EvsysChannel Channel[32]; /**< \brief Offset: 0x020 EvsysChannel groups [CHANNELS] */
  volatile /*!< Defines 'read / write' permissions */ EVSYS_USER_Type USER[67]; /**< \brief Offset: 0x120 (R/W 32) User Multiplexer n */
} Evsys;


/*@}*/
# 586 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/freqm.h" 1
/**
 * \file
 *
 * \brief Component description for FREQM
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR FREQM */
/* ========================================================================== */
/** \addtogroup SAMD51_FREQM Frequency Meter */
/*@{*/




/* -------- FREQM_CTRLA : (FREQM Offset: 0x00) (R/W  8) Control A Register -------- */

typedef union {
  struct {
    uint8_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint8_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} FREQM_CTRLA_Type;
# 62 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/freqm.h"
/* -------- FREQM_CTRLB : (FREQM Offset: 0x01) ( /W  8) Control B Register -------- */

typedef union {
  struct {
    uint8_t START:1; /*!< bit:      0  Start Measurement                  */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} FREQM_CTRLB_Type;
# 80 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/freqm.h"
/* -------- FREQM_CFGA : (FREQM Offset: 0x02) (R/W 16) Config A register -------- */

typedef union {
  struct {
    uint16_t REFNUM:8; /*!< bit:  0.. 7  Number of Reference Clock Cycles   */
    uint16_t :8; /*!< bit:  8..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} FREQM_CFGA_Type;
# 99 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/freqm.h"
/* -------- FREQM_INTENCLR : (FREQM Offset: 0x08) (R/W  8) Interrupt Enable Clear Register -------- */

typedef union {
  struct {
    uint8_t DONE:1; /*!< bit:      0  Measurement Done Interrupt Enable  */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} FREQM_INTENCLR_Type;
# 117 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/freqm.h"
/* -------- FREQM_INTENSET : (FREQM Offset: 0x09) (R/W  8) Interrupt Enable Set Register -------- */

typedef union {
  struct {
    uint8_t DONE:1; /*!< bit:      0  Measurement Done Interrupt Enable  */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} FREQM_INTENSET_Type;
# 135 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/freqm.h"
/* -------- FREQM_INTFLAG : (FREQM Offset: 0x0A) (R/W  8) Interrupt Flag Register -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t DONE:1; /*!< bit:      0  Measurement Done                   */
    volatile /*!< Defines 'read only' permissions */ uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} FREQM_INTFLAG_Type;
# 153 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/freqm.h"
/* -------- FREQM_STATUS : (FREQM Offset: 0x0B) (R/W  8) Status Register -------- */

typedef union {
  struct {
    uint8_t BUSY:1; /*!< bit:      0  FREQM Status                       */
    uint8_t OVF:1; /*!< bit:      1  Sticky Count Value Overflow        */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} FREQM_STATUS_Type;
# 174 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/freqm.h"
/* -------- FREQM_SYNCBUSY : (FREQM Offset: 0x0C) (R/  32) Synchronization Busy Register -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t :30; /*!< bit:  2..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} FREQM_SYNCBUSY_Type;
# 195 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/freqm.h"
/* -------- FREQM_VALUE : (FREQM Offset: 0x10) (R/  32) Count Value Register -------- */

typedef union {
  struct {
    uint32_t VALUE:24; /*!< bit:  0..23  Measurement Value                  */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} FREQM_VALUE_Type;
# 214 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/freqm.h"
/** \brief FREQM hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ FREQM_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W  8) Control A Register */
  volatile /*!< Defines 'write only' permissions */ FREQM_CTRLB_Type CTRLB; /**< \brief Offset: 0x01 ( /W  8) Control B Register */
  volatile /*!< Defines 'read / write' permissions */ FREQM_CFGA_Type CFGA; /**< \brief Offset: 0x02 (R/W 16) Config A register */
       RoReg8 Reserved1[0x4];
  volatile /*!< Defines 'read / write' permissions */ FREQM_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x08 (R/W  8) Interrupt Enable Clear Register */
  volatile /*!< Defines 'read / write' permissions */ FREQM_INTENSET_Type INTENSET; /**< \brief Offset: 0x09 (R/W  8) Interrupt Enable Set Register */
  volatile /*!< Defines 'read / write' permissions */ FREQM_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x0A (R/W  8) Interrupt Flag Register */
  volatile /*!< Defines 'read / write' permissions */ FREQM_STATUS_Type STATUS; /**< \brief Offset: 0x0B (R/W  8) Status Register */
  volatile /*!< Defines 'read only' permissions */ FREQM_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x0C (R/  32) Synchronization Busy Register */
  volatile /*!< Defines 'read only' permissions */ FREQM_VALUE_Type VALUE; /**< \brief Offset: 0x10 (R/  32) Count Value Register */
} Freqm;


/*@}*/
# 587 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/gclk.h" 1
/**
 * \file
 *
 * \brief Component description for GCLK
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR GCLK */
/* ========================================================================== */
/** \addtogroup SAMD51_GCLK Generic Clock Generator */
/*@{*/




/* -------- GCLK_CTRLA : (GCLK Offset: 0x00) (R/W  8) Control -------- */

typedef union {
  struct {
    uint8_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} GCLK_CTRLA_Type;
# 59 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/gclk.h"
/* -------- GCLK_SYNCBUSY : (GCLK Offset: 0x04) (R/  32) Synchronization Busy -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset Synchroniation Busy bit */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t GENCTRL0:1; /*!< bit:      2  Generic Clock Generator Control 0 Synchronization Busy bits */
    uint32_t GENCTRL1:1; /*!< bit:      3  Generic Clock Generator Control 1 Synchronization Busy bits */
    uint32_t GENCTRL2:1; /*!< bit:      4  Generic Clock Generator Control 2 Synchronization Busy bits */
    uint32_t GENCTRL3:1; /*!< bit:      5  Generic Clock Generator Control 3 Synchronization Busy bits */
    uint32_t GENCTRL4:1; /*!< bit:      6  Generic Clock Generator Control 4 Synchronization Busy bits */
    uint32_t GENCTRL5:1; /*!< bit:      7  Generic Clock Generator Control 5 Synchronization Busy bits */
    uint32_t GENCTRL6:1; /*!< bit:      8  Generic Clock Generator Control 6 Synchronization Busy bits */
    uint32_t GENCTRL7:1; /*!< bit:      9  Generic Clock Generator Control 7 Synchronization Busy bits */
    uint32_t GENCTRL8:1; /*!< bit:     10  Generic Clock Generator Control 8 Synchronization Busy bits */
    uint32_t GENCTRL9:1; /*!< bit:     11  Generic Clock Generator Control 9 Synchronization Busy bits */
    uint32_t GENCTRL10:1; /*!< bit:     12  Generic Clock Generator Control 10 Synchronization Busy bits */
    uint32_t GENCTRL11:1; /*!< bit:     13  Generic Clock Generator Control 11 Synchronization Busy bits */
    uint32_t :18; /*!< bit: 14..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint32_t GENCTRL:12; /*!< bit:  2..13  Generic Clock Generator Control x Synchronization Busy bits */
    uint32_t :18; /*!< bit: 14..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} GCLK_SYNCBUSY_Type;
# 146 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/gclk.h"
/* -------- GCLK_GENCTRL : (GCLK Offset: 0x20) (R/W 32) Generic Clock Generator Control -------- */

typedef union {
  struct {
    uint32_t SRC:4; /*!< bit:  0.. 3  Source Select                      */
    uint32_t :4; /*!< bit:  4.. 7  Reserved                           */
    uint32_t GENEN:1; /*!< bit:      8  Generic Clock Generator Enable     */
    uint32_t IDC:1; /*!< bit:      9  Improve Duty Cycle                 */
    uint32_t OOV:1; /*!< bit:     10  Output Off Value                   */
    uint32_t OE:1; /*!< bit:     11  Output Enable                      */
    uint32_t DIVSEL:1; /*!< bit:     12  Divide Selection                   */
    uint32_t RUNSTDBY:1; /*!< bit:     13  Run in Standby                     */
    uint32_t :2; /*!< bit: 14..15  Reserved                           */
    uint32_t DIV:16; /*!< bit: 16..31  Division Factor                    */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} GCLK_GENCTRL_Type;
# 206 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/gclk.h"
/* -------- GCLK_PCHCTRL : (GCLK Offset: 0x80) (R/W 32) Peripheral Clock Control -------- */

typedef union {
  struct {
    uint32_t GEN:4; /*!< bit:  0.. 3  Generic Clock Generator            */
    uint32_t :2; /*!< bit:  4.. 5  Reserved                           */
    uint32_t CHEN:1; /*!< bit:      6  Channel Enable                     */
    uint32_t WRTLOCK:1; /*!< bit:      7  Write Lock                         */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} GCLK_PCHCTRL_Type;
# 256 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/gclk.h"
/** \brief GCLK hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ GCLK_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W  8) Control */
       RoReg8 Reserved1[0x3];
  volatile /*!< Defines 'read only' permissions */ GCLK_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x04 (R/  32) Synchronization Busy */
       RoReg8 Reserved2[0x18];
  volatile /*!< Defines 'read / write' permissions */ GCLK_GENCTRL_Type GENCTRL[12]; /**< \brief Offset: 0x20 (R/W 32) Generic Clock Generator Control */
       RoReg8 Reserved3[0x30];
  volatile /*!< Defines 'read / write' permissions */ GCLK_PCHCTRL_Type PCHCTRL[48]; /**< \brief Offset: 0x80 (R/W 32) Peripheral Clock Control */
} Gclk;


/*@}*/
# 588 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/hmatrixb.h" 1
/**
 * \file
 *
 * \brief Component description for HMATRIXB
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR HMATRIXB */
/* ========================================================================== */
/** \addtogroup SAMD51_HMATRIXB HSB Matrix */
/*@{*/




/* -------- HMATRIXB_PRAS : (HMATRIXB Offset: 0x080) (R/W 32) PRS Priority A for Slave -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} HMATRIXB_PRAS_Type;







/* -------- HMATRIXB_PRBS : (HMATRIXB Offset: 0x084) (R/W 32) PRS Priority B for Slave -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} HMATRIXB_PRBS_Type;







/** \brief HmatrixbPrs hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ HMATRIXB_PRAS_Type PRAS; /**< \brief Offset: 0x000 (R/W 32) Priority A for Slave */
  volatile /*!< Defines 'read / write' permissions */ HMATRIXB_PRBS_Type PRBS; /**< \brief Offset: 0x004 (R/W 32) Priority B for Slave */
} HmatrixbPrs;


/** \brief HMATRIXB hardware registers */

typedef struct {
       RoReg8 Reserved1[0x80];
       HmatrixbPrs Prs[5]; /**< \brief Offset: 0x080 HmatrixbPrs groups [CLK_AHB_ID] */
} Hmatrixb;


/*@}*/
# 589 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h" 1
/**
 * \file
 *
 * \brief Component description for ICM
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR ICM */
/* ========================================================================== */
/** \addtogroup SAMD51_ICM Integrity Check Monitor */
/*@{*/




/* -------- ICM_CFG : (ICM Offset: 0x00) (R/W 32) Configuration -------- */

typedef union {
  struct {
    uint32_t WBDIS:1; /*!< bit:      0  Write Back Disable                 */
    uint32_t EOMDIS:1; /*!< bit:      1  End of Monitoring Disable          */
    uint32_t SLBDIS:1; /*!< bit:      2  Secondary List Branching Disable   */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t BBC:4; /*!< bit:  4.. 7  Bus Burden Control                 */
    uint32_t ASCD:1; /*!< bit:      8  Automatic Switch To Compare Digest */
    uint32_t DUALBUFF:1; /*!< bit:      9  Dual Input Buffer                  */
    uint32_t :2; /*!< bit: 10..11  Reserved                           */
    uint32_t UIHASH:1; /*!< bit:     12  User Initial Hash Value            */
    uint32_t UALGO:3; /*!< bit: 13..15  User SHA Algorithm                 */
    uint32_t HAPROT:6; /*!< bit: 16..21  Region Hash Area Protection        */
    uint32_t :2; /*!< bit: 22..23  Reserved                           */
    uint32_t DAPROT:6; /*!< bit: 24..29  Region Descriptor Area Protection  */
    uint32_t :2; /*!< bit: 30..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_CFG_Type;
# 99 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_CTRL : (ICM Offset: 0x04) ( /W 32) Control -------- */

typedef union {
  struct {
    uint32_t ENABLE:1; /*!< bit:      0  ICM Enable                         */
    uint32_t DISABLE:1; /*!< bit:      1  ICM Disable Register               */
    uint32_t SWRST:1; /*!< bit:      2  Software Reset                     */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t REHASH:4; /*!< bit:  4.. 7  Recompute Internal Hash            */
    uint32_t RMDIS:4; /*!< bit:  8..11  Region Monitoring Disable          */
    uint32_t RMEN:4; /*!< bit: 12..15  Region Monitoring Enable           */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_CTRL_Type;
# 135 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_SR : (ICM Offset: 0x08) (R/  32) Status -------- */

typedef union {
  struct {
    uint32_t ENABLE:1; /*!< bit:      0  ICM Controller Enable Register     */
    uint32_t :7; /*!< bit:  1.. 7  Reserved                           */
    uint32_t RAWRMDIS:4; /*!< bit:  8..11  RAW Region Monitoring Disabled Status */
    uint32_t RMDIS:4; /*!< bit: 12..15  Region Monitoring Disabled Status  */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_SR_Type;
# 162 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_IER : (ICM Offset: 0x10) ( /W 32) Interrupt Enable -------- */

typedef union {
  struct {
    uint32_t RHC:4; /*!< bit:  0.. 3  Region Hash Completed Interrupt Enable */
    uint32_t RDM:4; /*!< bit:  4.. 7  Region Digest Mismatch Interrupt Enable */
    uint32_t RBE:4; /*!< bit:  8..11  Region Bus Error Interrupt Enable  */
    uint32_t RWC:4; /*!< bit: 12..15  Region Wrap Condition detected Interrupt Enable */
    uint32_t REC:4; /*!< bit: 16..19  Region End bit Condition Detected Interrupt Enable */
    uint32_t RSU:4; /*!< bit: 20..23  Region Status Updated Interrupt Disable */
    uint32_t URAD:1; /*!< bit:     24  Undefined Register Access Detection Interrupt Enable */
    uint32_t :7; /*!< bit: 25..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_IER_Type;
# 203 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_IDR : (ICM Offset: 0x14) ( /W 32) Interrupt Disable -------- */

typedef union {
  struct {
    uint32_t RHC:4; /*!< bit:  0.. 3  Region Hash Completed Interrupt Disable */
    uint32_t RDM:4; /*!< bit:  4.. 7  Region Digest Mismatch Interrupt Disable */
    uint32_t RBE:4; /*!< bit:  8..11  Region Bus Error Interrupt Disable */
    uint32_t RWC:4; /*!< bit: 12..15  Region Wrap Condition Detected Interrupt Disable */
    uint32_t REC:4; /*!< bit: 16..19  Region End bit Condition detected Interrupt Disable */
    uint32_t RSU:4; /*!< bit: 20..23  Region Status Updated Interrupt Disable */
    uint32_t URAD:1; /*!< bit:     24  Undefined Register Access Detection Interrupt Disable */
    uint32_t :7; /*!< bit: 25..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_IDR_Type;
# 245 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_IMR : (ICM Offset: 0x18) (R/  32) Interrupt Mask -------- */

typedef union {
  struct {
    uint32_t RHC:4; /*!< bit:  0.. 3  Region Hash Completed Interrupt Mask */
    uint32_t RDM:4; /*!< bit:  4.. 7  Region Digest Mismatch Interrupt Mask */
    uint32_t RBE:4; /*!< bit:  8..11  Region Bus Error Interrupt Mask    */
    uint32_t RWC:4; /*!< bit: 12..15  Region Wrap Condition Detected Interrupt Mask */
    uint32_t REC:4; /*!< bit: 16..19  Region End bit Condition Detected Interrupt Mask */
    uint32_t RSU:4; /*!< bit: 20..23  Region Status Updated Interrupt Mask */
    uint32_t URAD:1; /*!< bit:     24  Undefined Register Access Detection Interrupt Mask */
    uint32_t :7; /*!< bit: 25..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_IMR_Type;
# 287 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_ISR : (ICM Offset: 0x1C) (R/  32) Interrupt Status -------- */

typedef union {
  struct {
    uint32_t RHC:4; /*!< bit:  0.. 3  Region Hash Completed              */
    uint32_t RDM:4; /*!< bit:  4.. 7  Region Digest Mismatch             */
    uint32_t RBE:4; /*!< bit:  8..11  Region Bus Error                   */
    uint32_t RWC:4; /*!< bit: 12..15  Region Wrap Condition Detected     */
    uint32_t REC:4; /*!< bit: 16..19  Region End bit Condition Detected  */
    uint32_t RSU:4; /*!< bit: 20..23  Region Status Updated Detected     */
    uint32_t URAD:1; /*!< bit:     24  Undefined Register Access Detection Status */
    uint32_t :7; /*!< bit: 25..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_ISR_Type;
# 329 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_UASR : (ICM Offset: 0x20) (R/  32) Undefined Access Status -------- */

typedef union {
  struct {
    uint32_t URAT:3; /*!< bit:  0.. 2  Undefined Register Access Trace    */
    uint32_t :29; /*!< bit:  3..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_UASR_Type;
# 358 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_DSCR : (ICM Offset: 0x30) (R/W 32) Region Descriptor Area Start Address -------- */

typedef union {
  struct {
    uint32_t :6; /*!< bit:  0.. 5  Reserved                           */
    uint32_t DASA:26; /*!< bit:  6..31  Descriptor Area Start Address      */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_DSCR_Type;
# 377 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_HASH : (ICM Offset: 0x34) (R/W 32) Region Hash Area Start Address -------- */

typedef union {
  struct {
    uint32_t :7; /*!< bit:  0.. 6  Reserved                           */
    uint32_t HASA:25; /*!< bit:  7..31  Hash Area Start Address            */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_HASH_Type;
# 396 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_UIHVAL : (ICM Offset: 0x38) ( /W 32) User Initial Hash Value n -------- */

typedef union {
  struct {
    uint32_t VAL:32; /*!< bit:  0..31  Initial Hash Value                 */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_UIHVAL_Type;
# 414 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_RADDR : (ICM Offset: 0x00) (R/W 32) Region Start Address -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} ICM_RADDR_Type;





/* -------- ICM_RCFG : (ICM Offset: 0x04) (R/W 32) Region Configuration -------- */

typedef union {
  struct {
    uint32_t CDWBN:1; /*!< bit:      0  Compare Digest Write Back          */
    uint32_t WRAP:1; /*!< bit:      1  Region Wrap                        */
    uint32_t EOM:1; /*!< bit:      2  End of Monitoring                  */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t RHIEN:1; /*!< bit:      4  Region Hash Interrupt Enable       */
    uint32_t DMIEN:1; /*!< bit:      5  Region Digest Mismatch Interrupt Enable */
    uint32_t BEIEN:1; /*!< bit:      6  Region Bus Error Interrupt Enable  */
    uint32_t WCIEN:1; /*!< bit:      7  Region Wrap Condition Detected Interrupt Enable */
    uint32_t ECIEN:1; /*!< bit:      8  Region End bit Condition detected Interrupt Enable */
    uint32_t SUIEN:1; /*!< bit:      9  Region Status Updated Interrupt Enable */
    uint32_t PROCDLY:1; /*!< bit:     10  SHA Processing Delay               */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t ALGO:3; /*!< bit: 12..14  SHA Algorithm                      */
    uint32_t :9; /*!< bit: 15..23  Reserved                           */
    uint32_t MRPROT:6; /*!< bit: 24..29  Memory Region AHB Protection       */
    uint32_t :2; /*!< bit: 30..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_RCFG_Type;
# 520 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_RCTRL : (ICM Offset: 0x08) (R/W 32) Region Control -------- */

typedef union {
  struct {
    uint32_t TRSIZE:16; /*!< bit:  0..15  Transfer Size                      */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} ICM_RCTRL_Type;
# 538 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/icm.h"
/* -------- ICM_RNEXT : (ICM Offset: 0x0C) (R/W 32) Region Next Address -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} ICM_RNEXT_Type;





/** \brief ICM APB hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ ICM_CFG_Type CFG; /**< \brief Offset: 0x00 (R/W 32) Configuration */
  volatile /*!< Defines 'write only' permissions */ ICM_CTRL_Type CTRL; /**< \brief Offset: 0x04 ( /W 32) Control */
  volatile /*!< Defines 'read only' permissions */ ICM_SR_Type SR; /**< \brief Offset: 0x08 (R/  32) Status */
       RoReg8 Reserved1[0x4];
  volatile /*!< Defines 'write only' permissions */ ICM_IER_Type IER; /**< \brief Offset: 0x10 ( /W 32) Interrupt Enable */
  volatile /*!< Defines 'write only' permissions */ ICM_IDR_Type IDR; /**< \brief Offset: 0x14 ( /W 32) Interrupt Disable */
  volatile /*!< Defines 'read only' permissions */ ICM_IMR_Type IMR; /**< \brief Offset: 0x18 (R/  32) Interrupt Mask */
  volatile /*!< Defines 'read only' permissions */ ICM_ISR_Type ISR; /**< \brief Offset: 0x1C (R/  32) Interrupt Status */
  volatile /*!< Defines 'read only' permissions */ ICM_UASR_Type UASR; /**< \brief Offset: 0x20 (R/  32) Undefined Access Status */
       RoReg8 Reserved2[0xC];
  volatile /*!< Defines 'read / write' permissions */ ICM_DSCR_Type DSCR; /**< \brief Offset: 0x30 (R/W 32) Region Descriptor Area Start Address */
  volatile /*!< Defines 'read / write' permissions */ ICM_HASH_Type HASH; /**< \brief Offset: 0x34 (R/W 32) Region Hash Area Start Address */
  volatile /*!< Defines 'write only' permissions */ ICM_UIHVAL_Type UIHVAL[8]; /**< \brief Offset: 0x38 ( /W 32) User Initial Hash Value n */
} Icm;


/** \brief ICM Descriptor SRAM registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ ICM_RADDR_Type RADDR; /**< \brief Offset: 0x00 (R/W 32) Region Start Address */
  volatile /*!< Defines 'read / write' permissions */ ICM_RCFG_Type RCFG; /**< \brief Offset: 0x04 (R/W 32) Region Configuration */
  volatile /*!< Defines 'read / write' permissions */ ICM_RCTRL_Type RCTRL; /**< \brief Offset: 0x08 (R/W 32) Region Control */
  volatile /*!< Defines 'read / write' permissions */ ICM_RNEXT_Type RNEXT; /**< \brief Offset: 0x0C (R/W 32) Region Next Address */
} IcmDescriptor;




/*@}*/
# 590 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/i2s.h" 1
/**
 * \file
 *
 * \brief Component description for I2S
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR I2S */
/* ========================================================================== */
/** \addtogroup SAMD51_I2S Inter-IC Sound Interface */
/*@{*/




/* -------- I2S_CTRLA : (I2S Offset: 0x00) (R/W  8) Control A -------- */

typedef union {
  struct {
    uint8_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint8_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint8_t CKEN0:1; /*!< bit:      2  Clock Unit 0 Enable                */
    uint8_t CKEN1:1; /*!< bit:      3  Clock Unit 1 Enable                */
    uint8_t TXEN:1; /*!< bit:      4  Tx Serializer Enable               */
    uint8_t RXEN:1; /*!< bit:      5  Rx Serializer Enable               */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint8_t CKEN:2; /*!< bit:  2.. 3  Clock Unit x Enable                */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} I2S_CTRLA_Type;
# 82 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/i2s.h"
/* -------- I2S_CLKCTRL : (I2S Offset: 0x04) (R/W 32) Clock Unit n Control -------- */

typedef union {
  struct {
    uint32_t SLOTSIZE:2; /*!< bit:  0.. 1  Slot Size                          */
    uint32_t NBSLOTS:3; /*!< bit:  2.. 4  Number of Slots in Frame           */
    uint32_t FSWIDTH:2; /*!< bit:  5.. 6  Frame Sync Width                   */
    uint32_t BITDELAY:1; /*!< bit:      7  Data Delay from Frame Sync         */
    uint32_t FSSEL:1; /*!< bit:      8  Frame Sync Select                  */
    uint32_t FSINV:1; /*!< bit:      9  Frame Sync Invert                  */
    uint32_t FSOUTINV:1; /*!< bit:     10  Frame Sync Output Invert           */
    uint32_t SCKSEL:1; /*!< bit:     11  Serial Clock Select                */
    uint32_t SCKOUTINV:1; /*!< bit:     12  Serial Clock Output Invert         */
    uint32_t MCKSEL:1; /*!< bit:     13  Master Clock Select                */
    uint32_t MCKEN:1; /*!< bit:     14  Master Clock Enable                */
    uint32_t MCKOUTINV:1; /*!< bit:     15  Master Clock Output Invert         */
    uint32_t MCKDIV:6; /*!< bit: 16..21  Master Clock Division Factor       */
    uint32_t :2; /*!< bit: 22..23  Reserved                           */
    uint32_t MCKOUTDIV:6; /*!< bit: 24..29  Master Clock Output Division Factor */
    uint32_t :2; /*!< bit: 30..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} I2S_CLKCTRL_Type;
# 177 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/i2s.h"
/* -------- I2S_INTENCLR : (I2S Offset: 0x0C) (R/W 16) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint16_t RXRDY0:1; /*!< bit:      0  Receive Ready 0 Interrupt Enable   */
    uint16_t RXRDY1:1; /*!< bit:      1  Receive Ready 1 Interrupt Enable   */
    uint16_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint16_t RXOR0:1; /*!< bit:      4  Receive Overrun 0 Interrupt Enable */
    uint16_t RXOR1:1; /*!< bit:      5  Receive Overrun 1 Interrupt Enable */
    uint16_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint16_t TXRDY0:1; /*!< bit:      8  Transmit Ready 0 Interrupt Enable  */
    uint16_t TXRDY1:1; /*!< bit:      9  Transmit Ready 1 Interrupt Enable  */
    uint16_t :2; /*!< bit: 10..11  Reserved                           */
    uint16_t TXUR0:1; /*!< bit:     12  Transmit Underrun 0 Interrupt Enable */
    uint16_t TXUR1:1; /*!< bit:     13  Transmit Underrun 1 Interrupt Enable */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t RXRDY:2; /*!< bit:  0.. 1  Receive Ready x Interrupt Enable   */
    uint16_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint16_t RXOR:2; /*!< bit:  4.. 5  Receive Overrun x Interrupt Enable */
    uint16_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint16_t TXRDY:2; /*!< bit:  8.. 9  Transmit Ready x Interrupt Enable  */
    uint16_t :2; /*!< bit: 10..11  Reserved                           */
    uint16_t TXUR:2; /*!< bit: 12..13  Transmit Underrun x Interrupt Enable */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} I2S_INTENCLR_Type;
# 241 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/i2s.h"
/* -------- I2S_INTENSET : (I2S Offset: 0x10) (R/W 16) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint16_t RXRDY0:1; /*!< bit:      0  Receive Ready 0 Interrupt Enable   */
    uint16_t RXRDY1:1; /*!< bit:      1  Receive Ready 1 Interrupt Enable   */
    uint16_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint16_t RXOR0:1; /*!< bit:      4  Receive Overrun 0 Interrupt Enable */
    uint16_t RXOR1:1; /*!< bit:      5  Receive Overrun 1 Interrupt Enable */
    uint16_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint16_t TXRDY0:1; /*!< bit:      8  Transmit Ready 0 Interrupt Enable  */
    uint16_t TXRDY1:1; /*!< bit:      9  Transmit Ready 1 Interrupt Enable  */
    uint16_t :2; /*!< bit: 10..11  Reserved                           */
    uint16_t TXUR0:1; /*!< bit:     12  Transmit Underrun 0 Interrupt Enable */
    uint16_t TXUR1:1; /*!< bit:     13  Transmit Underrun 1 Interrupt Enable */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t RXRDY:2; /*!< bit:  0.. 1  Receive Ready x Interrupt Enable   */
    uint16_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint16_t RXOR:2; /*!< bit:  4.. 5  Receive Overrun x Interrupt Enable */
    uint16_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint16_t TXRDY:2; /*!< bit:  8.. 9  Transmit Ready x Interrupt Enable  */
    uint16_t :2; /*!< bit: 10..11  Reserved                           */
    uint16_t TXUR:2; /*!< bit: 12..13  Transmit Underrun x Interrupt Enable */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} I2S_INTENSET_Type;
# 305 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/i2s.h"
/* -------- I2S_INTFLAG : (I2S Offset: 0x14) (R/W 16) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint16_t RXRDY0:1; /*!< bit:      0  Receive Ready 0                    */
    volatile /*!< Defines 'read only' permissions */ uint16_t RXRDY1:1; /*!< bit:      1  Receive Ready 1                    */
    volatile /*!< Defines 'read only' permissions */ uint16_t :2; /*!< bit:  2.. 3  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint16_t RXOR0:1; /*!< bit:      4  Receive Overrun 0                  */
    volatile /*!< Defines 'read only' permissions */ uint16_t RXOR1:1; /*!< bit:      5  Receive Overrun 1                  */
    volatile /*!< Defines 'read only' permissions */ uint16_t :2; /*!< bit:  6.. 7  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint16_t TXRDY0:1; /*!< bit:      8  Transmit Ready 0                   */
    volatile /*!< Defines 'read only' permissions */ uint16_t TXRDY1:1; /*!< bit:      9  Transmit Ready 1                   */
    volatile /*!< Defines 'read only' permissions */ uint16_t :2; /*!< bit: 10..11  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint16_t TXUR0:1; /*!< bit:     12  Transmit Underrun 0                */
    volatile /*!< Defines 'read only' permissions */ uint16_t TXUR1:1; /*!< bit:     13  Transmit Underrun 1                */
    volatile /*!< Defines 'read only' permissions */ uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint16_t RXRDY:2; /*!< bit:  0.. 1  Receive Ready x                    */
    volatile /*!< Defines 'read only' permissions */ uint16_t :2; /*!< bit:  2.. 3  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint16_t RXOR:2; /*!< bit:  4.. 5  Receive Overrun x                  */
    volatile /*!< Defines 'read only' permissions */ uint16_t :2; /*!< bit:  6.. 7  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint16_t TXRDY:2; /*!< bit:  8.. 9  Transmit Ready x                   */
    volatile /*!< Defines 'read only' permissions */ uint16_t :2; /*!< bit: 10..11  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint16_t TXUR:2; /*!< bit: 12..13  Transmit Underrun x                */
    volatile /*!< Defines 'read only' permissions */ uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} I2S_INTFLAG_Type;
# 369 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/i2s.h"
/* -------- I2S_SYNCBUSY : (I2S Offset: 0x18) (R/  16) Synchronization Status -------- */

typedef union {
  struct {
    uint16_t SWRST:1; /*!< bit:      0  Software Reset Synchronization Status */
    uint16_t ENABLE:1; /*!< bit:      1  Enable Synchronization Status      */
    uint16_t CKEN0:1; /*!< bit:      2  Clock Unit 0 Enable Synchronization Status */
    uint16_t CKEN1:1; /*!< bit:      3  Clock Unit 1 Enable Synchronization Status */
    uint16_t TXEN:1; /*!< bit:      4  Tx Serializer Enable Synchronization Status */
    uint16_t RXEN:1; /*!< bit:      5  Rx Serializer Enable Synchronization Status */
    uint16_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint16_t TXDATA:1; /*!< bit:      8  Tx Data Synchronization Status     */
    uint16_t RXDATA:1; /*!< bit:      9  Rx Data Synchronization Status     */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint16_t CKEN:2; /*!< bit:  2.. 3  Clock Unit x Enable Synchronization Status */
    uint16_t :12; /*!< bit:  4..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} I2S_SYNCBUSY_Type;
# 417 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/i2s.h"
/* -------- I2S_TXCTRL : (I2S Offset: 0x20) (R/W 32) Tx Serializer Control -------- */

typedef union {
  struct {
    uint32_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint32_t TXDEFAULT:2; /*!< bit:  2.. 3  Line Default Line when Slot Disabled */
    uint32_t TXSAME:1; /*!< bit:      4  Transmit Data when Underrun        */
    uint32_t :2; /*!< bit:  5.. 6  Reserved                           */
    uint32_t SLOTADJ:1; /*!< bit:      7  Data Slot Formatting Adjust        */
    uint32_t DATASIZE:3; /*!< bit:  8..10  Data Word Size                     */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t WORDADJ:1; /*!< bit:     12  Data Word Formatting Adjust        */
    uint32_t EXTEND:2; /*!< bit: 13..14  Data Formatting Bit Extension      */
    uint32_t BITREV:1; /*!< bit:     15  Data Formatting Bit Reverse        */
    uint32_t SLOTDIS0:1; /*!< bit:     16  Slot 0 Disabled for this Serializer */
    uint32_t SLOTDIS1:1; /*!< bit:     17  Slot 1 Disabled for this Serializer */
    uint32_t SLOTDIS2:1; /*!< bit:     18  Slot 2 Disabled for this Serializer */
    uint32_t SLOTDIS3:1; /*!< bit:     19  Slot 3 Disabled for this Serializer */
    uint32_t SLOTDIS4:1; /*!< bit:     20  Slot 4 Disabled for this Serializer */
    uint32_t SLOTDIS5:1; /*!< bit:     21  Slot 5 Disabled for this Serializer */
    uint32_t SLOTDIS6:1; /*!< bit:     22  Slot 6 Disabled for this Serializer */
    uint32_t SLOTDIS7:1; /*!< bit:     23  Slot 7 Disabled for this Serializer */
    uint32_t MONO:1; /*!< bit:     24  Mono Mode                          */
    uint32_t DMA:1; /*!< bit:     25  Single or Multiple DMA Channels    */
    uint32_t :6; /*!< bit: 26..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :16; /*!< bit:  0..15  Reserved                           */
    uint32_t SLOTDIS:8; /*!< bit: 16..23  Slot x Disabled for this Serializer */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} I2S_TXCTRL_Type;
# 551 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/i2s.h"
/* -------- I2S_RXCTRL : (I2S Offset: 0x24) (R/W 32) Rx Serializer Control -------- */

typedef union {
  struct {
    uint32_t SERMODE:2; /*!< bit:  0.. 1  Serializer Mode                    */
    uint32_t :3; /*!< bit:  2.. 4  Reserved                           */
    uint32_t CLKSEL:1; /*!< bit:      5  Clock Unit Selection               */
    uint32_t :1; /*!< bit:      6  Reserved                           */
    uint32_t SLOTADJ:1; /*!< bit:      7  Data Slot Formatting Adjust        */
    uint32_t DATASIZE:3; /*!< bit:  8..10  Data Word Size                     */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t WORDADJ:1; /*!< bit:     12  Data Word Formatting Adjust        */
    uint32_t EXTEND:2; /*!< bit: 13..14  Data Formatting Bit Extension      */
    uint32_t BITREV:1; /*!< bit:     15  Data Formatting Bit Reverse        */
    uint32_t SLOTDIS0:1; /*!< bit:     16  Slot 0 Disabled for this Serializer */
    uint32_t SLOTDIS1:1; /*!< bit:     17  Slot 1 Disabled for this Serializer */
    uint32_t SLOTDIS2:1; /*!< bit:     18  Slot 2 Disabled for this Serializer */
    uint32_t SLOTDIS3:1; /*!< bit:     19  Slot 3 Disabled for this Serializer */
    uint32_t SLOTDIS4:1; /*!< bit:     20  Slot 4 Disabled for this Serializer */
    uint32_t SLOTDIS5:1; /*!< bit:     21  Slot 5 Disabled for this Serializer */
    uint32_t SLOTDIS6:1; /*!< bit:     22  Slot 6 Disabled for this Serializer */
    uint32_t SLOTDIS7:1; /*!< bit:     23  Slot 7 Disabled for this Serializer */
    uint32_t MONO:1; /*!< bit:     24  Mono Mode                          */
    uint32_t DMA:1; /*!< bit:     25  Single or Multiple DMA Channels    */
    uint32_t RXLOOP:1; /*!< bit:     26  Loop-back Test Mode                */
    uint32_t :5; /*!< bit: 27..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :16; /*!< bit:  0..15  Reserved                           */
    uint32_t SLOTDIS:8; /*!< bit: 16..23  Slot x Disabled for this Serializer */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} I2S_RXCTRL_Type;
# 686 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/i2s.h"
/* -------- I2S_TXDATA : (I2S Offset: 0x30) ( /W 32) Tx Data -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  Sample Data                        */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} I2S_TXDATA_Type;
# 704 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/i2s.h"
/* -------- I2S_RXDATA : (I2S Offset: 0x34) (R/  32) Rx Data -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  Sample Data                        */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} I2S_RXDATA_Type;
# 722 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/i2s.h"
/** \brief I2S hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ I2S_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W  8) Control A */
       RoReg8 Reserved1[0x3];
  volatile /*!< Defines 'read / write' permissions */ I2S_CLKCTRL_Type CLKCTRL[2]; /**< \brief Offset: 0x04 (R/W 32) Clock Unit n Control */
  volatile /*!< Defines 'read / write' permissions */ I2S_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x0C (R/W 16) Interrupt Enable Clear */
       RoReg8 Reserved2[0x2];
  volatile /*!< Defines 'read / write' permissions */ I2S_INTENSET_Type INTENSET; /**< \brief Offset: 0x10 (R/W 16) Interrupt Enable Set */
       RoReg8 Reserved3[0x2];
  volatile /*!< Defines 'read / write' permissions */ I2S_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x14 (R/W 16) Interrupt Flag Status and Clear */
       RoReg8 Reserved4[0x2];
  volatile /*!< Defines 'read only' permissions */ I2S_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x18 (R/  16) Synchronization Status */
       RoReg8 Reserved5[0x6];
  volatile /*!< Defines 'read / write' permissions */ I2S_TXCTRL_Type TXCTRL; /**< \brief Offset: 0x20 (R/W 32) Tx Serializer Control */
  volatile /*!< Defines 'read / write' permissions */ I2S_RXCTRL_Type RXCTRL; /**< \brief Offset: 0x24 (R/W 32) Rx Serializer Control */
       RoReg8 Reserved6[0x8];
  volatile /*!< Defines 'write only' permissions */ I2S_TXDATA_Type TXDATA; /**< \brief Offset: 0x30 ( /W 32) Tx Data */
  volatile /*!< Defines 'read only' permissions */ I2S_RXDATA_Type RXDATA; /**< \brief Offset: 0x34 (R/  32) Rx Data */
} I2s;


/*@}*/
# 591 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/mclk.h" 1
/**
 * \file
 *
 * \brief Component description for MCLK
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR MCLK */
/* ========================================================================== */
/** \addtogroup SAMD51_MCLK Main Clock */
/*@{*/




/* -------- MCLK_INTENCLR : (MCLK Offset: 0x01) (R/W  8) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t CKRDY:1; /*!< bit:      0  Clock Ready Interrupt Enable       */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} MCLK_INTENCLR_Type;
# 59 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/mclk.h"
/* -------- MCLK_INTENSET : (MCLK Offset: 0x02) (R/W  8) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t CKRDY:1; /*!< bit:      0  Clock Ready Interrupt Enable       */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} MCLK_INTENSET_Type;
# 77 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/mclk.h"
/* -------- MCLK_INTFLAG : (MCLK Offset: 0x03) (R/W  8) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t CKRDY:1; /*!< bit:      0  Clock Ready                        */
    volatile /*!< Defines 'read only' permissions */ uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} MCLK_INTFLAG_Type;
# 95 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/mclk.h"
/* -------- MCLK_HSDIV : (MCLK Offset: 0x04) (R/   8) HS Clock Division -------- */

typedef union {
  struct {
    uint8_t DIV:8; /*!< bit:  0.. 7  CPU Clock Division Factor          */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} MCLK_HSDIV_Type;
# 115 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/mclk.h"
/* -------- MCLK_CPUDIV : (MCLK Offset: 0x05) (R/W  8) CPU Clock Division -------- */

typedef union {
  struct {
    uint8_t DIV:8; /*!< bit:  0.. 7  Low-Power Clock Division Factor    */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} MCLK_CPUDIV_Type;
# 149 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/mclk.h"
/* -------- MCLK_AHBMASK : (MCLK Offset: 0x10) (R/W 32) AHB Mask -------- */

typedef union {
  struct {
    uint32_t HPB0_:1; /*!< bit:      0  HPB0 AHB Clock Mask                */
    uint32_t HPB1_:1; /*!< bit:      1  HPB1 AHB Clock Mask                */
    uint32_t HPB2_:1; /*!< bit:      2  HPB2 AHB Clock Mask                */
    uint32_t HPB3_:1; /*!< bit:      3  HPB3 AHB Clock Mask                */
    uint32_t DSU_:1; /*!< bit:      4  DSU AHB Clock Mask                 */
    uint32_t HMATRIX_:1; /*!< bit:      5  HMATRIX AHB Clock Mask             */
    uint32_t NVMCTRL_:1; /*!< bit:      6  NVMCTRL AHB Clock Mask             */
    uint32_t HSRAM_:1; /*!< bit:      7  HSRAM AHB Clock Mask               */
    uint32_t CMCC_:1; /*!< bit:      8  CMCC AHB Clock Mask                */
    uint32_t DMAC_:1; /*!< bit:      9  DMAC AHB Clock Mask                */
    uint32_t USB_:1; /*!< bit:     10  USB AHB Clock Mask                 */
    uint32_t BKUPRAM_:1; /*!< bit:     11  BKUPRAM AHB Clock Mask             */
    uint32_t PAC_:1; /*!< bit:     12  PAC AHB Clock Mask                 */
    uint32_t QSPI_:1; /*!< bit:     13  QSPI AHB Clock Mask                */
    uint32_t :1; /*!< bit:     14  Reserved                           */
    uint32_t SDHC0_:1; /*!< bit:     15  SDHC0 AHB Clock Mask               */
    uint32_t SDHC1_:1; /*!< bit:     16  SDHC1 AHB Clock Mask               */
    uint32_t :2; /*!< bit: 17..18  Reserved                           */
    uint32_t ICM_:1; /*!< bit:     19  ICM AHB Clock Mask                 */
    uint32_t PUKCC_:1; /*!< bit:     20  PUKCC AHB Clock Mask               */
    uint32_t QSPI_2X_:1; /*!< bit:     21  QSPI_2X AHB Clock Mask             */
    uint32_t NVMCTRL_SMEEPROM_:1; /*!< bit:     22  NVMCTRL_SMEEPROM AHB Clock Mask    */
    uint32_t NVMCTRL_CACHE_:1; /*!< bit:     23  NVMCTRL_CACHE AHB Clock Mask       */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} MCLK_AHBMASK_Type;
# 229 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/mclk.h"
/* -------- MCLK_APBAMASK : (MCLK Offset: 0x14) (R/W 32) APBA Mask -------- */

typedef union {
  struct {
    uint32_t PAC_:1; /*!< bit:      0  PAC APB Clock Enable               */
    uint32_t PM_:1; /*!< bit:      1  PM APB Clock Enable                */
    uint32_t MCLK_:1; /*!< bit:      2  MCLK APB Clock Enable              */
    uint32_t RSTC_:1; /*!< bit:      3  RSTC APB Clock Enable              */
    uint32_t OSCCTRL_:1; /*!< bit:      4  OSCCTRL APB Clock Enable           */
    uint32_t OSC32KCTRL_:1; /*!< bit:      5  OSC32KCTRL APB Clock Enable        */
    uint32_t SUPC_:1; /*!< bit:      6  SUPC APB Clock Enable              */
    uint32_t GCLK_:1; /*!< bit:      7  GCLK APB Clock Enable              */
    uint32_t WDT_:1; /*!< bit:      8  WDT APB Clock Enable               */
    uint32_t RTC_:1; /*!< bit:      9  RTC APB Clock Enable               */
    uint32_t EIC_:1; /*!< bit:     10  EIC APB Clock Enable               */
    uint32_t FREQM_:1; /*!< bit:     11  FREQM APB Clock Enable             */
    uint32_t SERCOM0_:1; /*!< bit:     12  SERCOM0 APB Clock Enable           */
    uint32_t SERCOM1_:1; /*!< bit:     13  SERCOM1 APB Clock Enable           */
    uint32_t TC0_:1; /*!< bit:     14  TC0 APB Clock Enable               */
    uint32_t TC1_:1; /*!< bit:     15  TC1 APB Clock Enable               */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} MCLK_APBAMASK_Type;
# 292 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/mclk.h"
/* -------- MCLK_APBBMASK : (MCLK Offset: 0x18) (R/W 32) APBB Mask -------- */

typedef union {
  struct {
    uint32_t USB_:1; /*!< bit:      0  USB APB Clock Enable               */
    uint32_t DSU_:1; /*!< bit:      1  DSU APB Clock Enable               */
    uint32_t NVMCTRL_:1; /*!< bit:      2  NVMCTRL APB Clock Enable           */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t PORT_:1; /*!< bit:      4  PORT APB Clock Enable              */
    uint32_t :1; /*!< bit:      5  Reserved                           */
    uint32_t HMATRIX_:1; /*!< bit:      6  HMATRIX APB Clock Enable           */
    uint32_t EVSYS_:1; /*!< bit:      7  EVSYS APB Clock Enable             */
    uint32_t :1; /*!< bit:      8  Reserved                           */
    uint32_t SERCOM2_:1; /*!< bit:      9  SERCOM2 APB Clock Enable           */
    uint32_t SERCOM3_:1; /*!< bit:     10  SERCOM3 APB Clock Enable           */
    uint32_t TCC0_:1; /*!< bit:     11  TCC0 APB Clock Enable              */
    uint32_t TCC1_:1; /*!< bit:     12  TCC1 APB Clock Enable              */
    uint32_t TC2_:1; /*!< bit:     13  TC2 APB Clock Enable               */
    uint32_t TC3_:1; /*!< bit:     14  TC3 APB Clock Enable               */
    uint32_t TAL_:1; /*!< bit:     15  TAL APB Clock Enable               */
    uint32_t RAMECC_:1; /*!< bit:     16  RAMECC APB Clock Enable            */
    uint32_t :15; /*!< bit: 17..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} MCLK_APBBMASK_Type;
# 352 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/mclk.h"
/* -------- MCLK_APBCMASK : (MCLK Offset: 0x1C) (R/W 32) APBC Mask -------- */

typedef union {
  struct {
    uint32_t :3; /*!< bit:  0.. 2  Reserved                           */
    uint32_t TCC2_:1; /*!< bit:      3  TCC2 APB Clock Enable              */
    uint32_t TCC3_:1; /*!< bit:      4  TCC3 APB Clock Enable              */
    uint32_t TC4_:1; /*!< bit:      5  TC4 APB Clock Enable               */
    uint32_t TC5_:1; /*!< bit:      6  TC5 APB Clock Enable               */
    uint32_t PDEC_:1; /*!< bit:      7  PDEC APB Clock Enable              */
    uint32_t AC_:1; /*!< bit:      8  AC APB Clock Enable                */
    uint32_t AES_:1; /*!< bit:      9  AES APB Clock Enable               */
    uint32_t TRNG_:1; /*!< bit:     10  TRNG APB Clock Enable              */
    uint32_t ICM_:1; /*!< bit:     11  ICM APB Clock Enable               */
    uint32_t :1; /*!< bit:     12  Reserved                           */
    uint32_t QSPI_:1; /*!< bit:     13  QSPI APB Clock Enable              */
    uint32_t CCL_:1; /*!< bit:     14  CCL APB Clock Enable               */
    uint32_t :17; /*!< bit: 15..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} MCLK_APBCMASK_Type;
# 402 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/mclk.h"
/* -------- MCLK_APBDMASK : (MCLK Offset: 0x20) (R/W 32) APBD Mask -------- */

typedef union {
  struct {
    uint32_t SERCOM4_:1; /*!< bit:      0  SERCOM4 APB Clock Enable           */
    uint32_t SERCOM5_:1; /*!< bit:      1  SERCOM5 APB Clock Enable           */
    uint32_t SERCOM6_:1; /*!< bit:      2  SERCOM6 APB Clock Enable           */
    uint32_t SERCOM7_:1; /*!< bit:      3  SERCOM7 APB Clock Enable           */
    uint32_t TCC4_:1; /*!< bit:      4  TCC4 APB Clock Enable              */
    uint32_t TC6_:1; /*!< bit:      5  TC6 APB Clock Enable               */
    uint32_t TC7_:1; /*!< bit:      6  TC7 APB Clock Enable               */
    uint32_t ADC0_:1; /*!< bit:      7  ADC0 APB Clock Enable              */
    uint32_t ADC1_:1; /*!< bit:      8  ADC1 APB Clock Enable              */
    uint32_t DAC_:1; /*!< bit:      9  DAC APB Clock Enable               */
    uint32_t I2S_:1; /*!< bit:     10  I2S APB Clock Enable               */
    uint32_t PCC_:1; /*!< bit:     11  PCC APB Clock Enable               */
    uint32_t :20; /*!< bit: 12..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} MCLK_APBDMASK_Type;
# 453 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/mclk.h"
/** \brief MCLK hardware registers */

typedef struct {
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read / write' permissions */ MCLK_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x01 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ MCLK_INTENSET_Type INTENSET; /**< \brief Offset: 0x02 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ MCLK_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x03 (R/W  8) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read only' permissions */ MCLK_HSDIV_Type HSDIV; /**< \brief Offset: 0x04 (R/   8) HS Clock Division */
  volatile /*!< Defines 'read / write' permissions */ MCLK_CPUDIV_Type CPUDIV; /**< \brief Offset: 0x05 (R/W  8) CPU Clock Division */
       RoReg8 Reserved2[0xA];
  volatile /*!< Defines 'read / write' permissions */ MCLK_AHBMASK_Type AHBMASK; /**< \brief Offset: 0x10 (R/W 32) AHB Mask */
  volatile /*!< Defines 'read / write' permissions */ MCLK_APBAMASK_Type APBAMASK; /**< \brief Offset: 0x14 (R/W 32) APBA Mask */
  volatile /*!< Defines 'read / write' permissions */ MCLK_APBBMASK_Type APBBMASK; /**< \brief Offset: 0x18 (R/W 32) APBB Mask */
  volatile /*!< Defines 'read / write' permissions */ MCLK_APBCMASK_Type APBCMASK; /**< \brief Offset: 0x1C (R/W 32) APBC Mask */
  volatile /*!< Defines 'read / write' permissions */ MCLK_APBDMASK_Type APBDMASK; /**< \brief Offset: 0x20 (R/W 32) APBD Mask */
} Mclk;


/*@}*/
# 592 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h" 1
/**
 * \file
 *
 * \brief Component description for NVMCTRL
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR NVMCTRL */
/* ========================================================================== */
/** \addtogroup SAMD51_NVMCTRL Non-Volatile Memory Controller */
/*@{*/




/* -------- NVMCTRL_CTRLA : (NVMCTRL Offset: 0x00) (R/W 16) Control A -------- */

typedef union {
  struct {
    uint16_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint16_t AUTOWS:1; /*!< bit:      2  Auto Wait State Enable             */
    uint16_t SUSPEN:1; /*!< bit:      3  Suspend Enable                     */
    uint16_t WMODE:2; /*!< bit:  4.. 5  Write Mode                         */
    uint16_t PRM:2; /*!< bit:  6.. 7  Power Reduction Mode during Sleep  */
    uint16_t RWS:4; /*!< bit:  8..11  NVM Read Wait States               */
    uint16_t AHBNS0:1; /*!< bit:     12  Force AHB0 access to NONSEQ, burst transfers are continuously rearbitrated */
    uint16_t AHBNS1:1; /*!< bit:     13  Force AHB1 access to NONSEQ, burst transfers are continuously rearbitrated */
    uint16_t CACHEDIS0:1; /*!< bit:     14  AHB0 Cache Disable                 */
    uint16_t CACHEDIS1:1; /*!< bit:     15  AHB1 Cache Disable                 */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} NVMCTRL_CTRLA_Type;
# 100 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_CTRLB : (NVMCTRL Offset: 0x04) ( /W 16) Control B -------- */

typedef union {
  struct {
    uint16_t CMD:7; /*!< bit:  0.. 6  Command                            */
    uint16_t :1; /*!< bit:      7  Reserved                           */
    uint16_t CMDEX:8; /*!< bit:  8..15  Command Execution                  */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} NVMCTRL_CTRLB_Type;
# 173 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_PARAM : (NVMCTRL Offset: 0x08) (R/  32) NVM Parameter -------- */

typedef union {
  struct {
    uint32_t NVMP:16; /*!< bit:  0..15  NVM Pages                          */
    uint32_t PSZ:3; /*!< bit: 16..18  Page Size                          */
    uint32_t :12; /*!< bit: 19..30  Reserved                           */
    uint32_t SEE:1; /*!< bit:     31  SmartEEPROM Supported              */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} NVMCTRL_PARAM_Type;
# 215 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_INTENCLR : (NVMCTRL Offset: 0x0C) (R/W 16) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint16_t DONE:1; /*!< bit:      0  Command Done Interrupt Clear       */
    uint16_t ADDRE:1; /*!< bit:      1  Address Error                      */
    uint16_t PROGE:1; /*!< bit:      2  Programming Error Interrupt Clear  */
    uint16_t LOCKE:1; /*!< bit:      3  Lock Error Interrupt Clear         */
    uint16_t ECCSE:1; /*!< bit:      4  ECC Single Error Interrupt Clear   */
    uint16_t ECCDE:1; /*!< bit:      5  ECC Dual Error Interrupt Clear     */
    uint16_t NVME:1; /*!< bit:      6  NVM Error Interrupt Clear          */
    uint16_t SUSP:1; /*!< bit:      7  Suspended Write Or Erase Interrupt Clear */
    uint16_t SEESFULL:1; /*!< bit:      8  Active SEES Full Interrupt Clear   */
    uint16_t SEESOVF:1; /*!< bit:      9  Active SEES Overflow Interrupt Clear */
    uint16_t SEEWRC:1; /*!< bit:     10  SEE Write Completed Interrupt Clear */
    uint16_t :5; /*!< bit: 11..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} NVMCTRL_INTENCLR_Type;
# 263 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_INTENSET : (NVMCTRL Offset: 0x0E) (R/W 16) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint16_t DONE:1; /*!< bit:      0  Command Done Interrupt Enable      */
    uint16_t ADDRE:1; /*!< bit:      1  Address Error Interrupt Enable     */
    uint16_t PROGE:1; /*!< bit:      2  Programming Error Interrupt Enable */
    uint16_t LOCKE:1; /*!< bit:      3  Lock Error Interrupt Enable        */
    uint16_t ECCSE:1; /*!< bit:      4  ECC Single Error Interrupt Enable  */
    uint16_t ECCDE:1; /*!< bit:      5  ECC Dual Error Interrupt Enable    */
    uint16_t NVME:1; /*!< bit:      6  NVM Error Interrupt Enable         */
    uint16_t SUSP:1; /*!< bit:      7  Suspended Write Or Erase  Interrupt Enable */
    uint16_t SEESFULL:1; /*!< bit:      8  Active SEES Full Interrupt Enable  */
    uint16_t SEESOVF:1; /*!< bit:      9  Active SEES Overflow Interrupt Enable */
    uint16_t SEEWRC:1; /*!< bit:     10  SEE Write Completed Interrupt Enable */
    uint16_t :5; /*!< bit: 11..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} NVMCTRL_INTENSET_Type;
# 311 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_INTFLAG : (NVMCTRL Offset: 0x10) (R/W 16) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint16_t DONE:1; /*!< bit:      0  Command Done                       */
    volatile /*!< Defines 'read only' permissions */ uint16_t ADDRE:1; /*!< bit:      1  Address Error                      */
    volatile /*!< Defines 'read only' permissions */ uint16_t PROGE:1; /*!< bit:      2  Programming Error                  */
    volatile /*!< Defines 'read only' permissions */ uint16_t LOCKE:1; /*!< bit:      3  Lock Error                         */
    volatile /*!< Defines 'read only' permissions */ uint16_t ECCSE:1; /*!< bit:      4  ECC Single Error                   */
    volatile /*!< Defines 'read only' permissions */ uint16_t ECCDE:1; /*!< bit:      5  ECC Dual Error                     */
    volatile /*!< Defines 'read only' permissions */ uint16_t NVME:1; /*!< bit:      6  NVM Error                          */
    volatile /*!< Defines 'read only' permissions */ uint16_t SUSP:1; /*!< bit:      7  Suspended Write Or Erase Operation */
    volatile /*!< Defines 'read only' permissions */ uint16_t SEESFULL:1; /*!< bit:      8  Active SEES Full                   */
    volatile /*!< Defines 'read only' permissions */ uint16_t SEESOVF:1; /*!< bit:      9  Active SEES Overflow               */
    volatile /*!< Defines 'read only' permissions */ uint16_t SEEWRC:1; /*!< bit:     10  SEE Write Completed                */
    volatile /*!< Defines 'read only' permissions */ uint16_t :5; /*!< bit: 11..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} NVMCTRL_INTFLAG_Type;
# 359 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_STATUS : (NVMCTRL Offset: 0x12) (R/  16) Status -------- */

typedef union {
  struct {
    uint16_t READY:1; /*!< bit:      0  Ready to accept a command          */
    uint16_t PRM:1; /*!< bit:      1  Power Reduction Mode               */
    uint16_t LOAD:1; /*!< bit:      2  NVM Page Buffer Active Loading     */
    uint16_t SUSP:1; /*!< bit:      3  NVM Write Or Erase Operation Is Suspended */
    uint16_t AFIRST:1; /*!< bit:      4  BANKA First                        */
    uint16_t BPDIS:1; /*!< bit:      5  Boot Loader Protection Disable     */
    uint16_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint16_t BOOTPROT:4; /*!< bit:  8..11  Boot Loader Protection Size        */
    uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} NVMCTRL_STATUS_Type;
# 397 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_ADDR : (NVMCTRL Offset: 0x14) (R/W 32) Address -------- */

typedef union {
  struct {
    uint32_t ADDR:24; /*!< bit:  0..23  NVM Address                        */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} NVMCTRL_ADDR_Type;
# 416 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_RUNLOCK : (NVMCTRL Offset: 0x18) (R/  32) Lock Section -------- */

typedef union {
  struct {
    uint32_t RUNLOCK:32; /*!< bit:  0..31  Region Un-Lock Bits                */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} NVMCTRL_RUNLOCK_Type;
# 434 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_PBLDATA : (NVMCTRL Offset: 0x1C) (R/  32) Page Buffer Load Data x -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  Page Buffer Data                   */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} NVMCTRL_PBLDATA_Type;
# 452 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_ECCERR : (NVMCTRL Offset: 0x24) (R/  32) ECC Error Status Register -------- */

typedef union {
  struct {
    uint32_t ADDR:24; /*!< bit:  0..23  Error Address                      */
    uint32_t :4; /*!< bit: 24..27  Reserved                           */
    uint32_t TYPEL:2; /*!< bit: 28..29  Low Double-Word Error Type         */
    uint32_t TYPEH:2; /*!< bit: 30..31  High Double-Word Error Type        */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} NVMCTRL_ECCERR_Type;
# 491 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_DBGCTRL : (NVMCTRL Offset: 0x28) (R/W  8) Debug Control -------- */

typedef union {
  struct {
    uint8_t ECCDIS:1; /*!< bit:      0  Debugger ECC Read Disable          */
    uint8_t ECCELOG:1; /*!< bit:      1  Debugger ECC Error Tracking Mode   */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} NVMCTRL_DBGCTRL_Type;
# 512 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_SEECFG : (NVMCTRL Offset: 0x2A) (R/W  8) SmartEEPROM Configuration Register -------- */

typedef union {
  struct {
    uint8_t WMODE:1; /*!< bit:      0  Write Mode                         */
    uint8_t APRDIS:1; /*!< bit:      1  Automatic Page Reallocation Disable */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} NVMCTRL_SEECFG_Type;
# 537 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/* -------- NVMCTRL_SEESTAT : (NVMCTRL Offset: 0x2C) (R/  32) SmartEEPROM Status Register -------- */

typedef union {
  struct {
    uint32_t ASEES:1; /*!< bit:      0  Active SmartEEPROM Sector          */
    uint32_t LOAD:1; /*!< bit:      1  Page Buffer Loaded                 */
    uint32_t BUSY:1; /*!< bit:      2  Busy                               */
    uint32_t LOCK:1; /*!< bit:      3  SmartEEPROM Write Access Is Locked */
    uint32_t RLOCK:1; /*!< bit:      4  SmartEEPROM Write Access To Register Address Space Is Locked */
    uint32_t :3; /*!< bit:  5.. 7  Reserved                           */
    uint32_t SBLK:4; /*!< bit:  8..11  Blocks Number In a Sector          */
    uint32_t :4; /*!< bit: 12..15  Reserved                           */
    uint32_t PSZ:3; /*!< bit: 16..18  SmartEEPROM Page Size              */
    uint32_t :13; /*!< bit: 19..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} NVMCTRL_SEESTAT_Type;
# 577 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/** \brief NVMCTRL APB hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ NVMCTRL_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 16) Control A */
       RoReg8 Reserved1[0x2];
  volatile /*!< Defines 'write only' permissions */ NVMCTRL_CTRLB_Type CTRLB; /**< \brief Offset: 0x04 ( /W 16) Control B */
       RoReg8 Reserved2[0x2];
  volatile /*!< Defines 'read only' permissions */ NVMCTRL_PARAM_Type PARAM; /**< \brief Offset: 0x08 (R/  32) NVM Parameter */
  volatile /*!< Defines 'read / write' permissions */ NVMCTRL_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x0C (R/W 16) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ NVMCTRL_INTENSET_Type INTENSET; /**< \brief Offset: 0x0E (R/W 16) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ NVMCTRL_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x10 (R/W 16) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read only' permissions */ NVMCTRL_STATUS_Type STATUS; /**< \brief Offset: 0x12 (R/  16) Status */
  volatile /*!< Defines 'read / write' permissions */ NVMCTRL_ADDR_Type ADDR; /**< \brief Offset: 0x14 (R/W 32) Address */
  volatile /*!< Defines 'read only' permissions */ NVMCTRL_RUNLOCK_Type RUNLOCK; /**< \brief Offset: 0x18 (R/  32) Lock Section */
  volatile /*!< Defines 'read only' permissions */ NVMCTRL_PBLDATA_Type PBLDATA[2]; /**< \brief Offset: 0x1C (R/  32) Page Buffer Load Data x */
  volatile /*!< Defines 'read only' permissions */ NVMCTRL_ECCERR_Type ECCERR; /**< \brief Offset: 0x24 (R/  32) ECC Error Status Register */
  volatile /*!< Defines 'read / write' permissions */ NVMCTRL_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x28 (R/W  8) Debug Control */
       RoReg8 Reserved3[0x1];
  volatile /*!< Defines 'read / write' permissions */ NVMCTRL_SEECFG_Type SEECFG; /**< \brief Offset: 0x2A (R/W  8) SmartEEPROM Configuration Register */
       RoReg8 Reserved4[0x1];
  volatile /*!< Defines 'read only' permissions */ NVMCTRL_SEESTAT_Type SEESTAT; /**< \brief Offset: 0x2C (R/  32) SmartEEPROM Status Register */
} Nvmctrl;
# 659 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/*@}*/

/* ************************************************************************** */
/**  SOFTWARE PERIPHERAL API DEFINITION FOR NON-VOLATILE FUSES */
/* ************************************************************************** */
/** \addtogroup fuses_api Peripheral Software API */
/*@{*/
# 856 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/nvmctrl.h"
/*@}*/
# 593 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h" 1
/**
 * \file
 *
 * \brief Component description for OSCCTRL
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR OSCCTRL */
/* ========================================================================== */
/** \addtogroup SAMD51_OSCCTRL Oscillators Control */
/*@{*/




/* -------- OSCCTRL_EVCTRL : (OSCCTRL Offset: 0x00) (R/W  8) Event Control -------- */

typedef union {
  struct {
    uint8_t CFDEO0:1; /*!< bit:      0  Clock 0 Failure Detector Event Output Enable */
    uint8_t CFDEO1:1; /*!< bit:      1  Clock 1 Failure Detector Event Output Enable */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t CFDEO:2; /*!< bit:  0.. 1  Clock x Failure Detector Event Output Enable */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} OSCCTRL_EVCTRL_Type;
# 69 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_INTENCLR : (OSCCTRL Offset: 0x04) (R/W 32) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint32_t XOSCRDY0:1; /*!< bit:      0  XOSC 0 Ready Interrupt Enable      */
    uint32_t XOSCRDY1:1; /*!< bit:      1  XOSC 1 Ready Interrupt Enable      */
    uint32_t XOSCFAIL0:1; /*!< bit:      2  XOSC 0 Clock Failure Detector Interrupt Enable */
    uint32_t XOSCFAIL1:1; /*!< bit:      3  XOSC 1 Clock Failure Detector Interrupt Enable */
    uint32_t :4; /*!< bit:  4.. 7  Reserved                           */
    uint32_t DFLLRDY:1; /*!< bit:      8  DFLL Ready Interrupt Enable        */
    uint32_t DFLLOOB:1; /*!< bit:      9  DFLL Out Of Bounds Interrupt Enable */
    uint32_t DFLLLCKF:1; /*!< bit:     10  DFLL Lock Fine Interrupt Enable    */
    uint32_t DFLLLCKC:1; /*!< bit:     11  DFLL Lock Coarse Interrupt Enable  */
    uint32_t DFLLRCS:1; /*!< bit:     12  DFLL Reference Clock Stopped Interrupt Enable */
    uint32_t :3; /*!< bit: 13..15  Reserved                           */
    uint32_t DPLL0LCKR:1; /*!< bit:     16  DPLL0 Lock Rise Interrupt Enable   */
    uint32_t DPLL0LCKF:1; /*!< bit:     17  DPLL0 Lock Fall Interrupt Enable   */
    uint32_t DPLL0LTO:1; /*!< bit:     18  DPLL0 Lock Timeout Interrupt Enable */
    uint32_t DPLL0LDRTO:1; /*!< bit:     19  DPLL0 Loop Divider Ratio Update Complete Interrupt Enable */
    uint32_t :4; /*!< bit: 20..23  Reserved                           */
    uint32_t DPLL1LCKR:1; /*!< bit:     24  DPLL1 Lock Rise Interrupt Enable   */
    uint32_t DPLL1LCKF:1; /*!< bit:     25  DPLL1 Lock Fall Interrupt Enable   */
    uint32_t DPLL1LTO:1; /*!< bit:     26  DPLL1 Lock Timeout Interrupt Enable */
    uint32_t DPLL1LDRTO:1; /*!< bit:     27  DPLL1 Loop Divider Ratio Update Complete Interrupt Enable */
    uint32_t :4; /*!< bit: 28..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t XOSCRDY:2; /*!< bit:  0.. 1  XOSC x Ready Interrupt Enable      */
    uint32_t XOSCFAIL:2; /*!< bit:  2.. 3  XOSC x Clock Failure Detector Interrupt Enable */
    uint32_t :28; /*!< bit:  4..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSCCTRL_INTENCLR_Type;
# 149 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_INTENSET : (OSCCTRL Offset: 0x08) (R/W 32) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint32_t XOSCRDY0:1; /*!< bit:      0  XOSC 0 Ready Interrupt Enable      */
    uint32_t XOSCRDY1:1; /*!< bit:      1  XOSC 1 Ready Interrupt Enable      */
    uint32_t XOSCFAIL0:1; /*!< bit:      2  XOSC 0 Clock Failure Detector Interrupt Enable */
    uint32_t XOSCFAIL1:1; /*!< bit:      3  XOSC 1 Clock Failure Detector Interrupt Enable */
    uint32_t :4; /*!< bit:  4.. 7  Reserved                           */
    uint32_t DFLLRDY:1; /*!< bit:      8  DFLL Ready Interrupt Enable        */
    uint32_t DFLLOOB:1; /*!< bit:      9  DFLL Out Of Bounds Interrupt Enable */
    uint32_t DFLLLCKF:1; /*!< bit:     10  DFLL Lock Fine Interrupt Enable    */
    uint32_t DFLLLCKC:1; /*!< bit:     11  DFLL Lock Coarse Interrupt Enable  */
    uint32_t DFLLRCS:1; /*!< bit:     12  DFLL Reference Clock Stopped Interrupt Enable */
    uint32_t :3; /*!< bit: 13..15  Reserved                           */
    uint32_t DPLL0LCKR:1; /*!< bit:     16  DPLL0 Lock Rise Interrupt Enable   */
    uint32_t DPLL0LCKF:1; /*!< bit:     17  DPLL0 Lock Fall Interrupt Enable   */
    uint32_t DPLL0LTO:1; /*!< bit:     18  DPLL0 Lock Timeout Interrupt Enable */
    uint32_t DPLL0LDRTO:1; /*!< bit:     19  DPLL0 Loop Divider Ratio Update Complete Interrupt Enable */
    uint32_t :4; /*!< bit: 20..23  Reserved                           */
    uint32_t DPLL1LCKR:1; /*!< bit:     24  DPLL1 Lock Rise Interrupt Enable   */
    uint32_t DPLL1LCKF:1; /*!< bit:     25  DPLL1 Lock Fall Interrupt Enable   */
    uint32_t DPLL1LTO:1; /*!< bit:     26  DPLL1 Lock Timeout Interrupt Enable */
    uint32_t DPLL1LDRTO:1; /*!< bit:     27  DPLL1 Loop Divider Ratio Update Complete Interrupt Enable */
    uint32_t :4; /*!< bit: 28..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t XOSCRDY:2; /*!< bit:  0.. 1  XOSC x Ready Interrupt Enable      */
    uint32_t XOSCFAIL:2; /*!< bit:  2.. 3  XOSC x Clock Failure Detector Interrupt Enable */
    uint32_t :28; /*!< bit:  4..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSCCTRL_INTENSET_Type;
# 229 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_INTFLAG : (OSCCTRL Offset: 0x0C) (R/W 32) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t XOSCRDY0:1; /*!< bit:      0  XOSC 0 Ready                       */
    volatile /*!< Defines 'read only' permissions */ uint32_t XOSCRDY1:1; /*!< bit:      1  XOSC 1 Ready                       */
    volatile /*!< Defines 'read only' permissions */ uint32_t XOSCFAIL0:1; /*!< bit:      2  XOSC 0 Clock Failure Detector      */
    volatile /*!< Defines 'read only' permissions */ uint32_t XOSCFAIL1:1; /*!< bit:      3  XOSC 1 Clock Failure Detector      */
    volatile /*!< Defines 'read only' permissions */ uint32_t :4; /*!< bit:  4.. 7  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t DFLLRDY:1; /*!< bit:      8  DFLL Ready                         */
    volatile /*!< Defines 'read only' permissions */ uint32_t DFLLOOB:1; /*!< bit:      9  DFLL Out Of Bounds                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t DFLLLCKF:1; /*!< bit:     10  DFLL Lock Fine                     */
    volatile /*!< Defines 'read only' permissions */ uint32_t DFLLLCKC:1; /*!< bit:     11  DFLL Lock Coarse                   */
    volatile /*!< Defines 'read only' permissions */ uint32_t DFLLRCS:1; /*!< bit:     12  DFLL Reference Clock Stopped       */
    volatile /*!< Defines 'read only' permissions */ uint32_t :3; /*!< bit: 13..15  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t DPLL0LCKR:1; /*!< bit:     16  DPLL0 Lock Rise                    */
    volatile /*!< Defines 'read only' permissions */ uint32_t DPLL0LCKF:1; /*!< bit:     17  DPLL0 Lock Fall                    */
    volatile /*!< Defines 'read only' permissions */ uint32_t DPLL0LTO:1; /*!< bit:     18  DPLL0 Lock Timeout                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t DPLL0LDRTO:1; /*!< bit:     19  DPLL0 Loop Divider Ratio Update Complete */
    volatile /*!< Defines 'read only' permissions */ uint32_t :4; /*!< bit: 20..23  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t DPLL1LCKR:1; /*!< bit:     24  DPLL1 Lock Rise                    */
    volatile /*!< Defines 'read only' permissions */ uint32_t DPLL1LCKF:1; /*!< bit:     25  DPLL1 Lock Fall                    */
    volatile /*!< Defines 'read only' permissions */ uint32_t DPLL1LTO:1; /*!< bit:     26  DPLL1 Lock Timeout                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t DPLL1LDRTO:1; /*!< bit:     27  DPLL1 Loop Divider Ratio Update Complete */
    volatile /*!< Defines 'read only' permissions */ uint32_t :4; /*!< bit: 28..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t XOSCRDY:2; /*!< bit:  0.. 1  XOSC x Ready                       */
    volatile /*!< Defines 'read only' permissions */ uint32_t XOSCFAIL:2; /*!< bit:  2.. 3  XOSC x Clock Failure Detector      */
    volatile /*!< Defines 'read only' permissions */ uint32_t :28; /*!< bit:  4..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSCCTRL_INTFLAG_Type;
# 309 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_STATUS : (OSCCTRL Offset: 0x10) (R/  32) Status -------- */

typedef union {
  struct {
    uint32_t XOSCRDY0:1; /*!< bit:      0  XOSC 0 Ready                       */
    uint32_t XOSCRDY1:1; /*!< bit:      1  XOSC 1 Ready                       */
    uint32_t XOSCFAIL0:1; /*!< bit:      2  XOSC 0 Clock Failure Detector      */
    uint32_t XOSCFAIL1:1; /*!< bit:      3  XOSC 1 Clock Failure Detector      */
    uint32_t XOSCCKSW0:1; /*!< bit:      4  XOSC 0 Clock Switch                */
    uint32_t XOSCCKSW1:1; /*!< bit:      5  XOSC 1 Clock Switch                */
    uint32_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint32_t DFLLRDY:1; /*!< bit:      8  DFLL Ready                         */
    uint32_t DFLLOOB:1; /*!< bit:      9  DFLL Out Of Bounds                 */
    uint32_t DFLLLCKF:1; /*!< bit:     10  DFLL Lock Fine                     */
    uint32_t DFLLLCKC:1; /*!< bit:     11  DFLL Lock Coarse                   */
    uint32_t DFLLRCS:1; /*!< bit:     12  DFLL Reference Clock Stopped       */
    uint32_t :3; /*!< bit: 13..15  Reserved                           */
    uint32_t DPLL0LCKR:1; /*!< bit:     16  DPLL0 Lock Rise                    */
    uint32_t DPLL0LCKF:1; /*!< bit:     17  DPLL0 Lock Fall                    */
    uint32_t DPLL0TO:1; /*!< bit:     18  DPLL0 Timeout                      */
    uint32_t DPLL0LDRTO:1; /*!< bit:     19  DPLL0 Loop Divider Ratio Update Complete */
    uint32_t :4; /*!< bit: 20..23  Reserved                           */
    uint32_t DPLL1LCKR:1; /*!< bit:     24  DPLL1 Lock Rise                    */
    uint32_t DPLL1LCKF:1; /*!< bit:     25  DPLL1 Lock Fall                    */
    uint32_t DPLL1TO:1; /*!< bit:     26  DPLL1 Timeout                      */
    uint32_t DPLL1LDRTO:1; /*!< bit:     27  DPLL1 Loop Divider Ratio Update Complete */
    uint32_t :4; /*!< bit: 28..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t XOSCRDY:2; /*!< bit:  0.. 1  XOSC x Ready                       */
    uint32_t XOSCFAIL:2; /*!< bit:  2.. 3  XOSC x Clock Failure Detector      */
    uint32_t XOSCCKSW:2; /*!< bit:  4.. 5  XOSC x Clock Switch                */
    uint32_t :26; /*!< bit:  6..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSCCTRL_STATUS_Type;
# 399 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_XOSCCTRL : (OSCCTRL Offset: 0x14) (R/W 32) External Multipurpose Crystal Oscillator Control -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t ENABLE:1; /*!< bit:      1  Oscillator Enable                  */
    uint32_t XTALEN:1; /*!< bit:      2  Crystal Oscillator Enable          */
    uint32_t :3; /*!< bit:  3.. 5  Reserved                           */
    uint32_t RUNSTDBY:1; /*!< bit:      6  Run in Standby                     */
    uint32_t ONDEMAND:1; /*!< bit:      7  On Demand Control                  */
    uint32_t LOWBUFGAIN:1; /*!< bit:      8  Low Buffer Gain Enable             */
    uint32_t IPTAT:2; /*!< bit:  9..10  Oscillator Current Reference       */
    uint32_t IMULT:4; /*!< bit: 11..14  Oscillator Current Multiplier      */
    uint32_t ENALC:1; /*!< bit:     15  Automatic Loop Control Enable      */
    uint32_t CFDEN:1; /*!< bit:     16  Clock Failure Detector Enable      */
    uint32_t SWBEN:1; /*!< bit:     17  Xosc Clock Switch Enable           */
    uint32_t :2; /*!< bit: 18..19  Reserved                           */
    uint32_t STARTUP:4; /*!< bit: 20..23  Start-Up Time                      */
    uint32_t CFDPRESC:4; /*!< bit: 24..27  Clock Failure Detector Prescaler   */
    uint32_t :4; /*!< bit: 28..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSCCTRL_XOSCCTRL_Type;
# 457 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_DFLLCTRLA : (OSCCTRL Offset: 0x1C) (R/W  8) DFLL48M Control A -------- */

typedef union {
  struct {
    uint8_t :1; /*!< bit:      0  Reserved                           */
    uint8_t ENABLE:1; /*!< bit:      1  DFLL Enable                        */
    uint8_t :4; /*!< bit:  2.. 5  Reserved                           */
    uint8_t RUNSTDBY:1; /*!< bit:      6  Run in Standby                     */
    uint8_t ONDEMAND:1; /*!< bit:      7  On Demand Control                  */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} OSCCTRL_DFLLCTRLA_Type;
# 482 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_DFLLCTRLB : (OSCCTRL Offset: 0x20) (R/W  8) DFLL48M Control B -------- */

typedef union {
  struct {
    uint8_t MODE:1; /*!< bit:      0  Operating Mode Selection           */
    uint8_t STABLE:1; /*!< bit:      1  Stable DFLL Frequency              */
    uint8_t LLAW:1; /*!< bit:      2  Lose Lock After Wake               */
    uint8_t USBCRM:1; /*!< bit:      3  USB Clock Recovery Mode            */
    uint8_t CCDIS:1; /*!< bit:      4  Chill Cycle Disable                */
    uint8_t QLDIS:1; /*!< bit:      5  Quick Lock Disable                 */
    uint8_t BPLCKC:1; /*!< bit:      6  Bypass Coarse Lock                 */
    uint8_t WAITLOCK:1; /*!< bit:      7  Wait Lock                          */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} OSCCTRL_DFLLCTRLB_Type;
# 520 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_DFLLVAL : (OSCCTRL Offset: 0x24) (R/W 32) DFLL48M Value -------- */

typedef union {
  struct {
    uint32_t FINE:8; /*!< bit:  0.. 7  Fine Value                         */
    uint32_t :2; /*!< bit:  8.. 9  Reserved                           */
    uint32_t COARSE:6; /*!< bit: 10..15  Coarse Value                       */
    uint32_t DIFF:16; /*!< bit: 16..31  Multiplication Ratio Difference    */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSCCTRL_DFLLVAL_Type;
# 547 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_DFLLMUL : (OSCCTRL Offset: 0x28) (R/W 32) DFLL48M Multiplier -------- */

typedef union {
  struct {
    uint32_t MUL:16; /*!< bit:  0..15  DFLL Multiply Factor               */
    uint32_t FSTEP:8; /*!< bit: 16..23  Fine Maximum Step                  */
    uint32_t :2; /*!< bit: 24..25  Reserved                           */
    uint32_t CSTEP:6; /*!< bit: 26..31  Coarse Maximum Step                */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSCCTRL_DFLLMUL_Type;
# 574 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_DFLLSYNC : (OSCCTRL Offset: 0x2C) (R/W  8) DFLL48M Synchronization -------- */

typedef union {
  struct {
    uint8_t :1; /*!< bit:      0  Reserved                           */
    uint8_t ENABLE:1; /*!< bit:      1  ENABLE Synchronization Busy        */
    uint8_t DFLLCTRLB:1; /*!< bit:      2  DFLLCTRLB Synchronization Busy     */
    uint8_t DFLLVAL:1; /*!< bit:      3  DFLLVAL Synchronization Busy       */
    uint8_t DFLLMUL:1; /*!< bit:      4  DFLLMUL Synchronization Busy       */
    uint8_t :3; /*!< bit:  5.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} OSCCTRL_DFLLSYNC_Type;
# 602 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_DPLLCTRLA : (OSCCTRL Offset: 0x30) (R/W  8) DPLL DPLL Control A -------- */

typedef union {
  struct {
    uint8_t :1; /*!< bit:      0  Reserved                           */
    uint8_t ENABLE:1; /*!< bit:      1  DPLL Enable                        */
    uint8_t :4; /*!< bit:  2.. 5  Reserved                           */
    uint8_t RUNSTDBY:1; /*!< bit:      6  Run in Standby                     */
    uint8_t ONDEMAND:1; /*!< bit:      7  On Demand Control                  */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} OSCCTRL_DPLLCTRLA_Type;
# 627 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_DPLLRATIO : (OSCCTRL Offset: 0x34) (R/W 32) DPLL DPLL Ratio Control -------- */

typedef union {
  struct {
    uint32_t LDR:13; /*!< bit:  0..12  Loop Divider Ratio                 */
    uint32_t :3; /*!< bit: 13..15  Reserved                           */
    uint32_t LDRFRAC:5; /*!< bit: 16..20  Loop Divider Ratio Fractional Part */
    uint32_t :11; /*!< bit: 21..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSCCTRL_DPLLRATIO_Type;
# 651 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_DPLLCTRLB : (OSCCTRL Offset: 0x38) (R/W 32) DPLL DPLL Control B -------- */

typedef union {
  struct {
    uint32_t FILTER:4; /*!< bit:  0.. 3  Proportional Integral Filter Selection */
    uint32_t WUF:1; /*!< bit:      4  Wake Up Fast                       */
    uint32_t REFCLK:3; /*!< bit:  5.. 7  Reference Clock Selection          */
    uint32_t LTIME:3; /*!< bit:  8..10  Lock Time                          */
    uint32_t LBYPASS:1; /*!< bit:     11  Lock Bypass                        */
    uint32_t DCOFILTER:3; /*!< bit: 12..14  Sigma-Delta DCO Filter Selection   */
    uint32_t DCOEN:1; /*!< bit:     15  DCO Filter Enable                  */
    uint32_t DIV:11; /*!< bit: 16..26  Clock Divider                      */
    uint32_t :5; /*!< bit: 27..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSCCTRL_DPLLCTRLB_Type;
# 713 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_DPLLSYNCBUSY : (OSCCTRL Offset: 0x3C) (R/  32) DPLL DPLL Synchronization Busy -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t ENABLE:1; /*!< bit:      1  DPLL Enable Synchronization Status */
    uint32_t DPLLRATIO:1; /*!< bit:      2  DPLL Loop Divider Ratio Synchronization Status */
    uint32_t :29; /*!< bit:  3..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSCCTRL_DPLLSYNCBUSY_Type;
# 735 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/* -------- OSCCTRL_DPLLSTATUS : (OSCCTRL Offset: 0x40) (R/  32) DPLL DPLL Status -------- */

typedef union {
  struct {
    uint32_t LOCK:1; /*!< bit:      0  DPLL Lock Status                   */
    uint32_t CLKRDY:1; /*!< bit:      1  DPLL Clock Ready                   */
    uint32_t :30; /*!< bit:  2..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSCCTRL_DPLLSTATUS_Type;
# 756 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/oscctrl.h"
/** \brief OscctrlDpll hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_DPLLCTRLA_Type DPLLCTRLA; /**< \brief Offset: 0x00 (R/W  8) DPLL Control A */
       RoReg8 Reserved1[0x3];
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_DPLLRATIO_Type DPLLRATIO; /**< \brief Offset: 0x04 (R/W 32) DPLL Ratio Control */
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_DPLLCTRLB_Type DPLLCTRLB; /**< \brief Offset: 0x08 (R/W 32) DPLL Control B */
  volatile /*!< Defines 'read only' permissions */ OSCCTRL_DPLLSYNCBUSY_Type DPLLSYNCBUSY; /**< \brief Offset: 0x0C (R/  32) DPLL Synchronization Busy */
  volatile /*!< Defines 'read only' permissions */ OSCCTRL_DPLLSTATUS_Type DPLLSTATUS; /**< \brief Offset: 0x10 (R/  32) DPLL Status */
} OscctrlDpll;


/** \brief OSCCTRL hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x00 (R/W  8) Event Control */
       RoReg8 Reserved1[0x3];
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x04 (R/W 32) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_INTENSET_Type INTENSET; /**< \brief Offset: 0x08 (R/W 32) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x0C (R/W 32) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read only' permissions */ OSCCTRL_STATUS_Type STATUS; /**< \brief Offset: 0x10 (R/  32) Status */
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_XOSCCTRL_Type XOSCCTRL[2]; /**< \brief Offset: 0x14 (R/W 32) External Multipurpose Crystal Oscillator Control */
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_DFLLCTRLA_Type DFLLCTRLA; /**< \brief Offset: 0x1C (R/W  8) DFLL48M Control A */
       RoReg8 Reserved2[0x3];
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_DFLLCTRLB_Type DFLLCTRLB; /**< \brief Offset: 0x20 (R/W  8) DFLL48M Control B */
       RoReg8 Reserved3[0x3];
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_DFLLVAL_Type DFLLVAL; /**< \brief Offset: 0x24 (R/W 32) DFLL48M Value */
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_DFLLMUL_Type DFLLMUL; /**< \brief Offset: 0x28 (R/W 32) DFLL48M Multiplier */
  volatile /*!< Defines 'read / write' permissions */ OSCCTRL_DFLLSYNC_Type DFLLSYNC; /**< \brief Offset: 0x2C (R/W  8) DFLL48M Synchronization */
       RoReg8 Reserved4[0x3];
       OscctrlDpll Dpll[2]; /**< \brief Offset: 0x30 OscctrlDpll groups [DPLLS_NUM] */
} Oscctrl;


/*@}*/
# 594 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/osc32kctrl.h" 1
/**
 * \file
 *
 * \brief Component description for OSC32KCTRL
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR OSC32KCTRL */
/* ========================================================================== */
/** \addtogroup SAMD51_OSC32KCTRL 32kHz Oscillators Control */
/*@{*/




/* -------- OSC32KCTRL_INTENCLR : (OSC32KCTRL Offset: 0x00) (R/W 32) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint32_t XOSC32KRDY:1; /*!< bit:      0  XOSC32K Ready Interrupt Enable     */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t XOSC32KFAIL:1; /*!< bit:      2  XOSC32K Clock Failure Detector Interrupt Enable */
    uint32_t :29; /*!< bit:  3..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSC32KCTRL_INTENCLR_Type;
# 63 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/osc32kctrl.h"
/* -------- OSC32KCTRL_INTENSET : (OSC32KCTRL Offset: 0x04) (R/W 32) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint32_t XOSC32KRDY:1; /*!< bit:      0  XOSC32K Ready Interrupt Enable     */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t XOSC32KFAIL:1; /*!< bit:      2  XOSC32K Clock Failure Detector Interrupt Enable */
    uint32_t :29; /*!< bit:  3..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSC32KCTRL_INTENSET_Type;
# 85 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/osc32kctrl.h"
/* -------- OSC32KCTRL_INTFLAG : (OSC32KCTRL Offset: 0x08) (R/W 32) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t XOSC32KRDY:1; /*!< bit:      0  XOSC32K Ready                      */
    volatile /*!< Defines 'read only' permissions */ uint32_t :1; /*!< bit:      1  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t XOSC32KFAIL:1; /*!< bit:      2  XOSC32K Clock Failure Detector     */
    volatile /*!< Defines 'read only' permissions */ uint32_t :29; /*!< bit:  3..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSC32KCTRL_INTFLAG_Type;
# 107 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/osc32kctrl.h"
/* -------- OSC32KCTRL_STATUS : (OSC32KCTRL Offset: 0x0C) (R/  32) Power and Clocks Status -------- */

typedef union {
  struct {
    uint32_t XOSC32KRDY:1; /*!< bit:      0  XOSC32K Ready                      */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t XOSC32KFAIL:1; /*!< bit:      2  XOSC32K Clock Failure Detector     */
    uint32_t XOSC32KSW:1; /*!< bit:      3  XOSC32K Clock switch               */
    uint32_t :28; /*!< bit:  4..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSC32KCTRL_STATUS_Type;
# 132 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/osc32kctrl.h"
/* -------- OSC32KCTRL_RTCCTRL : (OSC32KCTRL Offset: 0x10) (R/W  8) RTC Clock Selection -------- */

typedef union {
  struct {
    uint8_t RTCSEL:3; /*!< bit:  0.. 2  RTC Clock Selection                */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} OSC32KCTRL_RTCCTRL_Type;
# 159 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/osc32kctrl.h"
/* -------- OSC32KCTRL_XOSC32K : (OSC32KCTRL Offset: 0x14) (R/W 16) 32kHz External Crystal Oscillator (XOSC32K) Control -------- */

typedef union {
  struct {
    uint16_t :1; /*!< bit:      0  Reserved                           */
    uint16_t ENABLE:1; /*!< bit:      1  Oscillator Enable                  */
    uint16_t XTALEN:1; /*!< bit:      2  Crystal Oscillator Enable          */
    uint16_t EN32K:1; /*!< bit:      3  32kHz Output Enable                */
    uint16_t EN1K:1; /*!< bit:      4  1kHz Output Enable                 */
    uint16_t :1; /*!< bit:      5  Reserved                           */
    uint16_t RUNSTDBY:1; /*!< bit:      6  Run in Standby                     */
    uint16_t ONDEMAND:1; /*!< bit:      7  On Demand Control                  */
    uint16_t STARTUP:3; /*!< bit:  8..10  Oscillator Start-Up Time           */
    uint16_t :1; /*!< bit:     11  Reserved                           */
    uint16_t WRTLOCK:1; /*!< bit:     12  Write Lock                         */
    uint16_t CGM:2; /*!< bit: 13..14  Control Gain Mode                  */
    uint16_t :1; /*!< bit:     15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} OSC32KCTRL_XOSC32K_Type;
# 210 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/osc32kctrl.h"
/* -------- OSC32KCTRL_CFDCTRL : (OSC32KCTRL Offset: 0x16) (R/W  8) Clock Failure Detector Control -------- */

typedef union {
  struct {
    uint8_t CFDEN:1; /*!< bit:      0  Clock Failure Detector Enable      */
    uint8_t SWBACK:1; /*!< bit:      1  Clock Switch Back                  */
    uint8_t CFDPRESC:1; /*!< bit:      2  Clock Failure Detector Prescaler   */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} OSC32KCTRL_CFDCTRL_Type;
# 234 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/osc32kctrl.h"
/* -------- OSC32KCTRL_EVCTRL : (OSC32KCTRL Offset: 0x17) (R/W  8) Event Control -------- */

typedef union {
  struct {
    uint8_t CFDEO:1; /*!< bit:      0  Clock Failure Detector Event Output Enable */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} OSC32KCTRL_EVCTRL_Type;
# 252 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/osc32kctrl.h"
/* -------- OSC32KCTRL_OSCULP32K : (OSC32KCTRL Offset: 0x1C) (R/W 32) 32kHz Ultra Low Power Internal Oscillator (OSCULP32K) Control -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t EN32K:1; /*!< bit:      1  Enable Out 32k                     */
    uint32_t EN1K:1; /*!< bit:      2  Enable Out 1k                      */
    uint32_t :5; /*!< bit:  3.. 7  Reserved                           */
    uint32_t CALIB:6; /*!< bit:  8..13  Oscillator Calibration             */
    uint32_t :1; /*!< bit:     14  Reserved                           */
    uint32_t WRTLOCK:1; /*!< bit:     15  Write Lock                         */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} OSC32KCTRL_OSCULP32K_Type;
# 283 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/osc32kctrl.h"
/** \brief OSC32KCTRL hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ OSC32KCTRL_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x00 (R/W 32) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ OSC32KCTRL_INTENSET_Type INTENSET; /**< \brief Offset: 0x04 (R/W 32) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ OSC32KCTRL_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x08 (R/W 32) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read only' permissions */ OSC32KCTRL_STATUS_Type STATUS; /**< \brief Offset: 0x0C (R/  32) Power and Clocks Status */
  volatile /*!< Defines 'read / write' permissions */ OSC32KCTRL_RTCCTRL_Type RTCCTRL; /**< \brief Offset: 0x10 (R/W  8) RTC Clock Selection */
       RoReg8 Reserved1[0x3];
  volatile /*!< Defines 'read / write' permissions */ OSC32KCTRL_XOSC32K_Type XOSC32K; /**< \brief Offset: 0x14 (R/W 16) 32kHz External Crystal Oscillator (XOSC32K) Control */
  volatile /*!< Defines 'read / write' permissions */ OSC32KCTRL_CFDCTRL_Type CFDCTRL; /**< \brief Offset: 0x16 (R/W  8) Clock Failure Detector Control */
  volatile /*!< Defines 'read / write' permissions */ OSC32KCTRL_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x17 (R/W  8) Event Control */
       RoReg8 Reserved2[0x4];
  volatile /*!< Defines 'read / write' permissions */ OSC32KCTRL_OSCULP32K_Type OSCULP32K; /**< \brief Offset: 0x1C (R/W 32) 32kHz Ultra Low Power Internal Oscillator (OSCULP32K) Control */
} Osc32kctrl;


/*@}*/
# 595 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h" 1
/**
 * \file
 *
 * \brief Component description for PAC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR PAC */
/* ========================================================================== */
/** \addtogroup SAMD51_PAC Peripheral Access Controller */
/*@{*/




/* -------- PAC_WRCTRL : (PAC Offset: 0x00) (R/W 32) Write control -------- */

typedef union {
  struct {
    uint32_t PERID:16; /*!< bit:  0..15  Peripheral identifier              */
    uint32_t KEY:8; /*!< bit: 16..23  Peripheral access control key      */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PAC_WRCTRL_Type;
# 72 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/* -------- PAC_EVCTRL : (PAC Offset: 0x04) (R/W  8) Event control -------- */

typedef union {
  struct {
    uint8_t ERREO:1; /*!< bit:      0  Peripheral acess error event output */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PAC_EVCTRL_Type;
# 90 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/* -------- PAC_INTENCLR : (PAC Offset: 0x08) (R/W  8) Interrupt enable clear -------- */

typedef union {
  struct {
    uint8_t ERR:1; /*!< bit:      0  Peripheral access error interrupt disable */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PAC_INTENCLR_Type;
# 108 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/* -------- PAC_INTENSET : (PAC Offset: 0x09) (R/W  8) Interrupt enable set -------- */

typedef union {
  struct {
    uint8_t ERR:1; /*!< bit:      0  Peripheral access error interrupt enable */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PAC_INTENSET_Type;
# 126 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/* -------- PAC_INTFLAGAHB : (PAC Offset: 0x10) (R/W 32) Bridge interrupt flag status -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t FLASH_:1; /*!< bit:      0  FLASH                              */
    volatile /*!< Defines 'read only' permissions */ uint32_t FLASH_ALT_:1; /*!< bit:      1  FLASH_ALT                          */
    volatile /*!< Defines 'read only' permissions */ uint32_t SEEPROM_:1; /*!< bit:      2  SEEPROM                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t RAMCM4S_:1; /*!< bit:      3  RAMCM4S                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t RAMPPPDSU_:1; /*!< bit:      4  RAMPPPDSU                          */
    volatile /*!< Defines 'read only' permissions */ uint32_t RAMDMAWR_:1; /*!< bit:      5  RAMDMAWR                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t RAMDMACICM_:1; /*!< bit:      6  RAMDMACICM                         */
    volatile /*!< Defines 'read only' permissions */ uint32_t HPB0_:1; /*!< bit:      7  HPB0                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t HPB1_:1; /*!< bit:      8  HPB1                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t HPB2_:1; /*!< bit:      9  HPB2                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t HPB3_:1; /*!< bit:     10  HPB3                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t PUKCC_:1; /*!< bit:     11  PUKCC                              */
    volatile /*!< Defines 'read only' permissions */ uint32_t SDHC0_:1; /*!< bit:     12  SDHC0                              */
    volatile /*!< Defines 'read only' permissions */ uint32_t SDHC1_:1; /*!< bit:     13  SDHC1                              */
    volatile /*!< Defines 'read only' permissions */ uint32_t QSPI_:1; /*!< bit:     14  QSPI                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t BKUPRAM_:1; /*!< bit:     15  BKUPRAM                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PAC_INTFLAGAHB_Type;
# 189 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/* -------- PAC_INTFLAGA : (PAC Offset: 0x14) (R/W 32) Peripheral interrupt flag status - Bridge A -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t PAC_:1; /*!< bit:      0  PAC                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t PM_:1; /*!< bit:      1  PM                                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t MCLK_:1; /*!< bit:      2  MCLK                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t RSTC_:1; /*!< bit:      3  RSTC                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t OSCCTRL_:1; /*!< bit:      4  OSCCTRL                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t OSC32KCTRL_:1; /*!< bit:      5  OSC32KCTRL                         */
    volatile /*!< Defines 'read only' permissions */ uint32_t SUPC_:1; /*!< bit:      6  SUPC                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t GCLK_:1; /*!< bit:      7  GCLK                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t WDT_:1; /*!< bit:      8  WDT                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t RTC_:1; /*!< bit:      9  RTC                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t EIC_:1; /*!< bit:     10  EIC                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t FREQM_:1; /*!< bit:     11  FREQM                              */
    volatile /*!< Defines 'read only' permissions */ uint32_t SERCOM0_:1; /*!< bit:     12  SERCOM0                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t SERCOM1_:1; /*!< bit:     13  SERCOM1                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t TC0_:1; /*!< bit:     14  TC0                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t TC1_:1; /*!< bit:     15  TC1                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PAC_INTFLAGA_Type;
# 252 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/* -------- PAC_INTFLAGB : (PAC Offset: 0x18) (R/W 32) Peripheral interrupt flag status - Bridge B -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t USB_:1; /*!< bit:      0  USB                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t DSU_:1; /*!< bit:      1  DSU                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t NVMCTRL_:1; /*!< bit:      2  NVMCTRL                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t CMCC_:1; /*!< bit:      3  CMCC                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t PORT_:1; /*!< bit:      4  PORT                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t DMAC_:1; /*!< bit:      5  DMAC                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t HMATRIX_:1; /*!< bit:      6  HMATRIX                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t EVSYS_:1; /*!< bit:      7  EVSYS                              */
    volatile /*!< Defines 'read only' permissions */ uint32_t :1; /*!< bit:      8  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t SERCOM2_:1; /*!< bit:      9  SERCOM2                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t SERCOM3_:1; /*!< bit:     10  SERCOM3                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t TCC0_:1; /*!< bit:     11  TCC0                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t TCC1_:1; /*!< bit:     12  TCC1                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t TC2_:1; /*!< bit:     13  TC2                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t TC3_:1; /*!< bit:     14  TC3                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t TAL_:1; /*!< bit:     15  TAL                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t RAMECC_:1; /*!< bit:     16  RAMECC                             */
    volatile /*!< Defines 'read only' permissions */ uint32_t :15; /*!< bit: 17..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PAC_INTFLAGB_Type;
# 316 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/* -------- PAC_INTFLAGC : (PAC Offset: 0x1C) (R/W 32) Peripheral interrupt flag status - Bridge C -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t :3; /*!< bit:  0.. 2  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t TCC2_:1; /*!< bit:      3  TCC2                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t TCC3_:1; /*!< bit:      4  TCC3                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t TC4_:1; /*!< bit:      5  TC4                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t TC5_:1; /*!< bit:      6  TC5                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t PDEC_:1; /*!< bit:      7  PDEC                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t AC_:1; /*!< bit:      8  AC                                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t AES_:1; /*!< bit:      9  AES                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t TRNG_:1; /*!< bit:     10  TRNG                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t ICM_:1; /*!< bit:     11  ICM                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t PUKCC_:1; /*!< bit:     12  PUKCC                              */
    volatile /*!< Defines 'read only' permissions */ uint32_t QSPI_:1; /*!< bit:     13  QSPI                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t CCL_:1; /*!< bit:     14  CCL                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t :17; /*!< bit: 15..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PAC_INTFLAGC_Type;
# 368 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/* -------- PAC_INTFLAGD : (PAC Offset: 0x20) (R/W 32) Peripheral interrupt flag status - Bridge D -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t SERCOM4_:1; /*!< bit:      0  SERCOM4                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t SERCOM5_:1; /*!< bit:      1  SERCOM5                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t SERCOM6_:1; /*!< bit:      2  SERCOM6                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t SERCOM7_:1; /*!< bit:      3  SERCOM7                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t TCC4_:1; /*!< bit:      4  TCC4                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t TC6_:1; /*!< bit:      5  TC6                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t TC7_:1; /*!< bit:      6  TC7                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t ADC0_:1; /*!< bit:      7  ADC0                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t ADC1_:1; /*!< bit:      8  ADC1                               */
    volatile /*!< Defines 'read only' permissions */ uint32_t DAC_:1; /*!< bit:      9  DAC                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t I2S_:1; /*!< bit:     10  I2S                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t PCC_:1; /*!< bit:     11  PCC                                */
    volatile /*!< Defines 'read only' permissions */ uint32_t :20; /*!< bit: 12..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PAC_INTFLAGD_Type;
# 419 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/* -------- PAC_STATUSA : (PAC Offset: 0x34) (R/  32) Peripheral write protection status - Bridge A -------- */

typedef union {
  struct {
    uint32_t PAC_:1; /*!< bit:      0  PAC APB Protect Enable             */
    uint32_t PM_:1; /*!< bit:      1  PM APB Protect Enable              */
    uint32_t MCLK_:1; /*!< bit:      2  MCLK APB Protect Enable            */
    uint32_t RSTC_:1; /*!< bit:      3  RSTC APB Protect Enable            */
    uint32_t OSCCTRL_:1; /*!< bit:      4  OSCCTRL APB Protect Enable         */
    uint32_t OSC32KCTRL_:1; /*!< bit:      5  OSC32KCTRL APB Protect Enable      */
    uint32_t SUPC_:1; /*!< bit:      6  SUPC APB Protect Enable            */
    uint32_t GCLK_:1; /*!< bit:      7  GCLK APB Protect Enable            */
    uint32_t WDT_:1; /*!< bit:      8  WDT APB Protect Enable             */
    uint32_t RTC_:1; /*!< bit:      9  RTC APB Protect Enable             */
    uint32_t EIC_:1; /*!< bit:     10  EIC APB Protect Enable             */
    uint32_t FREQM_:1; /*!< bit:     11  FREQM APB Protect Enable           */
    uint32_t SERCOM0_:1; /*!< bit:     12  SERCOM0 APB Protect Enable         */
    uint32_t SERCOM1_:1; /*!< bit:     13  SERCOM1 APB Protect Enable         */
    uint32_t TC0_:1; /*!< bit:     14  TC0 APB Protect Enable             */
    uint32_t TC1_:1; /*!< bit:     15  TC1 APB Protect Enable             */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PAC_STATUSA_Type;
# 482 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/* -------- PAC_STATUSB : (PAC Offset: 0x38) (R/  32) Peripheral write protection status - Bridge B -------- */

typedef union {
  struct {
    uint32_t USB_:1; /*!< bit:      0  USB APB Protect Enable             */
    uint32_t DSU_:1; /*!< bit:      1  DSU APB Protect Enable             */
    uint32_t NVMCTRL_:1; /*!< bit:      2  NVMCTRL APB Protect Enable         */
    uint32_t CMCC_:1; /*!< bit:      3  CMCC APB Protect Enable            */
    uint32_t PORT_:1; /*!< bit:      4  PORT APB Protect Enable            */
    uint32_t DMAC_:1; /*!< bit:      5  DMAC APB Protect Enable            */
    uint32_t HMATRIX_:1; /*!< bit:      6  HMATRIX APB Protect Enable         */
    uint32_t EVSYS_:1; /*!< bit:      7  EVSYS APB Protect Enable           */
    uint32_t :1; /*!< bit:      8  Reserved                           */
    uint32_t SERCOM2_:1; /*!< bit:      9  SERCOM2 APB Protect Enable         */
    uint32_t SERCOM3_:1; /*!< bit:     10  SERCOM3 APB Protect Enable         */
    uint32_t TCC0_:1; /*!< bit:     11  TCC0 APB Protect Enable            */
    uint32_t TCC1_:1; /*!< bit:     12  TCC1 APB Protect Enable            */
    uint32_t TC2_:1; /*!< bit:     13  TC2 APB Protect Enable             */
    uint32_t TC3_:1; /*!< bit:     14  TC3 APB Protect Enable             */
    uint32_t TAL_:1; /*!< bit:     15  TAL APB Protect Enable             */
    uint32_t RAMECC_:1; /*!< bit:     16  RAMECC APB Protect Enable          */
    uint32_t :15; /*!< bit: 17..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PAC_STATUSB_Type;
# 546 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/* -------- PAC_STATUSC : (PAC Offset: 0x3C) (R/  32) Peripheral write protection status - Bridge C -------- */

typedef union {
  struct {
    uint32_t :3; /*!< bit:  0.. 2  Reserved                           */
    uint32_t TCC2_:1; /*!< bit:      3  TCC2 APB Protect Enable            */
    uint32_t TCC3_:1; /*!< bit:      4  TCC3 APB Protect Enable            */
    uint32_t TC4_:1; /*!< bit:      5  TC4 APB Protect Enable             */
    uint32_t TC5_:1; /*!< bit:      6  TC5 APB Protect Enable             */
    uint32_t PDEC_:1; /*!< bit:      7  PDEC APB Protect Enable            */
    uint32_t AC_:1; /*!< bit:      8  AC APB Protect Enable              */
    uint32_t AES_:1; /*!< bit:      9  AES APB Protect Enable             */
    uint32_t TRNG_:1; /*!< bit:     10  TRNG APB Protect Enable            */
    uint32_t ICM_:1; /*!< bit:     11  ICM APB Protect Enable             */
    uint32_t PUKCC_:1; /*!< bit:     12  PUKCC APB Protect Enable           */
    uint32_t QSPI_:1; /*!< bit:     13  QSPI APB Protect Enable            */
    uint32_t CCL_:1; /*!< bit:     14  CCL APB Protect Enable             */
    uint32_t :17; /*!< bit: 15..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PAC_STATUSC_Type;
# 598 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/* -------- PAC_STATUSD : (PAC Offset: 0x40) (R/  32) Peripheral write protection status - Bridge D -------- */

typedef union {
  struct {
    uint32_t SERCOM4_:1; /*!< bit:      0  SERCOM4 APB Protect Enable         */
    uint32_t SERCOM5_:1; /*!< bit:      1  SERCOM5 APB Protect Enable         */
    uint32_t SERCOM6_:1; /*!< bit:      2  SERCOM6 APB Protect Enable         */
    uint32_t SERCOM7_:1; /*!< bit:      3  SERCOM7 APB Protect Enable         */
    uint32_t TCC4_:1; /*!< bit:      4  TCC4 APB Protect Enable            */
    uint32_t TC6_:1; /*!< bit:      5  TC6 APB Protect Enable             */
    uint32_t TC7_:1; /*!< bit:      6  TC7 APB Protect Enable             */
    uint32_t ADC0_:1; /*!< bit:      7  ADC0 APB Protect Enable            */
    uint32_t ADC1_:1; /*!< bit:      8  ADC1 APB Protect Enable            */
    uint32_t DAC_:1; /*!< bit:      9  DAC APB Protect Enable             */
    uint32_t I2S_:1; /*!< bit:     10  I2S APB Protect Enable             */
    uint32_t PCC_:1; /*!< bit:     11  PCC APB Protect Enable             */
    uint32_t :20; /*!< bit: 12..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PAC_STATUSD_Type;
# 649 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pac.h"
/** \brief PAC hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ PAC_WRCTRL_Type WRCTRL; /**< \brief Offset: 0x00 (R/W 32) Write control */
  volatile /*!< Defines 'read / write' permissions */ PAC_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x04 (R/W  8) Event control */
       RoReg8 Reserved1[0x3];
  volatile /*!< Defines 'read / write' permissions */ PAC_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x08 (R/W  8) Interrupt enable clear */
  volatile /*!< Defines 'read / write' permissions */ PAC_INTENSET_Type INTENSET; /**< \brief Offset: 0x09 (R/W  8) Interrupt enable set */
       RoReg8 Reserved2[0x6];
  volatile /*!< Defines 'read / write' permissions */ PAC_INTFLAGAHB_Type INTFLAGAHB; /**< \brief Offset: 0x10 (R/W 32) Bridge interrupt flag status */
  volatile /*!< Defines 'read / write' permissions */ PAC_INTFLAGA_Type INTFLAGA; /**< \brief Offset: 0x14 (R/W 32) Peripheral interrupt flag status - Bridge A */
  volatile /*!< Defines 'read / write' permissions */ PAC_INTFLAGB_Type INTFLAGB; /**< \brief Offset: 0x18 (R/W 32) Peripheral interrupt flag status - Bridge B */
  volatile /*!< Defines 'read / write' permissions */ PAC_INTFLAGC_Type INTFLAGC; /**< \brief Offset: 0x1C (R/W 32) Peripheral interrupt flag status - Bridge C */
  volatile /*!< Defines 'read / write' permissions */ PAC_INTFLAGD_Type INTFLAGD; /**< \brief Offset: 0x20 (R/W 32) Peripheral interrupt flag status - Bridge D */
       RoReg8 Reserved3[0x10];
  volatile /*!< Defines 'read only' permissions */ PAC_STATUSA_Type STATUSA; /**< \brief Offset: 0x34 (R/  32) Peripheral write protection status - Bridge A */
  volatile /*!< Defines 'read only' permissions */ PAC_STATUSB_Type STATUSB; /**< \brief Offset: 0x38 (R/  32) Peripheral write protection status - Bridge B */
  volatile /*!< Defines 'read only' permissions */ PAC_STATUSC_Type STATUSC; /**< \brief Offset: 0x3C (R/  32) Peripheral write protection status - Bridge C */
  volatile /*!< Defines 'read only' permissions */ PAC_STATUSD_Type STATUSD; /**< \brief Offset: 0x40 (R/  32) Peripheral write protection status - Bridge D */
} Pac;


/*@}*/
# 596 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pcc.h" 1
/**
 * \file
 *
 * \brief Component description for PCC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR PCC */
/* ========================================================================== */
/** \addtogroup SAMD51_PCC Parallel Capture Controller */
/*@{*/




/* -------- PCC_MR : (PCC Offset: 0x00) (R/W 32) Mode Register -------- */

typedef union {
  struct {
    uint32_t PCEN:1; /*!< bit:      0  Parallel Capture Enable            */
    uint32_t :3; /*!< bit:  1.. 3  Reserved                           */
    uint32_t DSIZE:2; /*!< bit:  4.. 5  Data size                          */
    uint32_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint32_t SCALE:1; /*!< bit:      8  Scale data                         */
    uint32_t ALWYS:1; /*!< bit:      9  Always Sampling                    */
    uint32_t HALFS:1; /*!< bit:     10  Half Sampling                      */
    uint32_t FRSTS:1; /*!< bit:     11  First sample                       */
    uint32_t :4; /*!< bit: 12..15  Reserved                           */
    uint32_t ISIZE:3; /*!< bit: 16..18  Input Data Size                    */
    uint32_t :11; /*!< bit: 19..29  Reserved                           */
    uint32_t CID:2; /*!< bit: 30..31  Clear If Disabled                  */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PCC_MR_Type;
# 86 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pcc.h"
/* -------- PCC_IER : (PCC Offset: 0x04) ( /W 32) Interrupt Enable Register -------- */

typedef union {
  struct {
    uint32_t DRDY:1; /*!< bit:      0  Data Ready Interrupt Enable        */
    uint32_t OVRE:1; /*!< bit:      1  Overrun Error Interrupt Enable     */
    uint32_t :30; /*!< bit:  2..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PCC_IER_Type;
# 107 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pcc.h"
/* -------- PCC_IDR : (PCC Offset: 0x08) ( /W 32) Interrupt Disable Register -------- */

typedef union {
  struct {
    uint32_t DRDY:1; /*!< bit:      0  Data Ready Interrupt Disable       */
    uint32_t OVRE:1; /*!< bit:      1  Overrun Error Interrupt Disable    */
    uint32_t :30; /*!< bit:  2..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PCC_IDR_Type;
# 128 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pcc.h"
/* -------- PCC_IMR : (PCC Offset: 0x0C) (R/  32) Interrupt Mask Register -------- */

typedef union {
  struct {
    uint32_t DRDY:1; /*!< bit:      0  Data Ready Interrupt Mask          */
    uint32_t OVRE:1; /*!< bit:      1  Overrun Error Interrupt Mask       */
    uint32_t :30; /*!< bit:  2..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PCC_IMR_Type;
# 149 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pcc.h"
/* -------- PCC_ISR : (PCC Offset: 0x10) (R/  32) Interrupt Status Register -------- */

typedef union {
  struct {
    uint32_t DRDY:1; /*!< bit:      0  Data Ready Interrupt Status        */
    uint32_t OVRE:1; /*!< bit:      1  Overrun Error Interrupt Status     */
    uint32_t :30; /*!< bit:  2..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PCC_ISR_Type;
# 170 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pcc.h"
/* -------- PCC_RHR : (PCC Offset: 0x14) (R/  32) Reception Holding Register -------- */

typedef union {
  struct {
    uint32_t RDATA:32; /*!< bit:  0..31  Reception Data                     */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PCC_RHR_Type;
# 188 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pcc.h"
/* -------- PCC_WPMR : (PCC Offset: 0xE0) (R/W 32) Write Protection Mode Register -------- */

typedef union {
  struct {
    uint32_t WPEN:1; /*!< bit:      0  Write Protection Enable            */
    uint32_t :7; /*!< bit:  1.. 7  Reserved                           */
    uint32_t WPKEY:24; /*!< bit:  8..31  Write Protection Key               */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PCC_WPMR_Type;
# 210 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pcc.h"
/* -------- PCC_WPSR : (PCC Offset: 0xE4) (R/  32) Write Protection Status Register -------- */

typedef union {
  struct {
    uint32_t WPVS:1; /*!< bit:      0  Write Protection Violation Source  */
    uint32_t :7; /*!< bit:  1.. 7  Reserved                           */
    uint32_t WPVSRC:16; /*!< bit:  8..23  Write Protection Violation Status  */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PCC_WPSR_Type;
# 233 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pcc.h"
/** \brief PCC hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ PCC_MR_Type MR; /**< \brief Offset: 0x00 (R/W 32) Mode Register */
  volatile /*!< Defines 'write only' permissions */ PCC_IER_Type IER; /**< \brief Offset: 0x04 ( /W 32) Interrupt Enable Register */
  volatile /*!< Defines 'write only' permissions */ PCC_IDR_Type IDR; /**< \brief Offset: 0x08 ( /W 32) Interrupt Disable Register */
  volatile /*!< Defines 'read only' permissions */ PCC_IMR_Type IMR; /**< \brief Offset: 0x0C (R/  32) Interrupt Mask Register */
  volatile /*!< Defines 'read only' permissions */ PCC_ISR_Type ISR; /**< \brief Offset: 0x10 (R/  32) Interrupt Status Register */
  volatile /*!< Defines 'read only' permissions */ PCC_RHR_Type RHR; /**< \brief Offset: 0x14 (R/  32) Reception Holding Register */
       RoReg8 Reserved1[0xC8];
  volatile /*!< Defines 'read / write' permissions */ PCC_WPMR_Type WPMR; /**< \brief Offset: 0xE0 (R/W 32) Write Protection Mode Register */
  volatile /*!< Defines 'read only' permissions */ PCC_WPSR_Type WPSR; /**< \brief Offset: 0xE4 (R/  32) Write Protection Status Register */
} Pcc;


/*@}*/
# 597 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h" 1
/**
 * \file
 *
 * \brief Component description for PDEC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR PDEC */
/* ========================================================================== */
/** \addtogroup SAMD51_PDEC Quadrature Decodeur */
/*@{*/




/* -------- PDEC_CTRLA : (PDEC Offset: 0x00) (R/W 32) Control A -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t MODE:2; /*!< bit:  2.. 3  Operation Mode                     */
    uint32_t :2; /*!< bit:  4.. 5  Reserved                           */
    uint32_t RUNSTDBY:1; /*!< bit:      6  Run in Standby                     */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t CONF:3; /*!< bit:  8..10  PDEC Configuration                 */
    uint32_t ALOCK:1; /*!< bit:     11  Auto Lock                          */
    uint32_t :2; /*!< bit: 12..13  Reserved                           */
    uint32_t SWAP:1; /*!< bit:     14  PDEC Phase A and B Swap            */
    uint32_t PEREN:1; /*!< bit:     15  Period Enable                      */
    uint32_t PINEN0:1; /*!< bit:     16  PDEC Input From Pin 0 Enable       */
    uint32_t PINEN1:1; /*!< bit:     17  PDEC Input From Pin 1 Enable       */
    uint32_t PINEN2:1; /*!< bit:     18  PDEC Input From Pin 2 Enable       */
    uint32_t :1; /*!< bit:     19  Reserved                           */
    uint32_t PINVEN0:1; /*!< bit:     20  IO Pin 0 Invert Enable             */
    uint32_t PINVEN1:1; /*!< bit:     21  IO Pin 1 Invert Enable             */
    uint32_t PINVEN2:1; /*!< bit:     22  IO Pin 2 Invert Enable             */
    uint32_t :1; /*!< bit:     23  Reserved                           */
    uint32_t ANGULAR:3; /*!< bit: 24..26  Angular Counter Length             */
    uint32_t :1; /*!< bit:     27  Reserved                           */
    uint32_t MAXCMP:4; /*!< bit: 28..31  Maximum Consecutive Missing Pulses */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :16; /*!< bit:  0..15  Reserved                           */
    uint32_t PINEN:3; /*!< bit: 16..18  PDEC Input From Pin x Enable       */
    uint32_t :1; /*!< bit:     19  Reserved                           */
    uint32_t PINVEN:3; /*!< bit: 20..22  IO Pin x Invert Enable             */
    uint32_t :9; /*!< bit: 23..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PDEC_CTRLA_Type;
# 142 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_CTRLBCLR : (PDEC Offset: 0x04) (R/W  8) Control B Clear -------- */

typedef union {
  struct {
    uint8_t :1; /*!< bit:      0  Reserved                           */
    uint8_t LUPD:1; /*!< bit:      1  Lock Update                        */
    uint8_t :3; /*!< bit:  2.. 4  Reserved                           */
    uint8_t CMD:3; /*!< bit:  5.. 7  Command                            */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PDEC_CTRLBCLR_Type;
# 177 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_CTRLBSET : (PDEC Offset: 0x05) (R/W  8) Control B Set -------- */

typedef union {
  struct {
    uint8_t :1; /*!< bit:      0  Reserved                           */
    uint8_t LUPD:1; /*!< bit:      1  Lock Update                        */
    uint8_t :3; /*!< bit:  2.. 4  Reserved                           */
    uint8_t CMD:3; /*!< bit:  5.. 7  Command                            */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PDEC_CTRLBSET_Type;
# 212 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_EVCTRL : (PDEC Offset: 0x06) (R/W 16) Event Control -------- */

typedef union {
  struct {
    uint16_t EVACT:2; /*!< bit:  0.. 1  Event Action                       */
    uint16_t EVINV:3; /*!< bit:  2.. 4  Inverted Event Input Enable        */
    uint16_t EVEI:3; /*!< bit:  5.. 7  Event Input Enable                 */
    uint16_t OVFEO:1; /*!< bit:      8  Overflow/Underflow Output Event Enable */
    uint16_t ERREO:1; /*!< bit:      9  Error  Output Event Enable         */
    uint16_t DIREO:1; /*!< bit:     10  Direction Output Event Enable      */
    uint16_t VLCEO:1; /*!< bit:     11  Velocity Output Event Enable       */
    uint16_t MCEO0:1; /*!< bit:     12  Match Channel 0 Event Output Enable */
    uint16_t MCEO1:1; /*!< bit:     13  Match Channel 1 Event Output Enable */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t :12; /*!< bit:  0..11  Reserved                           */
    uint16_t MCEO:2; /*!< bit: 12..13  Match Channel x Event Output Enable */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} PDEC_EVCTRL_Type;
# 271 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_INTENCLR : (PDEC Offset: 0x08) (R/W  8) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t OVF:1; /*!< bit:      0  Overflow/Underflow Interrupt Disable */
    uint8_t ERR:1; /*!< bit:      1  Error Interrupt Disable            */
    uint8_t DIR:1; /*!< bit:      2  Direction Interrupt Disable        */
    uint8_t VLC:1; /*!< bit:      3  Velocity Interrupt Disable         */
    uint8_t MC0:1; /*!< bit:      4  Channel 0 Compare Match Disable    */
    uint8_t MC1:1; /*!< bit:      5  Channel 1 Compare Match Disable    */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t :4; /*!< bit:  0.. 3  Reserved                           */
    uint8_t MC:2; /*!< bit:  4.. 5  Channel x Compare Match Disable    */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PDEC_INTENCLR_Type;
# 312 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_INTENSET : (PDEC Offset: 0x09) (R/W  8) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t OVF:1; /*!< bit:      0  Overflow/Underflow Interrupt Enable */
    uint8_t ERR:1; /*!< bit:      1  Error Interrupt Enable             */
    uint8_t DIR:1; /*!< bit:      2  Direction Interrupt Enable         */
    uint8_t VLC:1; /*!< bit:      3  Velocity Interrupt Enable          */
    uint8_t MC0:1; /*!< bit:      4  Channel 0 Compare Match Enable     */
    uint8_t MC1:1; /*!< bit:      5  Channel 1 Compare Match Enable     */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t :4; /*!< bit:  0.. 3  Reserved                           */
    uint8_t MC:2; /*!< bit:  4.. 5  Channel x Compare Match Enable     */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PDEC_INTENSET_Type;
# 353 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_INTFLAG : (PDEC Offset: 0x0A) (R/W  8) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t OVF:1; /*!< bit:      0  Overflow/Underflow                 */
    volatile /*!< Defines 'read only' permissions */ uint8_t ERR:1; /*!< bit:      1  Error                              */
    volatile /*!< Defines 'read only' permissions */ uint8_t DIR:1; /*!< bit:      2  Direction Change                   */
    volatile /*!< Defines 'read only' permissions */ uint8_t VLC:1; /*!< bit:      3  Velocity                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t MC0:1; /*!< bit:      4  Channel 0 Compare Match            */
    volatile /*!< Defines 'read only' permissions */ uint8_t MC1:1; /*!< bit:      5  Channel 1 Compare Match            */
    volatile /*!< Defines 'read only' permissions */ uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t :4; /*!< bit:  0.. 3  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t MC:2; /*!< bit:  4.. 5  Channel x Compare Match            */
    volatile /*!< Defines 'read only' permissions */ uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PDEC_INTFLAG_Type;
# 394 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_STATUS : (PDEC Offset: 0x0C) (R/W 16) Status -------- */

typedef union {
  struct {
    uint16_t QERR:1; /*!< bit:      0  Quadrature Error Flag              */
    uint16_t IDXERR:1; /*!< bit:      1  Index Error Flag                   */
    uint16_t MPERR:1; /*!< bit:      2  Missing Pulse Error flag           */
    uint16_t :1; /*!< bit:      3  Reserved                           */
    uint16_t WINERR:1; /*!< bit:      4  Window Error Flag                  */
    uint16_t HERR:1; /*!< bit:      5  Hall Error Flag                    */
    uint16_t STOP:1; /*!< bit:      6  Stop                               */
    uint16_t DIR:1; /*!< bit:      7  Direction Status Flag              */
    uint16_t PRESCBUFV:1; /*!< bit:      8  Prescaler Buffer Valid             */
    uint16_t FILTERBUFV:1; /*!< bit:      9  Filter Buffer Valid                */
    uint16_t :2; /*!< bit: 10..11  Reserved                           */
    uint16_t CCBUFV0:1; /*!< bit:     12  Compare Channel 0 Buffer Valid     */
    uint16_t CCBUFV1:1; /*!< bit:     13  Compare Channel 1 Buffer Valid     */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t :12; /*!< bit:  0..11  Reserved                           */
    uint16_t CCBUFV:2; /*!< bit: 12..13  Compare Channel x Buffer Valid     */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} PDEC_STATUS_Type;
# 452 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_DBGCTRL : (PDEC Offset: 0x0F) (R/W  8) Debug Control -------- */

typedef union {
  struct {
    uint8_t DBGRUN:1; /*!< bit:      0  Debug Run Mode                     */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PDEC_DBGCTRL_Type;
# 470 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_SYNCBUSY : (PDEC Offset: 0x10) (R/  32) Synchronization Status -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset Synchronization Busy */
    uint32_t ENABLE:1; /*!< bit:      1  Enable Synchronization Busy        */
    uint32_t CTRLB:1; /*!< bit:      2  Control B Synchronization Busy     */
    uint32_t STATUS:1; /*!< bit:      3  Status Synchronization Busy        */
    uint32_t PRESC:1; /*!< bit:      4  Prescaler Synchronization Busy     */
    uint32_t FILTER:1; /*!< bit:      5  Filter Synchronization Busy        */
    uint32_t COUNT:1; /*!< bit:      6  Count Synchronization Busy         */
    uint32_t CC0:1; /*!< bit:      7  Compare Channel 0 Synchronization Busy */
    uint32_t CC1:1; /*!< bit:      8  Compare Channel 1 Synchronization Busy */
    uint32_t :23; /*!< bit:  9..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :7; /*!< bit:  0.. 6  Reserved                           */
    uint32_t CC:2; /*!< bit:  7.. 8  Compare Channel x Synchronization Busy */
    uint32_t :23; /*!< bit:  9..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PDEC_SYNCBUSY_Type;
# 520 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_PRESC : (PDEC Offset: 0x14) (R/W  8) Prescaler Value -------- */

typedef union {
  struct {
    uint8_t PRESC:4; /*!< bit:  0.. 3  Prescaler Value                    */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PDEC_PRESC_Type;
# 561 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_FILTER : (PDEC Offset: 0x15) (R/W  8) Filter Value -------- */

typedef union {
  struct {
    uint8_t FILTER:8; /*!< bit:  0.. 7  Filter Value                       */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PDEC_FILTER_Type;
# 579 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_PRESCBUF : (PDEC Offset: 0x18) (R/W  8) Prescaler Buffer Value -------- */

typedef union {
  struct {
    uint8_t PRESCBUF:4; /*!< bit:  0.. 3  Prescaler Buffer Value             */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PDEC_PRESCBUF_Type;
# 620 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_FILTERBUF : (PDEC Offset: 0x19) (R/W  8) Filter Buffer Value -------- */

typedef union {
  struct {
    uint8_t FILTERBUF:8; /*!< bit:  0.. 7  Filter Buffer Value                */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PDEC_FILTERBUF_Type;
# 638 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_COUNT : (PDEC Offset: 0x1C) (R/W 32) Counter Value -------- */

typedef union {
  struct {
    uint32_t COUNT:16; /*!< bit:  0..15  Counter Value                      */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PDEC_COUNT_Type;
# 657 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_CC : (PDEC Offset: 0x20) (R/W 32) Channel n Compare Value -------- */

typedef union {
  struct {
    uint32_t CC:16; /*!< bit:  0..15  Channel Compare Value              */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PDEC_CC_Type;
# 676 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/* -------- PDEC_CCBUF : (PDEC Offset: 0x30) (R/W 32) Channel Compare Buffer Value -------- */

typedef union {
  struct {
    uint32_t CCBUF:16; /*!< bit:  0..15  Channel Compare Buffer Value       */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PDEC_CCBUF_Type;
# 695 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pdec.h"
/** \brief PDEC hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ PDEC_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 32) Control A */
  volatile /*!< Defines 'read / write' permissions */ PDEC_CTRLBCLR_Type CTRLBCLR; /**< \brief Offset: 0x04 (R/W  8) Control B Clear */
  volatile /*!< Defines 'read / write' permissions */ PDEC_CTRLBSET_Type CTRLBSET; /**< \brief Offset: 0x05 (R/W  8) Control B Set */
  volatile /*!< Defines 'read / write' permissions */ PDEC_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x06 (R/W 16) Event Control */
  volatile /*!< Defines 'read / write' permissions */ PDEC_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x08 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ PDEC_INTENSET_Type INTENSET; /**< \brief Offset: 0x09 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ PDEC_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x0A (R/W  8) Interrupt Flag Status and Clear */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read / write' permissions */ PDEC_STATUS_Type STATUS; /**< \brief Offset: 0x0C (R/W 16) Status */
       RoReg8 Reserved2[0x1];
  volatile /*!< Defines 'read / write' permissions */ PDEC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x0F (R/W  8) Debug Control */
  volatile /*!< Defines 'read only' permissions */ PDEC_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x10 (R/  32) Synchronization Status */
  volatile /*!< Defines 'read / write' permissions */ PDEC_PRESC_Type PRESC; /**< \brief Offset: 0x14 (R/W  8) Prescaler Value */
  volatile /*!< Defines 'read / write' permissions */ PDEC_FILTER_Type FILTER; /**< \brief Offset: 0x15 (R/W  8) Filter Value */
       RoReg8 Reserved3[0x2];
  volatile /*!< Defines 'read / write' permissions */ PDEC_PRESCBUF_Type PRESCBUF; /**< \brief Offset: 0x18 (R/W  8) Prescaler Buffer Value */
  volatile /*!< Defines 'read / write' permissions */ PDEC_FILTERBUF_Type FILTERBUF; /**< \brief Offset: 0x19 (R/W  8) Filter Buffer Value */
       RoReg8 Reserved4[0x2];
  volatile /*!< Defines 'read / write' permissions */ PDEC_COUNT_Type COUNT; /**< \brief Offset: 0x1C (R/W 32) Counter Value */
  volatile /*!< Defines 'read / write' permissions */ PDEC_CC_Type CC[2]; /**< \brief Offset: 0x20 (R/W 32) Channel n Compare Value */
       RoReg8 Reserved5[0x8];
  volatile /*!< Defines 'read / write' permissions */ PDEC_CCBUF_Type CCBUF[2]; /**< \brief Offset: 0x30 (R/W 32) Channel Compare Buffer Value */
} Pdec;


/*@}*/
# 598 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pm.h" 1
/**
 * \file
 *
 * \brief Component description for PM
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR PM */
/* ========================================================================== */
/** \addtogroup SAMD51_PM Power Manager */
/*@{*/




/* -------- PM_CTRLA : (PM Offset: 0x00) (R/W  8) Control A -------- */

typedef union {
  struct {
    uint8_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint8_t IORET:1; /*!< bit:      2  I/O Retention                      */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PM_CTRLA_Type;
# 60 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pm.h"
/* -------- PM_SLEEPCFG : (PM Offset: 0x01) (R/W  8) Sleep Configuration -------- */

typedef union {
  struct {
    uint8_t SLEEPMODE:3; /*!< bit:  0.. 2  Sleep Mode                         */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PM_SLEEPCFG_Type;
# 93 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pm.h"
/* -------- PM_INTENCLR : (PM Offset: 0x04) (R/W  8) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t SLEEPRDY:1; /*!< bit:      0  Sleep Mode Entry Ready Enable      */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PM_INTENCLR_Type;
# 111 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pm.h"
/* -------- PM_INTENSET : (PM Offset: 0x05) (R/W  8) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t SLEEPRDY:1; /*!< bit:      0  Sleep Mode Entry Ready Enable      */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PM_INTENSET_Type;
# 129 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pm.h"
/* -------- PM_INTFLAG : (PM Offset: 0x06) (R/W  8) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t SLEEPRDY:1; /*!< bit:      0  Sleep Mode Entry Ready             */
    volatile /*!< Defines 'read only' permissions */ uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PM_INTFLAG_Type;
# 147 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pm.h"
/* -------- PM_STDBYCFG : (PM Offset: 0x08) (R/W  8) Standby Configuration -------- */

typedef union {
  struct {
    uint8_t RAMCFG:2; /*!< bit:  0.. 1  Ram Configuration                  */
    uint8_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint8_t FASTWKUP:2; /*!< bit:  4.. 5  Fast Wakeup                        */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PM_STDBYCFG_Type;
# 177 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pm.h"
/* -------- PM_HIBCFG : (PM Offset: 0x09) (R/W  8) Hibernate Configuration -------- */

typedef union {
  struct {
    uint8_t RAMCFG:2; /*!< bit:  0.. 1  Ram Configuration                  */
    uint8_t BRAMCFG:2; /*!< bit:  2.. 3  Backup Ram Configuration           */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PM_HIBCFG_Type;
# 200 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pm.h"
/* -------- PM_BKUPCFG : (PM Offset: 0x0A) (R/W  8) Backup Configuration -------- */

typedef union {
  struct {
    uint8_t BRAMCFG:2; /*!< bit:  0.. 1  Ram Configuration                  */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PM_BKUPCFG_Type;
# 219 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pm.h"
/* -------- PM_PWSAKDLY : (PM Offset: 0x12) (R/W  8) Power Switch Acknowledge Delay -------- */

typedef union {
  struct {
    uint8_t DLYVAL:7; /*!< bit:  0.. 6  Delay Value                        */
    uint8_t IGNACK:1; /*!< bit:      7  Ignore Acknowledge                 */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PM_PWSAKDLY_Type;
# 240 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/pm.h"
/** \brief PM hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ PM_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W  8) Control A */
  volatile /*!< Defines 'read / write' permissions */ PM_SLEEPCFG_Type SLEEPCFG; /**< \brief Offset: 0x01 (R/W  8) Sleep Configuration */
       RoReg8 Reserved1[0x2];
  volatile /*!< Defines 'read / write' permissions */ PM_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x04 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ PM_INTENSET_Type INTENSET; /**< \brief Offset: 0x05 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ PM_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x06 (R/W  8) Interrupt Flag Status and Clear */
       RoReg8 Reserved2[0x1];
  volatile /*!< Defines 'read / write' permissions */ PM_STDBYCFG_Type STDBYCFG; /**< \brief Offset: 0x08 (R/W  8) Standby Configuration */
  volatile /*!< Defines 'read / write' permissions */ PM_HIBCFG_Type HIBCFG; /**< \brief Offset: 0x09 (R/W  8) Hibernate Configuration */
  volatile /*!< Defines 'read / write' permissions */ PM_BKUPCFG_Type BKUPCFG; /**< \brief Offset: 0x0A (R/W  8) Backup Configuration */
       RoReg8 Reserved3[0x7];
  volatile /*!< Defines 'read / write' permissions */ PM_PWSAKDLY_Type PWSAKDLY; /**< \brief Offset: 0x12 (R/W  8) Power Switch Acknowledge Delay */
} Pm;


/*@}*/
# 599 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h" 1
/**
 * \file
 *
 * \brief Component description for PORT
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR PORT */
/* ========================================================================== */
/** \addtogroup SAMD51_PORT Port Module */
/*@{*/




/* -------- PORT_DIR : (PORT Offset: 0x00) (R/W 32) GROUP Data Direction -------- */

typedef union {
  struct {
    uint32_t DIR:32; /*!< bit:  0..31  Port Data Direction                */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PORT_DIR_Type;
# 59 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_DIRCLR : (PORT Offset: 0x04) (R/W 32) GROUP Data Direction Clear -------- */

typedef union {
  struct {
    uint32_t DIRCLR:32; /*!< bit:  0..31  Port Data Direction Clear          */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PORT_DIRCLR_Type;
# 77 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_DIRSET : (PORT Offset: 0x08) (R/W 32) GROUP Data Direction Set -------- */

typedef union {
  struct {
    uint32_t DIRSET:32; /*!< bit:  0..31  Port Data Direction Set            */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PORT_DIRSET_Type;
# 95 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_DIRTGL : (PORT Offset: 0x0C) (R/W 32) GROUP Data Direction Toggle -------- */

typedef union {
  struct {
    uint32_t DIRTGL:32; /*!< bit:  0..31  Port Data Direction Toggle         */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PORT_DIRTGL_Type;
# 113 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_OUT : (PORT Offset: 0x10) (R/W 32) GROUP Data Output Value -------- */

typedef union {
  struct {
    uint32_t OUT:32; /*!< bit:  0..31  PORT Data Output Value             */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PORT_OUT_Type;
# 131 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_OUTCLR : (PORT Offset: 0x14) (R/W 32) GROUP Data Output Value Clear -------- */

typedef union {
  struct {
    uint32_t OUTCLR:32; /*!< bit:  0..31  PORT Data Output Value Clear       */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PORT_OUTCLR_Type;
# 149 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_OUTSET : (PORT Offset: 0x18) (R/W 32) GROUP Data Output Value Set -------- */

typedef union {
  struct {
    uint32_t OUTSET:32; /*!< bit:  0..31  PORT Data Output Value Set         */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PORT_OUTSET_Type;
# 167 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_OUTTGL : (PORT Offset: 0x1C) (R/W 32) GROUP Data Output Value Toggle -------- */

typedef union {
  struct {
    uint32_t OUTTGL:32; /*!< bit:  0..31  PORT Data Output Value Toggle      */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PORT_OUTTGL_Type;
# 185 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_IN : (PORT Offset: 0x20) (R/  32) GROUP Data Input Value -------- */

typedef union {
  struct {
    uint32_t IN:32; /*!< bit:  0..31  PORT Data Input Value              */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PORT_IN_Type;
# 203 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_CTRL : (PORT Offset: 0x24) (R/W 32) GROUP Control -------- */

typedef union {
  struct {
    uint32_t SAMPLING:32; /*!< bit:  0..31  Input Sampling Mode                */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PORT_CTRL_Type;
# 221 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_WRCONFIG : (PORT Offset: 0x28) ( /W 32) GROUP Write Configuration -------- */

typedef union {
  struct {
    uint32_t PINMASK:16; /*!< bit:  0..15  Pin Mask for Multiple Pin Configuration */
    uint32_t PMUXEN:1; /*!< bit:     16  Peripheral Multiplexer Enable      */
    uint32_t INEN:1; /*!< bit:     17  Input Enable                       */
    uint32_t PULLEN:1; /*!< bit:     18  Pull Enable                        */
    uint32_t :3; /*!< bit: 19..21  Reserved                           */
    uint32_t DRVSTR:1; /*!< bit:     22  Output Driver Strength Selection   */
    uint32_t :1; /*!< bit:     23  Reserved                           */
    uint32_t PMUX:4; /*!< bit: 24..27  Peripheral Multiplexing            */
    uint32_t WRPMUX:1; /*!< bit:     28  Write PMUX                         */
    uint32_t :1; /*!< bit:     29  Reserved                           */
    uint32_t WRPINCFG:1; /*!< bit:     30  Write PINCFG                       */
    uint32_t HWSEL:1; /*!< bit:     31  Half-Word Select                   */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PORT_WRCONFIG_Type;
# 267 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_EVCTRL : (PORT Offset: 0x2C) (R/W 32) GROUP Event Input Control -------- */

typedef union {
  struct {
    uint32_t PID0:5; /*!< bit:  0.. 4  PORT Event Pin Identifier 0        */
    uint32_t EVACT0:2; /*!< bit:  5.. 6  PORT Event Action 0                */
    uint32_t PORTEI0:1; /*!< bit:      7  PORT Event Input Enable 0          */
    uint32_t PID1:5; /*!< bit:  8..12  PORT Event Pin Identifier 1        */
    uint32_t EVACT1:2; /*!< bit: 13..14  PORT Event Action 1                */
    uint32_t PORTEI1:1; /*!< bit:     15  PORT Event Input Enable 1          */
    uint32_t PID2:5; /*!< bit: 16..20  PORT Event Pin Identifier 2        */
    uint32_t EVACT2:2; /*!< bit: 21..22  PORT Event Action 2                */
    uint32_t PORTEI2:1; /*!< bit:     23  PORT Event Input Enable 2          */
    uint32_t PID3:5; /*!< bit: 24..28  PORT Event Pin Identifier 3        */
    uint32_t EVACT3:2; /*!< bit: 29..30  PORT Event Action 3                */
    uint32_t PORTEI3:1; /*!< bit:     31  PORT Event Input Enable 3          */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} PORT_EVCTRL_Type;
# 333 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_PMUX : (PORT Offset: 0x30) (R/W  8) GROUP Peripheral Multiplexing -------- */

typedef union {
  struct {
    uint8_t PMUXE:4; /*!< bit:  0.. 3  Peripheral Multiplexing for Even-Numbered Pin */
    uint8_t PMUXO:4; /*!< bit:  4.. 7  Peripheral Multiplexing for Odd-Numbered Pin */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PORT_PMUX_Type;
# 355 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/* -------- PORT_PINCFG : (PORT Offset: 0x40) (R/W  8) GROUP Pin Configuration -------- */

typedef union {
  struct {
    uint8_t PMUXEN:1; /*!< bit:      0  Peripheral Multiplexer Enable      */
    uint8_t INEN:1; /*!< bit:      1  Input Enable                       */
    uint8_t PULLEN:1; /*!< bit:      2  Pull Enable                        */
    uint8_t :3; /*!< bit:  3.. 5  Reserved                           */
    uint8_t DRVSTR:1; /*!< bit:      6  Output Driver Strength Selection   */
    uint8_t :1; /*!< bit:      7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} PORT_PINCFG_Type;
# 383 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/port.h"
/** \brief PortGroup hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ PORT_DIR_Type DIR; /**< \brief Offset: 0x00 (R/W 32) Data Direction */
  volatile /*!< Defines 'read / write' permissions */ PORT_DIRCLR_Type DIRCLR; /**< \brief Offset: 0x04 (R/W 32) Data Direction Clear */
  volatile /*!< Defines 'read / write' permissions */ PORT_DIRSET_Type DIRSET; /**< \brief Offset: 0x08 (R/W 32) Data Direction Set */
  volatile /*!< Defines 'read / write' permissions */ PORT_DIRTGL_Type DIRTGL; /**< \brief Offset: 0x0C (R/W 32) Data Direction Toggle */
  volatile /*!< Defines 'read / write' permissions */ PORT_OUT_Type OUT; /**< \brief Offset: 0x10 (R/W 32) Data Output Value */
  volatile /*!< Defines 'read / write' permissions */ PORT_OUTCLR_Type OUTCLR; /**< \brief Offset: 0x14 (R/W 32) Data Output Value Clear */
  volatile /*!< Defines 'read / write' permissions */ PORT_OUTSET_Type OUTSET; /**< \brief Offset: 0x18 (R/W 32) Data Output Value Set */
  volatile /*!< Defines 'read / write' permissions */ PORT_OUTTGL_Type OUTTGL; /**< \brief Offset: 0x1C (R/W 32) Data Output Value Toggle */
  volatile /*!< Defines 'read only' permissions */ PORT_IN_Type IN; /**< \brief Offset: 0x20 (R/  32) Data Input Value */
  volatile /*!< Defines 'read / write' permissions */ PORT_CTRL_Type CTRL; /**< \brief Offset: 0x24 (R/W 32) Control */
  volatile /*!< Defines 'write only' permissions */ PORT_WRCONFIG_Type WRCONFIG; /**< \brief Offset: 0x28 ( /W 32) Write Configuration */
  volatile /*!< Defines 'read / write' permissions */ PORT_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x2C (R/W 32) Event Input Control */
  volatile /*!< Defines 'read / write' permissions */ PORT_PMUX_Type PMUX[16]; /**< \brief Offset: 0x30 (R/W  8) Peripheral Multiplexing */
  volatile /*!< Defines 'read / write' permissions */ PORT_PINCFG_Type PINCFG[32]; /**< \brief Offset: 0x40 (R/W  8) Pin Configuration */
       RoReg8 Reserved1[0x20];
} PortGroup;


/** \brief PORT hardware registers */

typedef struct {
       PortGroup Group[4]; /**< \brief Offset: 0x00 PortGroup groups [GROUPS] */
} Port;


/*@}*/
# 600 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h" 1
/**
 * \file
 *
 * \brief Component description for QSPI
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR QSPI */
/* ========================================================================== */
/** \addtogroup SAMD51_QSPI Quad SPI interface */
/*@{*/




/* -------- QSPI_CTRLA : (QSPI Offset: 0x00) (R/W 32) Control A -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t :22; /*!< bit:  2..23  Reserved                           */
    uint32_t LASTXFER:1; /*!< bit:     24  Last Transfer                      */
    uint32_t :7; /*!< bit: 25..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_CTRLA_Type;
# 66 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_CTRLB : (QSPI Offset: 0x04) (R/W 32) Control B -------- */

typedef union {
  struct {
    uint32_t MODE:1; /*!< bit:      0  Serial Memory Mode                 */
    uint32_t LOOPEN:1; /*!< bit:      1  Local Loopback Enable              */
    uint32_t WDRBT:1; /*!< bit:      2  Wait Data Read Before Transfer     */
    uint32_t SMEMREG:1; /*!< bit:      3  Serial Memory reg                  */
    uint32_t CSMODE:2; /*!< bit:  4.. 5  Chip Select Mode                   */
    uint32_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint32_t DATALEN:4; /*!< bit:  8..11  Data Length                        */
    uint32_t :4; /*!< bit: 12..15  Reserved                           */
    uint32_t DLYBCT:8; /*!< bit: 16..23  Delay Between Consecutive Transfers */
    uint32_t DLYCS:8; /*!< bit: 24..31  Minimum Inactive CS Delay          */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_CTRLB_Type;
# 138 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_BAUD : (QSPI Offset: 0x08) (R/W 32) Baud Rate -------- */

typedef union {
  struct {
    uint32_t CPOL:1; /*!< bit:      0  Clock Polarity                     */
    uint32_t CPHA:1; /*!< bit:      1  Clock Phase                        */
    uint32_t :6; /*!< bit:  2.. 7  Reserved                           */
    uint32_t BAUD:8; /*!< bit:  8..15  Serial Clock Baud Rate             */
    uint32_t DLYBS:8; /*!< bit: 16..23  Delay Before SCK                   */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_BAUD_Type;
# 168 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_RXDATA : (QSPI Offset: 0x0C) (R/  32) Receive Data -------- */

typedef union {
  struct {
    uint32_t DATA:16; /*!< bit:  0..15  Receive Data                       */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_RXDATA_Type;
# 187 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_TXDATA : (QSPI Offset: 0x10) ( /W 32) Transmit Data -------- */

typedef union {
  struct {
    uint32_t DATA:16; /*!< bit:  0..15  Transmit Data                      */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_TXDATA_Type;
# 206 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_INTENCLR : (QSPI Offset: 0x14) (R/W 32) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint32_t RXC:1; /*!< bit:      0  Receive Data Register Full Interrupt Disable */
    uint32_t DRE:1; /*!< bit:      1  Transmit Data Register Empty Interrupt Disable */
    uint32_t TXC:1; /*!< bit:      2  Transmission Complete Interrupt Disable */
    uint32_t ERROR:1; /*!< bit:      3  Overrun Error Interrupt Disable    */
    uint32_t :4; /*!< bit:  4.. 7  Reserved                           */
    uint32_t CSRISE:1; /*!< bit:      8  Chip Select Rise Interrupt Disable */
    uint32_t :1; /*!< bit:      9  Reserved                           */
    uint32_t INSTREND:1; /*!< bit:     10  Instruction End Interrupt Disable  */
    uint32_t :21; /*!< bit: 11..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_INTENCLR_Type;
# 241 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_INTENSET : (QSPI Offset: 0x18) (R/W 32) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint32_t RXC:1; /*!< bit:      0  Receive Data Register Full Interrupt Enable */
    uint32_t DRE:1; /*!< bit:      1  Transmit Data Register Empty Interrupt Enable */
    uint32_t TXC:1; /*!< bit:      2  Transmission Complete Interrupt Enable */
    uint32_t ERROR:1; /*!< bit:      3  Overrun Error Interrupt Enable     */
    uint32_t :4; /*!< bit:  4.. 7  Reserved                           */
    uint32_t CSRISE:1; /*!< bit:      8  Chip Select Rise Interrupt Enable  */
    uint32_t :1; /*!< bit:      9  Reserved                           */
    uint32_t INSTREND:1; /*!< bit:     10  Instruction End Interrupt Enable   */
    uint32_t :21; /*!< bit: 11..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_INTENSET_Type;
# 276 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_INTFLAG : (QSPI Offset: 0x1C) (R/W 32) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t RXC:1; /*!< bit:      0  Receive Data Register Full         */
    volatile /*!< Defines 'read only' permissions */ uint32_t DRE:1; /*!< bit:      1  Transmit Data Register Empty       */
    volatile /*!< Defines 'read only' permissions */ uint32_t TXC:1; /*!< bit:      2  Transmission Complete              */
    volatile /*!< Defines 'read only' permissions */ uint32_t ERROR:1; /*!< bit:      3  Overrun Error                      */
    volatile /*!< Defines 'read only' permissions */ uint32_t :4; /*!< bit:  4.. 7  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t CSRISE:1; /*!< bit:      8  Chip Select Rise                   */
    volatile /*!< Defines 'read only' permissions */ uint32_t :1; /*!< bit:      9  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t INSTREND:1; /*!< bit:     10  Instruction End                    */
    volatile /*!< Defines 'read only' permissions */ uint32_t :21; /*!< bit: 11..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_INTFLAG_Type;
# 311 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_STATUS : (QSPI Offset: 0x20) (R/  32) Status Register -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t :7; /*!< bit:  2.. 8  Reserved                           */
    uint32_t CSSTATUS:1; /*!< bit:      9  Chip Select                        */
    uint32_t :22; /*!< bit: 10..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_STATUS_Type;
# 334 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_INSTRADDR : (QSPI Offset: 0x30) (R/W 32) Instruction Address -------- */

typedef union {
  struct {
    uint32_t ADDR:32; /*!< bit:  0..31  Instruction Address                */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_INSTRADDR_Type;
# 352 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_INSTRCTRL : (QSPI Offset: 0x34) (R/W 32) Instruction Code -------- */

typedef union {
  struct {
    uint32_t INSTR:8; /*!< bit:  0.. 7  Instruction Code                   */
    uint32_t :8; /*!< bit:  8..15  Reserved                           */
    uint32_t OPTCODE:8; /*!< bit: 16..23  Option Code                        */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_INSTRCTRL_Type;
# 376 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_INSTRFRAME : (QSPI Offset: 0x38) (R/W 32) Instruction Frame -------- */

typedef union {
  struct {
    uint32_t WIDTH:3; /*!< bit:  0.. 2  Instruction Code, Address, Option Code and Data Width */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t INSTREN:1; /*!< bit:      4  Instruction Enable                 */
    uint32_t ADDREN:1; /*!< bit:      5  Address Enable                     */
    uint32_t OPTCODEEN:1; /*!< bit:      6  Option Enable                      */
    uint32_t DATAEN:1; /*!< bit:      7  Data Enable                        */
    uint32_t OPTCODELEN:2; /*!< bit:  8.. 9  Option Code Length                 */
    uint32_t ADDRLEN:1; /*!< bit:     10  Address Length                     */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t TFRTYPE:2; /*!< bit: 12..13  Data Transfer Type                 */
    uint32_t CRMODE:1; /*!< bit:     14  Continuous Read Mode               */
    uint32_t DDREN:1; /*!< bit:     15  Double Data Rate Enable            */
    uint32_t DUMMYLEN:5; /*!< bit: 16..20  Dummy Cycles Length                */
    uint32_t :11; /*!< bit: 21..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_INSTRFRAME_Type;
# 464 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_SCRAMBCTRL : (QSPI Offset: 0x40) (R/W 32) Scrambling Mode -------- */

typedef union {
  struct {
    uint32_t ENABLE:1; /*!< bit:      0  Scrambling/Unscrambling Enable     */
    uint32_t RANDOMDIS:1; /*!< bit:      1  Scrambling/Unscrambling Random Value Disable */
    uint32_t :30; /*!< bit:  2..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_SCRAMBCTRL_Type;
# 485 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/* -------- QSPI_SCRAMBKEY : (QSPI Offset: 0x44) ( /W 32) Scrambling Key -------- */

typedef union {
  struct {
    uint32_t KEY:32; /*!< bit:  0..31  Scrambling User Key                */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} QSPI_SCRAMBKEY_Type;
# 503 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/qspi.h"
/** \brief QSPI APB hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ QSPI_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 32) Control A */
  volatile /*!< Defines 'read / write' permissions */ QSPI_CTRLB_Type CTRLB; /**< \brief Offset: 0x04 (R/W 32) Control B */
  volatile /*!< Defines 'read / write' permissions */ QSPI_BAUD_Type BAUD; /**< \brief Offset: 0x08 (R/W 32) Baud Rate */
  volatile /*!< Defines 'read only' permissions */ QSPI_RXDATA_Type RXDATA; /**< \brief Offset: 0x0C (R/  32) Receive Data */
  volatile /*!< Defines 'write only' permissions */ QSPI_TXDATA_Type TXDATA; /**< \brief Offset: 0x10 ( /W 32) Transmit Data */
  volatile /*!< Defines 'read / write' permissions */ QSPI_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x14 (R/W 32) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ QSPI_INTENSET_Type INTENSET; /**< \brief Offset: 0x18 (R/W 32) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ QSPI_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x1C (R/W 32) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read only' permissions */ QSPI_STATUS_Type STATUS; /**< \brief Offset: 0x20 (R/  32) Status Register */
       RoReg8 Reserved1[0xC];
  volatile /*!< Defines 'read / write' permissions */ QSPI_INSTRADDR_Type INSTRADDR; /**< \brief Offset: 0x30 (R/W 32) Instruction Address */
  volatile /*!< Defines 'read / write' permissions */ QSPI_INSTRCTRL_Type INSTRCTRL; /**< \brief Offset: 0x34 (R/W 32) Instruction Code */
  volatile /*!< Defines 'read / write' permissions */ QSPI_INSTRFRAME_Type INSTRFRAME; /**< \brief Offset: 0x38 (R/W 32) Instruction Frame */
       RoReg8 Reserved2[0x4];
  volatile /*!< Defines 'read / write' permissions */ QSPI_SCRAMBCTRL_Type SCRAMBCTRL; /**< \brief Offset: 0x40 (R/W 32) Scrambling Mode */
  volatile /*!< Defines 'write only' permissions */ QSPI_SCRAMBKEY_Type SCRAMBKEY; /**< \brief Offset: 0x44 ( /W 32) Scrambling Key */
} Qspi;


/*@}*/
# 601 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ramecc.h" 1
/**
 * \file
 *
 * \brief Component description for RAMECC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR RAMECC */
/* ========================================================================== */
/** \addtogroup SAMD51_RAMECC RAM ECC */
/*@{*/




/* -------- RAMECC_INTENCLR : (RAMECC Offset: 0x0) (R/W  8) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t SINGLEE:1; /*!< bit:      0  Single Bit ECC Error Interrupt Enable Clear */
    uint8_t DUALE:1; /*!< bit:      1  Dual Bit ECC Error Interrupt Enable Clear */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} RAMECC_INTENCLR_Type;
# 62 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ramecc.h"
/* -------- RAMECC_INTENSET : (RAMECC Offset: 0x1) (R/W  8) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t SINGLEE:1; /*!< bit:      0  Single Bit ECC Error Interrupt Enable Set */
    uint8_t DUALE:1; /*!< bit:      1  Dual Bit ECC Error Interrupt Enable Set */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} RAMECC_INTENSET_Type;
# 83 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ramecc.h"
/* -------- RAMECC_INTFLAG : (RAMECC Offset: 0x2) (R/W  8) Interrupt Flag -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t SINGLEE:1; /*!< bit:      0  Single Bit ECC Error Interrupt     */
    volatile /*!< Defines 'read only' permissions */ uint8_t DUALE:1; /*!< bit:      1  Dual Bit ECC Error Interrupt       */
    volatile /*!< Defines 'read only' permissions */ uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} RAMECC_INTFLAG_Type;
# 104 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ramecc.h"
/* -------- RAMECC_STATUS : (RAMECC Offset: 0x3) (R/   8) Status -------- */

typedef union {
  struct {
    uint8_t ECCDIS:1; /*!< bit:      0  ECC Disable                        */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} RAMECC_STATUS_Type;
# 122 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ramecc.h"
/* -------- RAMECC_ERRADDR : (RAMECC Offset: 0x4) (R/  32) Error Address -------- */

typedef union {
  struct {
    uint32_t ERRADDR:17; /*!< bit:  0..16  Error Address                      */
    uint32_t :15; /*!< bit: 17..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RAMECC_ERRADDR_Type;
# 141 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ramecc.h"
/* -------- RAMECC_DBGCTRL : (RAMECC Offset: 0xF) (R/W  8) Debug Control -------- */

typedef union {
  struct {
    uint8_t ECCDIS:1; /*!< bit:      0  ECC Disable                        */
    uint8_t ECCELOG:1; /*!< bit:      1  ECC Error Log                      */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} RAMECC_DBGCTRL_Type;
# 162 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/ramecc.h"
/** \brief RAMECC hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ RAMECC_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x0 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ RAMECC_INTENSET_Type INTENSET; /**< \brief Offset: 0x1 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ RAMECC_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x2 (R/W  8) Interrupt Flag */
  volatile /*!< Defines 'read only' permissions */ RAMECC_STATUS_Type STATUS; /**< \brief Offset: 0x3 (R/   8) Status */
  volatile /*!< Defines 'read only' permissions */ RAMECC_ERRADDR_Type ERRADDR; /**< \brief Offset: 0x4 (R/  32) Error Address */
       RoReg8 Reserved1[0x7];
  volatile /*!< Defines 'read / write' permissions */ RAMECC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0xF (R/W  8) Debug Control */
} Ramecc;


/*@}*/
# 602 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rstc.h" 1
/**
 * \file
 *
 * \brief Component description for RSTC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR RSTC */
/* ========================================================================== */
/** \addtogroup SAMD51_RSTC Reset Controller */
/*@{*/




/* -------- RSTC_RCAUSE : (RSTC Offset: 0x00) (R/   8) Reset Cause -------- */

typedef union {
  struct {
    uint8_t POR:1; /*!< bit:      0  Power On Reset                     */
    uint8_t BODCORE:1; /*!< bit:      1  Brown Out CORE Detector Reset      */
    uint8_t BODVDD:1; /*!< bit:      2  Brown Out VDD Detector Reset       */
    uint8_t NVM:1; /*!< bit:      3  NVM Reset                          */
    uint8_t EXT:1; /*!< bit:      4  External Reset                     */
    uint8_t WDT:1; /*!< bit:      5  Watchdog Reset                     */
    uint8_t SYST:1; /*!< bit:      6  System Reset Request               */
    uint8_t BACKUP:1; /*!< bit:      7  Backup Reset                       */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} RSTC_RCAUSE_Type;
# 78 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rstc.h"
/* -------- RSTC_BKUPEXIT : (RSTC Offset: 0x02) (R/   8) Backup Exit Source -------- */

typedef union {
  struct {
    uint8_t EXTWAKE:1; /*!< bit:      0  External Wakeup                    */
    uint8_t RTC:1; /*!< bit:      1  Real Timer Counter Interrupt       */
    uint8_t BBPS:1; /*!< bit:      2  Battery Backup Power Switch        */
    uint8_t :4; /*!< bit:  3.. 6  Reserved                           */
    uint8_t HIB:1; /*!< bit:      7  Hibernate                          */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} RSTC_BKUPEXIT_Type;
# 105 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rstc.h"
/** \brief RSTC hardware registers */

typedef struct {
  volatile /*!< Defines 'read only' permissions */ RSTC_RCAUSE_Type RCAUSE; /**< \brief Offset: 0x00 (R/   8) Reset Cause */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read only' permissions */ RSTC_BKUPEXIT_Type BKUPEXIT; /**< \brief Offset: 0x02 (R/   8) Backup Exit Source */
} Rstc;


/*@}*/
# 603 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h" 1
/**
 * \file
 *
 * \brief Component description for RTC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR RTC */
/* ========================================================================== */
/** \addtogroup SAMD51_RTC Real-Time Counter */
/*@{*/




/* -------- RTC_MODE0_CTRLA : (RTC Offset: 0x00) (R/W 16) MODE0 MODE0 Control A -------- */

typedef union {
  struct {
    uint16_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint16_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint16_t MODE:2; /*!< bit:  2.. 3  Operating Mode                     */
    uint16_t :3; /*!< bit:  4.. 6  Reserved                           */
    uint16_t MATCHCLR:1; /*!< bit:      7  Clear on Match                     */
    uint16_t PRESCALER:4; /*!< bit:  8..11  Prescaler                          */
    uint16_t :1; /*!< bit:     12  Reserved                           */
    uint16_t BKTRST:1; /*!< bit:     13  BKUP Registers Reset On Tamper Enable */
    uint16_t GPTRST:1; /*!< bit:     14  GP Registers Reset On Tamper Enable */
    uint16_t COUNTSYNC:1; /*!< bit:     15  Count Read Synchronization Enable  */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE0_CTRLA_Type;
# 113 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE1_CTRLA : (RTC Offset: 0x00) (R/W 16) MODE1 MODE1 Control A -------- */

typedef union {
  struct {
    uint16_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint16_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint16_t MODE:2; /*!< bit:  2.. 3  Operating Mode                     */
    uint16_t :4; /*!< bit:  4.. 7  Reserved                           */
    uint16_t PRESCALER:4; /*!< bit:  8..11  Prescaler                          */
    uint16_t :1; /*!< bit:     12  Reserved                           */
    uint16_t BKTRST:1; /*!< bit:     13  BKUP Registers Reset On Tamper Enable */
    uint16_t GPTRST:1; /*!< bit:     14  GP Registers Reset On Tamper Enable */
    uint16_t COUNTSYNC:1; /*!< bit:     15  Count Read Synchronization Enable  */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE1_CTRLA_Type;
# 182 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE2_CTRLA : (RTC Offset: 0x00) (R/W 16) MODE2 MODE2 Control A -------- */

typedef union {
  struct {
    uint16_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint16_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint16_t MODE:2; /*!< bit:  2.. 3  Operating Mode                     */
    uint16_t :2; /*!< bit:  4.. 5  Reserved                           */
    uint16_t CLKREP:1; /*!< bit:      6  Clock Representation               */
    uint16_t MATCHCLR:1; /*!< bit:      7  Clear on Match                     */
    uint16_t PRESCALER:4; /*!< bit:  8..11  Prescaler                          */
    uint16_t :1; /*!< bit:     12  Reserved                           */
    uint16_t BKTRST:1; /*!< bit:     13  BKUP Registers Reset On Tamper Enable */
    uint16_t GPTRST:1; /*!< bit:     14  GP Registers Reset On Tamper Enable */
    uint16_t CLOCKSYNC:1; /*!< bit:     15  Clock Read Synchronization Enable  */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE2_CTRLA_Type;
# 257 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE0_CTRLB : (RTC Offset: 0x02) (R/W 16) MODE0 MODE0 Control B -------- */

typedef union {
  struct {
    uint16_t GP0EN:1; /*!< bit:      0  General Purpose 0 Enable           */
    uint16_t GP2EN:1; /*!< bit:      1  General Purpose 2 Enable           */
    uint16_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint16_t DEBMAJ:1; /*!< bit:      4  Debouncer Majority Enable          */
    uint16_t DEBASYNC:1; /*!< bit:      5  Debouncer Asynchronous Enable      */
    uint16_t RTCOUT:1; /*!< bit:      6  RTC Output Enable                  */
    uint16_t DMAEN:1; /*!< bit:      7  DMA Enable                         */
    uint16_t DEBF:3; /*!< bit:  8..10  Debounce Freqnuency                */
    uint16_t :1; /*!< bit:     11  Reserved                           */
    uint16_t ACTF:3; /*!< bit: 12..14  Active Layer Freqnuency            */
    uint16_t :1; /*!< bit:     15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE0_CTRLB_Type;
# 332 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE1_CTRLB : (RTC Offset: 0x02) (R/W 16) MODE1 MODE1 Control B -------- */

typedef union {
  struct {
    uint16_t GP0EN:1; /*!< bit:      0  General Purpose 0 Enable           */
    uint16_t GP2EN:1; /*!< bit:      1  General Purpose 2 Enable           */
    uint16_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint16_t DEBMAJ:1; /*!< bit:      4  Debouncer Majority Enable          */
    uint16_t DEBASYNC:1; /*!< bit:      5  Debouncer Asynchronous Enable      */
    uint16_t RTCOUT:1; /*!< bit:      6  RTC Output Enable                  */
    uint16_t DMAEN:1; /*!< bit:      7  DMA Enable                         */
    uint16_t DEBF:3; /*!< bit:  8..10  Debounce Freqnuency                */
    uint16_t :1; /*!< bit:     11  Reserved                           */
    uint16_t ACTF:3; /*!< bit: 12..14  Active Layer Freqnuency            */
    uint16_t :1; /*!< bit:     15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE1_CTRLB_Type;
# 407 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE2_CTRLB : (RTC Offset: 0x02) (R/W 16) MODE2 MODE2 Control B -------- */

typedef union {
  struct {
    uint16_t GP0EN:1; /*!< bit:      0  General Purpose 0 Enable           */
    uint16_t GP2EN:1; /*!< bit:      1  General Purpose 2 Enable           */
    uint16_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint16_t DEBMAJ:1; /*!< bit:      4  Debouncer Majority Enable          */
    uint16_t DEBASYNC:1; /*!< bit:      5  Debouncer Asynchronous Enable      */
    uint16_t RTCOUT:1; /*!< bit:      6  RTC Output Enable                  */
    uint16_t DMAEN:1; /*!< bit:      7  DMA Enable                         */
    uint16_t DEBF:3; /*!< bit:  8..10  Debounce Freqnuency                */
    uint16_t :1; /*!< bit:     11  Reserved                           */
    uint16_t ACTF:3; /*!< bit: 12..14  Active Layer Freqnuency            */
    uint16_t :1; /*!< bit:     15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE2_CTRLB_Type;
# 482 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE0_EVCTRL : (RTC Offset: 0x04) (R/W 32) MODE0 MODE0 Event Control -------- */

typedef union {
  struct {
    uint32_t PEREO0:1; /*!< bit:      0  Periodic Interval 0 Event Output Enable */
    uint32_t PEREO1:1; /*!< bit:      1  Periodic Interval 1 Event Output Enable */
    uint32_t PEREO2:1; /*!< bit:      2  Periodic Interval 2 Event Output Enable */
    uint32_t PEREO3:1; /*!< bit:      3  Periodic Interval 3 Event Output Enable */
    uint32_t PEREO4:1; /*!< bit:      4  Periodic Interval 4 Event Output Enable */
    uint32_t PEREO5:1; /*!< bit:      5  Periodic Interval 5 Event Output Enable */
    uint32_t PEREO6:1; /*!< bit:      6  Periodic Interval 6 Event Output Enable */
    uint32_t PEREO7:1; /*!< bit:      7  Periodic Interval 7 Event Output Enable */
    uint32_t CMPEO0:1; /*!< bit:      8  Compare 0 Event Output Enable      */
    uint32_t CMPEO1:1; /*!< bit:      9  Compare 1 Event Output Enable      */
    uint32_t :4; /*!< bit: 10..13  Reserved                           */
    uint32_t TAMPEREO:1; /*!< bit:     14  Tamper Event Output Enable         */
    uint32_t OVFEO:1; /*!< bit:     15  Overflow Event Output Enable       */
    uint32_t TAMPEVEI:1; /*!< bit:     16  Tamper Event Input Enable          */
    uint32_t :15; /*!< bit: 17..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t PEREO:8; /*!< bit:  0.. 7  Periodic Interval x Event Output Enable */
    uint32_t CMPEO:2; /*!< bit:  8.. 9  Compare x Event Output Enable      */
    uint32_t :22; /*!< bit: 10..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE0_EVCTRL_Type;
# 548 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE1_EVCTRL : (RTC Offset: 0x04) (R/W 32) MODE1 MODE1 Event Control -------- */

typedef union {
  struct {
    uint32_t PEREO0:1; /*!< bit:      0  Periodic Interval 0 Event Output Enable */
    uint32_t PEREO1:1; /*!< bit:      1  Periodic Interval 1 Event Output Enable */
    uint32_t PEREO2:1; /*!< bit:      2  Periodic Interval 2 Event Output Enable */
    uint32_t PEREO3:1; /*!< bit:      3  Periodic Interval 3 Event Output Enable */
    uint32_t PEREO4:1; /*!< bit:      4  Periodic Interval 4 Event Output Enable */
    uint32_t PEREO5:1; /*!< bit:      5  Periodic Interval 5 Event Output Enable */
    uint32_t PEREO6:1; /*!< bit:      6  Periodic Interval 6 Event Output Enable */
    uint32_t PEREO7:1; /*!< bit:      7  Periodic Interval 7 Event Output Enable */
    uint32_t CMPEO0:1; /*!< bit:      8  Compare 0 Event Output Enable      */
    uint32_t CMPEO1:1; /*!< bit:      9  Compare 1 Event Output Enable      */
    uint32_t CMPEO2:1; /*!< bit:     10  Compare 2 Event Output Enable      */
    uint32_t CMPEO3:1; /*!< bit:     11  Compare 3 Event Output Enable      */
    uint32_t :2; /*!< bit: 12..13  Reserved                           */
    uint32_t TAMPEREO:1; /*!< bit:     14  Tamper Event Output Enable         */
    uint32_t OVFEO:1; /*!< bit:     15  Overflow Event Output Enable       */
    uint32_t TAMPEVEI:1; /*!< bit:     16  Tamper Event Input Enable          */
    uint32_t :15; /*!< bit: 17..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t PEREO:8; /*!< bit:  0.. 7  Periodic Interval x Event Output Enable */
    uint32_t CMPEO:4; /*!< bit:  8..11  Compare x Event Output Enable      */
    uint32_t :20; /*!< bit: 12..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE1_EVCTRL_Type;
# 620 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE2_EVCTRL : (RTC Offset: 0x04) (R/W 32) MODE2 MODE2 Event Control -------- */

typedef union {
  struct {
    uint32_t PEREO0:1; /*!< bit:      0  Periodic Interval 0 Event Output Enable */
    uint32_t PEREO1:1; /*!< bit:      1  Periodic Interval 1 Event Output Enable */
    uint32_t PEREO2:1; /*!< bit:      2  Periodic Interval 2 Event Output Enable */
    uint32_t PEREO3:1; /*!< bit:      3  Periodic Interval 3 Event Output Enable */
    uint32_t PEREO4:1; /*!< bit:      4  Periodic Interval 4 Event Output Enable */
    uint32_t PEREO5:1; /*!< bit:      5  Periodic Interval 5 Event Output Enable */
    uint32_t PEREO6:1; /*!< bit:      6  Periodic Interval 6 Event Output Enable */
    uint32_t PEREO7:1; /*!< bit:      7  Periodic Interval 7 Event Output Enable */
    uint32_t ALARMEO0:1; /*!< bit:      8  Alarm 0 Event Output Enable        */
    uint32_t ALARMEO1:1; /*!< bit:      9  Alarm 1 Event Output Enable        */
    uint32_t :4; /*!< bit: 10..13  Reserved                           */
    uint32_t TAMPEREO:1; /*!< bit:     14  Tamper Event Output Enable         */
    uint32_t OVFEO:1; /*!< bit:     15  Overflow Event Output Enable       */
    uint32_t TAMPEVEI:1; /*!< bit:     16  Tamper Event Input Enable          */
    uint32_t :15; /*!< bit: 17..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t PEREO:8; /*!< bit:  0.. 7  Periodic Interval x Event Output Enable */
    uint32_t ALARMEO:2; /*!< bit:  8.. 9  Alarm x Event Output Enable        */
    uint32_t :22; /*!< bit: 10..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE2_EVCTRL_Type;
# 686 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE0_INTENCLR : (RTC Offset: 0x08) (R/W 16) MODE0 MODE0 Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint16_t PER0:1; /*!< bit:      0  Periodic Interval 0 Interrupt Enable */
    uint16_t PER1:1; /*!< bit:      1  Periodic Interval 1 Interrupt Enable */
    uint16_t PER2:1; /*!< bit:      2  Periodic Interval 2 Interrupt Enable */
    uint16_t PER3:1; /*!< bit:      3  Periodic Interval 3 Interrupt Enable */
    uint16_t PER4:1; /*!< bit:      4  Periodic Interval 4 Interrupt Enable */
    uint16_t PER5:1; /*!< bit:      5  Periodic Interval 5 Interrupt Enable */
    uint16_t PER6:1; /*!< bit:      6  Periodic Interval 6 Interrupt Enable */
    uint16_t PER7:1; /*!< bit:      7  Periodic Interval 7 Interrupt Enable */
    uint16_t CMP0:1; /*!< bit:      8  Compare 0 Interrupt Enable         */
    uint16_t CMP1:1; /*!< bit:      9  Compare 1 Interrupt Enable         */
    uint16_t :4; /*!< bit: 10..13  Reserved                           */
    uint16_t TAMPER:1; /*!< bit:     14  Tamper Enable                      */
    uint16_t OVF:1; /*!< bit:     15  Overflow Interrupt Enable          */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t PER:8; /*!< bit:  0.. 7  Periodic Interval x Interrupt Enable */
    uint16_t CMP:2; /*!< bit:  8.. 9  Compare x Interrupt Enable         */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE0_INTENCLR_Type;
# 748 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE1_INTENCLR : (RTC Offset: 0x08) (R/W 16) MODE1 MODE1 Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint16_t PER0:1; /*!< bit:      0  Periodic Interval 0 Interrupt Enable */
    uint16_t PER1:1; /*!< bit:      1  Periodic Interval 1 Interrupt Enable */
    uint16_t PER2:1; /*!< bit:      2  Periodic Interval 2 Interrupt Enable */
    uint16_t PER3:1; /*!< bit:      3  Periodic Interval 3 Interrupt Enable */
    uint16_t PER4:1; /*!< bit:      4  Periodic Interval 4 Interrupt Enable */
    uint16_t PER5:1; /*!< bit:      5  Periodic Interval 5 Interrupt Enable */
    uint16_t PER6:1; /*!< bit:      6  Periodic Interval 6 Interrupt Enable */
    uint16_t PER7:1; /*!< bit:      7  Periodic Interval 7 Interrupt Enable */
    uint16_t CMP0:1; /*!< bit:      8  Compare 0 Interrupt Enable         */
    uint16_t CMP1:1; /*!< bit:      9  Compare 1 Interrupt Enable         */
    uint16_t CMP2:1; /*!< bit:     10  Compare 2 Interrupt Enable         */
    uint16_t CMP3:1; /*!< bit:     11  Compare 3 Interrupt Enable         */
    uint16_t :2; /*!< bit: 12..13  Reserved                           */
    uint16_t TAMPER:1; /*!< bit:     14  Tamper Enable                      */
    uint16_t OVF:1; /*!< bit:     15  Overflow Interrupt Enable          */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t PER:8; /*!< bit:  0.. 7  Periodic Interval x Interrupt Enable */
    uint16_t CMP:4; /*!< bit:  8..11  Compare x Interrupt Enable         */
    uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE1_INTENCLR_Type;
# 816 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE2_INTENCLR : (RTC Offset: 0x08) (R/W 16) MODE2 MODE2 Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint16_t PER0:1; /*!< bit:      0  Periodic Interval 0 Interrupt Enable */
    uint16_t PER1:1; /*!< bit:      1  Periodic Interval 1 Interrupt Enable */
    uint16_t PER2:1; /*!< bit:      2  Periodic Interval 2 Interrupt Enable */
    uint16_t PER3:1; /*!< bit:      3  Periodic Interval 3 Interrupt Enable */
    uint16_t PER4:1; /*!< bit:      4  Periodic Interval 4 Interrupt Enable */
    uint16_t PER5:1; /*!< bit:      5  Periodic Interval 5 Interrupt Enable */
    uint16_t PER6:1; /*!< bit:      6  Periodic Interval 6 Interrupt Enable */
    uint16_t PER7:1; /*!< bit:      7  Periodic Interval 7 Interrupt Enable */
    uint16_t ALARM0:1; /*!< bit:      8  Alarm 0 Interrupt Enable           */
    uint16_t ALARM1:1; /*!< bit:      9  Alarm 1 Interrupt Enable           */
    uint16_t :4; /*!< bit: 10..13  Reserved                           */
    uint16_t TAMPER:1; /*!< bit:     14  Tamper Enable                      */
    uint16_t OVF:1; /*!< bit:     15  Overflow Interrupt Enable          */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t PER:8; /*!< bit:  0.. 7  Periodic Interval x Interrupt Enable */
    uint16_t ALARM:2; /*!< bit:  8.. 9  Alarm x Interrupt Enable           */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE2_INTENCLR_Type;
# 878 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE0_INTENSET : (RTC Offset: 0x0A) (R/W 16) MODE0 MODE0 Interrupt Enable Set -------- */

typedef union {
  struct {
    uint16_t PER0:1; /*!< bit:      0  Periodic Interval 0 Interrupt Enable */
    uint16_t PER1:1; /*!< bit:      1  Periodic Interval 1 Interrupt Enable */
    uint16_t PER2:1; /*!< bit:      2  Periodic Interval 2 Interrupt Enable */
    uint16_t PER3:1; /*!< bit:      3  Periodic Interval 3 Interrupt Enable */
    uint16_t PER4:1; /*!< bit:      4  Periodic Interval 4 Interrupt Enable */
    uint16_t PER5:1; /*!< bit:      5  Periodic Interval 5 Interrupt Enable */
    uint16_t PER6:1; /*!< bit:      6  Periodic Interval 6 Interrupt Enable */
    uint16_t PER7:1; /*!< bit:      7  Periodic Interval 7 Interrupt Enable */
    uint16_t CMP0:1; /*!< bit:      8  Compare 0 Interrupt Enable         */
    uint16_t CMP1:1; /*!< bit:      9  Compare 1 Interrupt Enable         */
    uint16_t :4; /*!< bit: 10..13  Reserved                           */
    uint16_t TAMPER:1; /*!< bit:     14  Tamper Enable                      */
    uint16_t OVF:1; /*!< bit:     15  Overflow Interrupt Enable          */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t PER:8; /*!< bit:  0.. 7  Periodic Interval x Interrupt Enable */
    uint16_t CMP:2; /*!< bit:  8.. 9  Compare x Interrupt Enable         */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE0_INTENSET_Type;
# 940 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE1_INTENSET : (RTC Offset: 0x0A) (R/W 16) MODE1 MODE1 Interrupt Enable Set -------- */

typedef union {
  struct {
    uint16_t PER0:1; /*!< bit:      0  Periodic Interval 0 Interrupt Enable */
    uint16_t PER1:1; /*!< bit:      1  Periodic Interval 1 Interrupt Enable */
    uint16_t PER2:1; /*!< bit:      2  Periodic Interval 2 Interrupt Enable */
    uint16_t PER3:1; /*!< bit:      3  Periodic Interval 3 Interrupt Enable */
    uint16_t PER4:1; /*!< bit:      4  Periodic Interval 4 Interrupt Enable */
    uint16_t PER5:1; /*!< bit:      5  Periodic Interval 5 Interrupt Enable */
    uint16_t PER6:1; /*!< bit:      6  Periodic Interval 6 Interrupt Enable */
    uint16_t PER7:1; /*!< bit:      7  Periodic Interval 7 Interrupt Enable */
    uint16_t CMP0:1; /*!< bit:      8  Compare 0 Interrupt Enable         */
    uint16_t CMP1:1; /*!< bit:      9  Compare 1 Interrupt Enable         */
    uint16_t CMP2:1; /*!< bit:     10  Compare 2 Interrupt Enable         */
    uint16_t CMP3:1; /*!< bit:     11  Compare 3 Interrupt Enable         */
    uint16_t :2; /*!< bit: 12..13  Reserved                           */
    uint16_t TAMPER:1; /*!< bit:     14  Tamper Enable                      */
    uint16_t OVF:1; /*!< bit:     15  Overflow Interrupt Enable          */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t PER:8; /*!< bit:  0.. 7  Periodic Interval x Interrupt Enable */
    uint16_t CMP:4; /*!< bit:  8..11  Compare x Interrupt Enable         */
    uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE1_INTENSET_Type;
# 1008 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE2_INTENSET : (RTC Offset: 0x0A) (R/W 16) MODE2 MODE2 Interrupt Enable Set -------- */

typedef union {
  struct {
    uint16_t PER0:1; /*!< bit:      0  Periodic Interval 0 Enable         */
    uint16_t PER1:1; /*!< bit:      1  Periodic Interval 1 Enable         */
    uint16_t PER2:1; /*!< bit:      2  Periodic Interval 2 Enable         */
    uint16_t PER3:1; /*!< bit:      3  Periodic Interval 3 Enable         */
    uint16_t PER4:1; /*!< bit:      4  Periodic Interval 4 Enable         */
    uint16_t PER5:1; /*!< bit:      5  Periodic Interval 5 Enable         */
    uint16_t PER6:1; /*!< bit:      6  Periodic Interval 6 Enable         */
    uint16_t PER7:1; /*!< bit:      7  Periodic Interval 7 Enable         */
    uint16_t ALARM0:1; /*!< bit:      8  Alarm 0 Interrupt Enable           */
    uint16_t ALARM1:1; /*!< bit:      9  Alarm 1 Interrupt Enable           */
    uint16_t :4; /*!< bit: 10..13  Reserved                           */
    uint16_t TAMPER:1; /*!< bit:     14  Tamper Enable                      */
    uint16_t OVF:1; /*!< bit:     15  Overflow Interrupt Enable          */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t PER:8; /*!< bit:  0.. 7  Periodic Interval x Enable         */
    uint16_t ALARM:2; /*!< bit:  8.. 9  Alarm x Interrupt Enable           */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE2_INTENSET_Type;
# 1070 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE0_INTFLAG : (RTC Offset: 0x0C) (R/W 16) MODE0 MODE0 Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint16_t PER0:1; /*!< bit:      0  Periodic Interval 0                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER1:1; /*!< bit:      1  Periodic Interval 1                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER2:1; /*!< bit:      2  Periodic Interval 2                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER3:1; /*!< bit:      3  Periodic Interval 3                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER4:1; /*!< bit:      4  Periodic Interval 4                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER5:1; /*!< bit:      5  Periodic Interval 5                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER6:1; /*!< bit:      6  Periodic Interval 6                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER7:1; /*!< bit:      7  Periodic Interval 7                */
    volatile /*!< Defines 'read only' permissions */ uint16_t CMP0:1; /*!< bit:      8  Compare 0                          */
    volatile /*!< Defines 'read only' permissions */ uint16_t CMP1:1; /*!< bit:      9  Compare 1                          */
    volatile /*!< Defines 'read only' permissions */ uint16_t :4; /*!< bit: 10..13  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint16_t TAMPER:1; /*!< bit:     14  Tamper                             */
    volatile /*!< Defines 'read only' permissions */ uint16_t OVF:1; /*!< bit:     15  Overflow                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint16_t PER:8; /*!< bit:  0.. 7  Periodic Interval x                */
    volatile /*!< Defines 'read only' permissions */ uint16_t CMP:2; /*!< bit:  8.. 9  Compare x                          */
    volatile /*!< Defines 'read only' permissions */ uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE0_INTFLAG_Type;
# 1132 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE1_INTFLAG : (RTC Offset: 0x0C) (R/W 16) MODE1 MODE1 Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint16_t PER0:1; /*!< bit:      0  Periodic Interval 0                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER1:1; /*!< bit:      1  Periodic Interval 1                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER2:1; /*!< bit:      2  Periodic Interval 2                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER3:1; /*!< bit:      3  Periodic Interval 3                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER4:1; /*!< bit:      4  Periodic Interval 4                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER5:1; /*!< bit:      5  Periodic Interval 5                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER6:1; /*!< bit:      6  Periodic Interval 6                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER7:1; /*!< bit:      7  Periodic Interval 7                */
    volatile /*!< Defines 'read only' permissions */ uint16_t CMP0:1; /*!< bit:      8  Compare 0                          */
    volatile /*!< Defines 'read only' permissions */ uint16_t CMP1:1; /*!< bit:      9  Compare 1                          */
    volatile /*!< Defines 'read only' permissions */ uint16_t CMP2:1; /*!< bit:     10  Compare 2                          */
    volatile /*!< Defines 'read only' permissions */ uint16_t CMP3:1; /*!< bit:     11  Compare 3                          */
    volatile /*!< Defines 'read only' permissions */ uint16_t :2; /*!< bit: 12..13  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint16_t TAMPER:1; /*!< bit:     14  Tamper                             */
    volatile /*!< Defines 'read only' permissions */ uint16_t OVF:1; /*!< bit:     15  Overflow                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint16_t PER:8; /*!< bit:  0.. 7  Periodic Interval x                */
    volatile /*!< Defines 'read only' permissions */ uint16_t CMP:4; /*!< bit:  8..11  Compare x                          */
    volatile /*!< Defines 'read only' permissions */ uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE1_INTFLAG_Type;
# 1200 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE2_INTFLAG : (RTC Offset: 0x0C) (R/W 16) MODE2 MODE2 Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint16_t PER0:1; /*!< bit:      0  Periodic Interval 0                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER1:1; /*!< bit:      1  Periodic Interval 1                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER2:1; /*!< bit:      2  Periodic Interval 2                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER3:1; /*!< bit:      3  Periodic Interval 3                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER4:1; /*!< bit:      4  Periodic Interval 4                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER5:1; /*!< bit:      5  Periodic Interval 5                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER6:1; /*!< bit:      6  Periodic Interval 6                */
    volatile /*!< Defines 'read only' permissions */ uint16_t PER7:1; /*!< bit:      7  Periodic Interval 7                */
    volatile /*!< Defines 'read only' permissions */ uint16_t ALARM0:1; /*!< bit:      8  Alarm 0                            */
    volatile /*!< Defines 'read only' permissions */ uint16_t ALARM1:1; /*!< bit:      9  Alarm 1                            */
    volatile /*!< Defines 'read only' permissions */ uint16_t :4; /*!< bit: 10..13  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint16_t TAMPER:1; /*!< bit:     14  Tamper                             */
    volatile /*!< Defines 'read only' permissions */ uint16_t OVF:1; /*!< bit:     15  Overflow                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint16_t PER:8; /*!< bit:  0.. 7  Periodic Interval x                */
    volatile /*!< Defines 'read only' permissions */ uint16_t ALARM:2; /*!< bit:  8.. 9  Alarm x                            */
    volatile /*!< Defines 'read only' permissions */ uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE2_INTFLAG_Type;
# 1262 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_DBGCTRL : (RTC Offset: 0x0E) (R/W  8) Debug Control -------- */

typedef union {
  struct {
    uint8_t DBGRUN:1; /*!< bit:      0  Run During Debug                   */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} RTC_DBGCTRL_Type;
# 1280 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE0_SYNCBUSY : (RTC Offset: 0x10) (R/  32) MODE0 MODE0 Synchronization Busy Status -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset Busy                */
    uint32_t ENABLE:1; /*!< bit:      1  Enable Bit Busy                    */
    uint32_t FREQCORR:1; /*!< bit:      2  FREQCORR Register Busy             */
    uint32_t COUNT:1; /*!< bit:      3  COUNT Register Busy                */
    uint32_t :1; /*!< bit:      4  Reserved                           */
    uint32_t COMP0:1; /*!< bit:      5  COMP 0 Register Busy               */
    uint32_t COMP1:1; /*!< bit:      6  COMP 1 Register Busy               */
    uint32_t :8; /*!< bit:  7..14  Reserved                           */
    uint32_t COUNTSYNC:1; /*!< bit:     15  Count Synchronization Enable Bit Busy */
    uint32_t GP0:1; /*!< bit:     16  General Purpose 0 Register Busy    */
    uint32_t GP1:1; /*!< bit:     17  General Purpose 1 Register Busy    */
    uint32_t GP2:1; /*!< bit:     18  General Purpose 2 Register Busy    */
    uint32_t GP3:1; /*!< bit:     19  General Purpose 3 Register Busy    */
    uint32_t :12; /*!< bit: 20..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :5; /*!< bit:  0.. 4  Reserved                           */
    uint32_t COMP:2; /*!< bit:  5.. 6  COMP x Register Busy               */
    uint32_t :9; /*!< bit:  7..15  Reserved                           */
    uint32_t GP:4; /*!< bit: 16..19  General Purpose x Register Busy    */
    uint32_t :12; /*!< bit: 20..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE0_SYNCBUSY_Type;
# 1343 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE1_SYNCBUSY : (RTC Offset: 0x10) (R/  32) MODE1 MODE1 Synchronization Busy Status -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset Bit Busy            */
    uint32_t ENABLE:1; /*!< bit:      1  Enable Bit Busy                    */
    uint32_t FREQCORR:1; /*!< bit:      2  FREQCORR Register Busy             */
    uint32_t COUNT:1; /*!< bit:      3  COUNT Register Busy                */
    uint32_t PER:1; /*!< bit:      4  PER Register Busy                  */
    uint32_t COMP0:1; /*!< bit:      5  COMP 0 Register Busy               */
    uint32_t COMP1:1; /*!< bit:      6  COMP 1 Register Busy               */
    uint32_t COMP2:1; /*!< bit:      7  COMP 2 Register Busy               */
    uint32_t COMP3:1; /*!< bit:      8  COMP 3 Register Busy               */
    uint32_t :6; /*!< bit:  9..14  Reserved                           */
    uint32_t COUNTSYNC:1; /*!< bit:     15  Count Synchronization Enable Bit Busy */
    uint32_t GP0:1; /*!< bit:     16  General Purpose 0 Register Busy    */
    uint32_t GP1:1; /*!< bit:     17  General Purpose 1 Register Busy    */
    uint32_t GP2:1; /*!< bit:     18  General Purpose 2 Register Busy    */
    uint32_t GP3:1; /*!< bit:     19  General Purpose 3 Register Busy    */
    uint32_t :12; /*!< bit: 20..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :5; /*!< bit:  0.. 4  Reserved                           */
    uint32_t COMP:4; /*!< bit:  5.. 8  COMP x Register Busy               */
    uint32_t :7; /*!< bit:  9..15  Reserved                           */
    uint32_t GP:4; /*!< bit: 16..19  General Purpose x Register Busy    */
    uint32_t :12; /*!< bit: 20..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE1_SYNCBUSY_Type;
# 1414 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE2_SYNCBUSY : (RTC Offset: 0x10) (R/  32) MODE2 MODE2 Synchronization Busy Status -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset Bit Busy            */
    uint32_t ENABLE:1; /*!< bit:      1  Enable Bit Busy                    */
    uint32_t FREQCORR:1; /*!< bit:      2  FREQCORR Register Busy             */
    uint32_t CLOCK:1; /*!< bit:      3  CLOCK Register Busy                */
    uint32_t :1; /*!< bit:      4  Reserved                           */
    uint32_t ALARM0:1; /*!< bit:      5  ALARM 0 Register Busy              */
    uint32_t ALARM1:1; /*!< bit:      6  ALARM 1 Register Busy              */
    uint32_t :4; /*!< bit:  7..10  Reserved                           */
    uint32_t MASK0:1; /*!< bit:     11  MASK 0 Register Busy               */
    uint32_t MASK1:1; /*!< bit:     12  MASK 1 Register Busy               */
    uint32_t :2; /*!< bit: 13..14  Reserved                           */
    uint32_t CLOCKSYNC:1; /*!< bit:     15  Clock Synchronization Enable Bit Busy */
    uint32_t GP0:1; /*!< bit:     16  General Purpose 0 Register Busy    */
    uint32_t GP1:1; /*!< bit:     17  General Purpose 1 Register Busy    */
    uint32_t GP2:1; /*!< bit:     18  General Purpose 2 Register Busy    */
    uint32_t GP3:1; /*!< bit:     19  General Purpose 3 Register Busy    */
    uint32_t :12; /*!< bit: 20..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :5; /*!< bit:  0.. 4  Reserved                           */
    uint32_t ALARM:2; /*!< bit:  5.. 6  ALARM x Register Busy              */
    uint32_t :4; /*!< bit:  7..10  Reserved                           */
    uint32_t MASK:2; /*!< bit: 11..12  MASK x Register Busy               */
    uint32_t :3; /*!< bit: 13..15  Reserved                           */
    uint32_t GP:4; /*!< bit: 16..19  General Purpose x Register Busy    */
    uint32_t :12; /*!< bit: 20..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE2_SYNCBUSY_Type;
# 1489 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_FREQCORR : (RTC Offset: 0x14) (R/W  8) Frequency Correction -------- */

typedef union {
  struct {
    uint8_t VALUE:7; /*!< bit:  0.. 6  Correction Value                   */
    uint8_t SIGN:1; /*!< bit:      7  Correction Sign                    */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} RTC_FREQCORR_Type;
# 1510 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE0_COUNT : (RTC Offset: 0x18) (R/W 32) MODE0 MODE0 Counter Value -------- */

typedef union {
  struct {
    uint32_t COUNT:32; /*!< bit:  0..31  Counter Value                      */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE0_COUNT_Type;
# 1528 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE1_COUNT : (RTC Offset: 0x18) (R/W 16) MODE1 MODE1 Counter Value -------- */

typedef union {
  struct {
    uint16_t COUNT:16; /*!< bit:  0..15  Counter Value                      */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE1_COUNT_Type;
# 1546 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE2_CLOCK : (RTC Offset: 0x18) (R/W 32) MODE2 MODE2 Clock Value -------- */

typedef union {
  struct {
    uint32_t SECOND:6; /*!< bit:  0.. 5  Second                             */
    uint32_t MINUTE:6; /*!< bit:  6..11  Minute                             */
    uint32_t HOUR:5; /*!< bit: 12..16  Hour                               */
    uint32_t DAY:5; /*!< bit: 17..21  Day                                */
    uint32_t MONTH:4; /*!< bit: 22..25  Month                              */
    uint32_t YEAR:6; /*!< bit: 26..31  Year                               */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE2_CLOCK_Type;
# 1588 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE1_PER : (RTC Offset: 0x1C) (R/W 16) MODE1 MODE1 Counter Period -------- */

typedef union {
  struct {
    uint16_t PER:16; /*!< bit:  0..15  Counter Period                     */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE1_PER_Type;
# 1606 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE0_COMP : (RTC Offset: 0x20) (R/W 32) MODE0 MODE0 Compare n Value -------- */

typedef union {
  struct {
    uint32_t COMP:32; /*!< bit:  0..31  Compare Value                      */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE0_COMP_Type;
# 1624 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE1_COMP : (RTC Offset: 0x20) (R/W 16) MODE1 MODE1 Compare n Value -------- */

typedef union {
  struct {
    uint16_t COMP:16; /*!< bit:  0..15  Compare Value                      */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} RTC_MODE1_COMP_Type;
# 1642 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE2_ALARM : (RTC Offset: 0x20) (R/W 32) MODE2 MODE2_ALARM Alarm n Value -------- */

typedef union {
  struct {
    uint32_t SECOND:6; /*!< bit:  0.. 5  Second                             */
    uint32_t MINUTE:6; /*!< bit:  6..11  Minute                             */
    uint32_t HOUR:5; /*!< bit: 12..16  Hour                               */
    uint32_t DAY:5; /*!< bit: 17..21  Day                                */
    uint32_t MONTH:4; /*!< bit: 22..25  Month                              */
    uint32_t YEAR:6; /*!< bit: 26..31  Year                               */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE2_ALARM_Type;
# 1684 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE2_MASK : (RTC Offset: 0x24) (R/W  8) MODE2 MODE2_ALARM Alarm n Mask -------- */

typedef union {
  struct {
    uint8_t SEL:3; /*!< bit:  0.. 2  Alarm Mask Selection               */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} RTC_MODE2_MASK_Type;
# 1717 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_GP : (RTC Offset: 0x40) (R/W 32) General Purpose -------- */

typedef union {
  struct {
    uint32_t GP:32; /*!< bit:  0..31  General Purpose                    */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_GP_Type;
# 1735 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_TAMPCTRL : (RTC Offset: 0x60) (R/W 32) Tamper Control -------- */

typedef union {
  struct {
    uint32_t IN0ACT:2; /*!< bit:  0.. 1  Tamper Input 0 Action              */
    uint32_t IN1ACT:2; /*!< bit:  2.. 3  Tamper Input 1 Action              */
    uint32_t IN2ACT:2; /*!< bit:  4.. 5  Tamper Input 2 Action              */
    uint32_t IN3ACT:2; /*!< bit:  6.. 7  Tamper Input 3 Action              */
    uint32_t IN4ACT:2; /*!< bit:  8.. 9  Tamper Input 4 Action              */
    uint32_t :6; /*!< bit: 10..15  Reserved                           */
    uint32_t TAMLVL0:1; /*!< bit:     16  Tamper Level Select 0              */
    uint32_t TAMLVL1:1; /*!< bit:     17  Tamper Level Select 1              */
    uint32_t TAMLVL2:1; /*!< bit:     18  Tamper Level Select 2              */
    uint32_t TAMLVL3:1; /*!< bit:     19  Tamper Level Select 3              */
    uint32_t TAMLVL4:1; /*!< bit:     20  Tamper Level Select 4              */
    uint32_t :3; /*!< bit: 21..23  Reserved                           */
    uint32_t DEBNC0:1; /*!< bit:     24  Debouncer Enable 0                 */
    uint32_t DEBNC1:1; /*!< bit:     25  Debouncer Enable 1                 */
    uint32_t DEBNC2:1; /*!< bit:     26  Debouncer Enable 2                 */
    uint32_t DEBNC3:1; /*!< bit:     27  Debouncer Enable 3                 */
    uint32_t DEBNC4:1; /*!< bit:     28  Debouncer Enable 4                 */
    uint32_t :3; /*!< bit: 29..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :16; /*!< bit:  0..15  Reserved                           */
    uint32_t TAMLVL:5; /*!< bit: 16..20  Tamper Level Select x              */
    uint32_t :3; /*!< bit: 21..23  Reserved                           */
    uint32_t DEBNC:5; /*!< bit: 24..28  Debouncer Enable x                 */
    uint32_t :3; /*!< bit: 29..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_TAMPCTRL_Type;
# 1855 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE0_TIMESTAMP : (RTC Offset: 0x64) (R/  32) MODE0 MODE0 Timestamp -------- */

typedef union {
  struct {
    uint32_t COUNT:32; /*!< bit:  0..31  Count Timestamp Value              */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE0_TIMESTAMP_Type;
# 1873 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE1_TIMESTAMP : (RTC Offset: 0x64) (R/  32) MODE1 MODE1 Timestamp -------- */

typedef union {
  struct {
    uint32_t COUNT:16; /*!< bit:  0..15  Count Timestamp Value              */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE1_TIMESTAMP_Type;
# 1892 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_MODE2_TIMESTAMP : (RTC Offset: 0x64) (R/  32) MODE2 MODE2 Timestamp -------- */

typedef union {
  struct {
    uint32_t SECOND:6; /*!< bit:  0.. 5  Second Timestamp Value             */
    uint32_t MINUTE:6; /*!< bit:  6..11  Minute Timestamp Value             */
    uint32_t HOUR:5; /*!< bit: 12..16  Hour Timestamp Value               */
    uint32_t DAY:5; /*!< bit: 17..21  Day Timestamp Value                */
    uint32_t MONTH:4; /*!< bit: 22..25  Month Timestamp Value              */
    uint32_t YEAR:6; /*!< bit: 26..31  Year Timestamp Value               */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_MODE2_TIMESTAMP_Type;
# 1934 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_TAMPID : (RTC Offset: 0x68) (R/W 32) Tamper ID -------- */

typedef union {
  struct {
    uint32_t TAMPID0:1; /*!< bit:      0  Tamper Input 0 Detected            */
    uint32_t TAMPID1:1; /*!< bit:      1  Tamper Input 1 Detected            */
    uint32_t TAMPID2:1; /*!< bit:      2  Tamper Input 2 Detected            */
    uint32_t TAMPID3:1; /*!< bit:      3  Tamper Input 3 Detected            */
    uint32_t TAMPID4:1; /*!< bit:      4  Tamper Input 4 Detected            */
    uint32_t :26; /*!< bit:  5..30  Reserved                           */
    uint32_t TAMPEVT:1; /*!< bit:     31  Tamper Event Detected              */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t TAMPID:5; /*!< bit:  0.. 4  Tamper Input x Detected            */
    uint32_t :27; /*!< bit:  5..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_TAMPID_Type;
# 1974 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/* -------- RTC_BKUP : (RTC Offset: 0x80) (R/W 32) Backup -------- */

typedef union {
  struct {
    uint32_t BKUP:32; /*!< bit:  0..31  Backup                             */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} RTC_BKUP_Type;
# 1992 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/rtc.h"
/** \brief RtcMode2Alarm hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE2_ALARM_Type ALARM; /**< \brief Offset: 0x00 (R/W 32) MODE2_ALARM Alarm n Value */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE2_MASK_Type MASK; /**< \brief Offset: 0x04 (R/W  8) MODE2_ALARM Alarm n Mask */
       RoReg8 Reserved1[0x3];
} RtcMode2Alarm;


/** \brief RTC_MODE0 hardware registers */

typedef struct { /* 32-bit Counter with Single 32-bit Compare */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE0_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 16) MODE0 Control A */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE0_CTRLB_Type CTRLB; /**< \brief Offset: 0x02 (R/W 16) MODE0 Control B */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE0_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x04 (R/W 32) MODE0 Event Control */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE0_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x08 (R/W 16) MODE0 Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE0_INTENSET_Type INTENSET; /**< \brief Offset: 0x0A (R/W 16) MODE0 Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE0_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x0C (R/W 16) MODE0 Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read / write' permissions */ RTC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x0E (R/W  8) Debug Control */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read only' permissions */ RTC_MODE0_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x10 (R/  32) MODE0 Synchronization Busy Status */
  volatile /*!< Defines 'read / write' permissions */ RTC_FREQCORR_Type FREQCORR; /**< \brief Offset: 0x14 (R/W  8) Frequency Correction */
       RoReg8 Reserved2[0x3];
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE0_COUNT_Type COUNT; /**< \brief Offset: 0x18 (R/W 32) MODE0 Counter Value */
       RoReg8 Reserved3[0x4];
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE0_COMP_Type COMP[2]; /**< \brief Offset: 0x20 (R/W 32) MODE0 Compare n Value */
       RoReg8 Reserved4[0x18];
  volatile /*!< Defines 'read / write' permissions */ RTC_GP_Type GP[4]; /**< \brief Offset: 0x40 (R/W 32) General Purpose */
       RoReg8 Reserved5[0x10];
  volatile /*!< Defines 'read / write' permissions */ RTC_TAMPCTRL_Type TAMPCTRL; /**< \brief Offset: 0x60 (R/W 32) Tamper Control */
  volatile /*!< Defines 'read only' permissions */ RTC_MODE0_TIMESTAMP_Type TIMESTAMP; /**< \brief Offset: 0x64 (R/  32) MODE0 Timestamp */
  volatile /*!< Defines 'read / write' permissions */ RTC_TAMPID_Type TAMPID; /**< \brief Offset: 0x68 (R/W 32) Tamper ID */
       RoReg8 Reserved6[0x14];
  volatile /*!< Defines 'read / write' permissions */ RTC_BKUP_Type BKUP[8]; /**< \brief Offset: 0x80 (R/W 32) Backup */
} RtcMode0;


/** \brief RTC_MODE1 hardware registers */

typedef struct { /* 16-bit Counter with Two 16-bit Compares */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE1_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 16) MODE1 Control A */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE1_CTRLB_Type CTRLB; /**< \brief Offset: 0x02 (R/W 16) MODE1 Control B */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE1_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x04 (R/W 32) MODE1 Event Control */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE1_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x08 (R/W 16) MODE1 Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE1_INTENSET_Type INTENSET; /**< \brief Offset: 0x0A (R/W 16) MODE1 Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE1_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x0C (R/W 16) MODE1 Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read / write' permissions */ RTC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x0E (R/W  8) Debug Control */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read only' permissions */ RTC_MODE1_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x10 (R/  32) MODE1 Synchronization Busy Status */
  volatile /*!< Defines 'read / write' permissions */ RTC_FREQCORR_Type FREQCORR; /**< \brief Offset: 0x14 (R/W  8) Frequency Correction */
       RoReg8 Reserved2[0x3];
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE1_COUNT_Type COUNT; /**< \brief Offset: 0x18 (R/W 16) MODE1 Counter Value */
       RoReg8 Reserved3[0x2];
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE1_PER_Type PER; /**< \brief Offset: 0x1C (R/W 16) MODE1 Counter Period */
       RoReg8 Reserved4[0x2];
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE1_COMP_Type COMP[4]; /**< \brief Offset: 0x20 (R/W 16) MODE1 Compare n Value */
       RoReg8 Reserved5[0x18];
  volatile /*!< Defines 'read / write' permissions */ RTC_GP_Type GP[4]; /**< \brief Offset: 0x40 (R/W 32) General Purpose */
       RoReg8 Reserved6[0x10];
  volatile /*!< Defines 'read / write' permissions */ RTC_TAMPCTRL_Type TAMPCTRL; /**< \brief Offset: 0x60 (R/W 32) Tamper Control */
  volatile /*!< Defines 'read only' permissions */ RTC_MODE1_TIMESTAMP_Type TIMESTAMP; /**< \brief Offset: 0x64 (R/  32) MODE1 Timestamp */
  volatile /*!< Defines 'read / write' permissions */ RTC_TAMPID_Type TAMPID; /**< \brief Offset: 0x68 (R/W 32) Tamper ID */
       RoReg8 Reserved7[0x14];
  volatile /*!< Defines 'read / write' permissions */ RTC_BKUP_Type BKUP[8]; /**< \brief Offset: 0x80 (R/W 32) Backup */
} RtcMode1;


/** \brief RTC_MODE2 hardware registers */

typedef struct { /* Clock/Calendar with Alarm */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE2_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 16) MODE2 Control A */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE2_CTRLB_Type CTRLB; /**< \brief Offset: 0x02 (R/W 16) MODE2 Control B */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE2_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x04 (R/W 32) MODE2 Event Control */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE2_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x08 (R/W 16) MODE2 Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE2_INTENSET_Type INTENSET; /**< \brief Offset: 0x0A (R/W 16) MODE2 Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE2_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x0C (R/W 16) MODE2 Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read / write' permissions */ RTC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x0E (R/W  8) Debug Control */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read only' permissions */ RTC_MODE2_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x10 (R/  32) MODE2 Synchronization Busy Status */
  volatile /*!< Defines 'read / write' permissions */ RTC_FREQCORR_Type FREQCORR; /**< \brief Offset: 0x14 (R/W  8) Frequency Correction */
       RoReg8 Reserved2[0x3];
  volatile /*!< Defines 'read / write' permissions */ RTC_MODE2_CLOCK_Type CLOCK; /**< \brief Offset: 0x18 (R/W 32) MODE2 Clock Value */
       RoReg8 Reserved3[0x4];
       RtcMode2Alarm Mode2Alarm[2]; /**< \brief Offset: 0x20 RtcMode2Alarm groups [NUM_OF_ALARMS] */
       RoReg8 Reserved4[0x10];
  volatile /*!< Defines 'read / write' permissions */ RTC_GP_Type GP[4]; /**< \brief Offset: 0x40 (R/W 32) General Purpose */
       RoReg8 Reserved5[0x10];
  volatile /*!< Defines 'read / write' permissions */ RTC_TAMPCTRL_Type TAMPCTRL; /**< \brief Offset: 0x60 (R/W 32) Tamper Control */
  volatile /*!< Defines 'read only' permissions */ RTC_MODE2_TIMESTAMP_Type TIMESTAMP; /**< \brief Offset: 0x64 (R/  32) MODE2 Timestamp */
  volatile /*!< Defines 'read / write' permissions */ RTC_TAMPID_Type TAMPID; /**< \brief Offset: 0x68 (R/W 32) Tamper ID */
       RoReg8 Reserved6[0x14];
  volatile /*!< Defines 'read / write' permissions */ RTC_BKUP_Type BKUP[8]; /**< \brief Offset: 0x80 (R/W 32) Backup */
} RtcMode2;



typedef union {
       RtcMode0 MODE0; /**< \brief Offset: 0x00 32-bit Counter with Single 32-bit Compare */
       RtcMode1 MODE1; /**< \brief Offset: 0x00 16-bit Counter with Two 16-bit Compares */
       RtcMode2 MODE2; /**< \brief Offset: 0x00 Clock/Calendar with Alarm */
} Rtc;


/*@}*/
# 604 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h" 1
/**
 * \file
 *
 * \brief Component description for SDHC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR SDHC */
/* ========================================================================== */
/** \addtogroup SAMD51_SDHC SD/MMC Host Controller */
/*@{*/




/* -------- SDHC_SSAR : (SDHC Offset: 0x000) (R/W 32) SDMA System Address / Argument 2 -------- */

typedef union {
  struct { // CMD23 mode
    uint32_t ARG2:32; /*!< bit:  0..31  Argument 2                         */
  } CMD23; /*!< Structure used for CMD23                        */
  struct {
    uint32_t ADDR:32; /*!< bit:  0..31  SDMA System Address                */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SDHC_SSAR_Type;





// CMD23 mode
# 68 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_BSR : (SDHC Offset: 0x004) (R/W 16) Block Size -------- */

typedef union {
  struct {
    uint16_t BLOCKSIZE:10; /*!< bit:  0.. 9  Transfer Block Size                */
    uint16_t :2; /*!< bit: 10..11  Reserved                           */
    uint16_t BOUNDARY:3; /*!< bit: 12..14  SDMA Buffer Boundary               */
    uint16_t :1; /*!< bit:     15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_BSR_Type;
# 108 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_BCR : (SDHC Offset: 0x006) (R/W 16) Block Count -------- */

typedef union {
  struct {
    uint16_t BCNT:16; /*!< bit:  0..15  Blocks Count for Current Transfer  */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_BCR_Type;
# 126 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_ARG1R : (SDHC Offset: 0x008) (R/W 32) Argument 1 -------- */

typedef union {
  struct {
    uint32_t ARG:32; /*!< bit:  0..31  Argument 1                         */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SDHC_ARG1R_Type;
# 144 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_TMR : (SDHC Offset: 0x00C) (R/W 16) Transfer Mode -------- */

typedef union {
  struct {
    uint16_t DMAEN:1; /*!< bit:      0  DMA Enable                         */
    uint16_t BCEN:1; /*!< bit:      1  Block Count Enable                 */
    uint16_t ACMDEN:2; /*!< bit:  2.. 3  Auto Command Enable                */
    uint16_t DTDSEL:1; /*!< bit:      4  Data Transfer Direction Selection  */
    uint16_t MSBSEL:1; /*!< bit:      5  Multi/Single Block Selection       */
    uint16_t :10; /*!< bit:  6..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_TMR_Type;
# 199 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_CR : (SDHC Offset: 0x00E) (R/W 16) Command -------- */

typedef union {
  struct {
    uint16_t RESPTYP:2; /*!< bit:  0.. 1  Response Type                      */
    uint16_t :1; /*!< bit:      2  Reserved                           */
    uint16_t CMDCCEN:1; /*!< bit:      3  Command CRC Check Enable           */
    uint16_t CMDICEN:1; /*!< bit:      4  Command Index Check Enable         */
    uint16_t DPSEL:1; /*!< bit:      5  Data Present Select                */
    uint16_t CMDTYP:2; /*!< bit:  6.. 7  Command Type                       */
    uint16_t CMDIDX:6; /*!< bit:  8..13  Command Index                      */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_CR_Type;
# 264 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_RR : (SDHC Offset: 0x010) (R/  32) Response -------- */

typedef union {
  struct {
    uint32_t CMDRESP:32; /*!< bit:  0..31  Command Response                   */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SDHC_RR_Type;
# 282 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_BDPR : (SDHC Offset: 0x020) (R/W 32) Buffer Data Port -------- */

typedef union {
  struct {
    uint32_t BUFDATA:32; /*!< bit:  0..31  Buffer Data                        */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SDHC_BDPR_Type;
# 300 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_PSR : (SDHC Offset: 0x024) (R/  32) Present State -------- */

typedef union {
  struct {
    uint32_t CMDINHC:1; /*!< bit:      0  Command Inhibit (CMD)              */
    uint32_t CMDINHD:1; /*!< bit:      1  Command Inhibit (DAT)              */
    uint32_t DLACT:1; /*!< bit:      2  DAT Line Active                    */
    uint32_t RTREQ:1; /*!< bit:      3  Re-Tuning Request                  */
    uint32_t :4; /*!< bit:  4.. 7  Reserved                           */
    uint32_t WTACT:1; /*!< bit:      8  Write Transfer Active              */
    uint32_t RTACT:1; /*!< bit:      9  Read Transfer Active               */
    uint32_t BUFWREN:1; /*!< bit:     10  Buffer Write Enable                */
    uint32_t BUFRDEN:1; /*!< bit:     11  Buffer Read Enable                 */
    uint32_t :4; /*!< bit: 12..15  Reserved                           */
    uint32_t CARDINS:1; /*!< bit:     16  Card Inserted                      */
    uint32_t CARDSS:1; /*!< bit:     17  Card State Stable                  */
    uint32_t CARDDPL:1; /*!< bit:     18  Card Detect Pin Level              */
    uint32_t WRPPL:1; /*!< bit:     19  Write Protect Pin Level            */
    uint32_t DATLL:4; /*!< bit: 20..23  DAT[3:0] Line Level                */
    uint32_t CMDLL:1; /*!< bit:     24  CMD Line Level                     */
    uint32_t :7; /*!< bit: 25..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SDHC_PSR_Type;
# 408 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_HC1R : (SDHC Offset: 0x028) (R/W  8) Host Control 1 -------- */

typedef union {
  struct {
    uint8_t LEDCTRL:1; /*!< bit:      0  LED Control                        */
    uint8_t DW:1; /*!< bit:      1  Data Width                         */
    uint8_t HSEN:1; /*!< bit:      2  High Speed Enable                  */
    uint8_t DMASEL:2; /*!< bit:  3.. 4  DMA Select                         */
    uint8_t :1; /*!< bit:      5  Reserved                           */
    uint8_t CARDDTL:1; /*!< bit:      6  Card Detect Test Level             */
    uint8_t CARDDSEL:1; /*!< bit:      7  Card Detect Signal Selection       */
  } bit; /*!< Structure used for bit  access                  */
  struct { // EMMC mode
    uint8_t :1; /*!< bit:      0  Reserved                           */
    uint8_t DW:1; /*!< bit:      1  Data Width                         */
    uint8_t HSEN:1; /*!< bit:      2  High Speed Enable                  */
    uint8_t DMASEL:2; /*!< bit:  3.. 4  DMA Select                         */
    uint8_t :3; /*!< bit:  5.. 7  Reserved                           */
  } EMMC; /*!< Structure used for EMMC                         */
  uint8_t reg; /*!< Type      used for register access              */
} SDHC_HC1R_Type;
# 475 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
// EMMC mode
# 499 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_PCR : (SDHC Offset: 0x029) (R/W  8) Power Control -------- */

typedef union {
  struct {
    uint8_t SDBPWR:1; /*!< bit:      0  SD Bus Power                       */
    uint8_t SDBVSEL:3; /*!< bit:  1.. 3  SD Bus Voltage Select              */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SDHC_PCR_Type;
# 531 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_BGCR : (SDHC Offset: 0x02A) (R/W  8) Block Gap Control -------- */

typedef union {
  struct {
    uint8_t STPBGR:1; /*!< bit:      0  Stop at Block Gap Request          */
    uint8_t CONTR:1; /*!< bit:      1  Continue Request                   */
    uint8_t RWCTRL:1; /*!< bit:      2  Read Wait Control                  */
    uint8_t INTBG:1; /*!< bit:      3  Interrupt at Block Gap             */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct { // EMMC mode
    uint8_t STPBGR:1; /*!< bit:      0  Stop at Block Gap Request          */
    uint8_t CONTR:1; /*!< bit:      1  Continue Request                   */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } EMMC; /*!< Structure used for EMMC                         */
  uint8_t reg; /*!< Type      used for register access              */
} SDHC_BGCR_Type;
# 579 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
// EMMC mode
# 594 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_WCR : (SDHC Offset: 0x02B) (R/W  8) Wakeup Control -------- */

typedef union {
  struct {
    uint8_t WKENCINT:1; /*!< bit:      0  Wakeup Event Enable on Card Interrupt */
    uint8_t WKENCINS:1; /*!< bit:      1  Wakeup Event Enable on Card Insertion */
    uint8_t WKENCREM:1; /*!< bit:      2  Wakeup Event Enable on Card Removal */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SDHC_WCR_Type;
# 630 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_CCR : (SDHC Offset: 0x02C) (R/W 16) Clock Control -------- */

typedef union {
  struct {
    uint16_t INTCLKEN:1; /*!< bit:      0  Internal Clock Enable              */
    uint16_t INTCLKS:1; /*!< bit:      1  Internal Clock Stable              */
    uint16_t SDCLKEN:1; /*!< bit:      2  SD Clock Enable                    */
    uint16_t :2; /*!< bit:  3.. 4  Reserved                           */
    uint16_t CLKGSEL:1; /*!< bit:      5  Clock Generator Select             */
    uint16_t USDCLKFSEL:2; /*!< bit:  6.. 7  Upper Bits of SDCLK Frequency Select */
    uint16_t SDCLKFSEL:8; /*!< bit:  8..15  SDCLK Frequency Select             */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_CCR_Type;
# 681 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_TCR : (SDHC Offset: 0x02E) (R/W  8) Timeout Control -------- */

typedef union {
  struct {
    uint8_t DTCVAL:4; /*!< bit:  0.. 3  Data Timeout Counter Value         */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SDHC_TCR_Type;
# 700 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_SRR : (SDHC Offset: 0x02F) (R/W  8) Software Reset -------- */

typedef union {
  struct {
    uint8_t SWRSTALL:1; /*!< bit:      0  Software Reset For All             */
    uint8_t SWRSTCMD:1; /*!< bit:      1  Software Reset For CMD Line        */
    uint8_t SWRSTDAT:1; /*!< bit:      2  Software Reset For DAT Line        */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SDHC_SRR_Type;
# 736 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_NISTR : (SDHC Offset: 0x030) (R/W 16) Normal Interrupt Status -------- */

typedef union {
  struct {
    uint16_t CMDC:1; /*!< bit:      0  Command Complete                   */
    uint16_t TRFC:1; /*!< bit:      1  Transfer Complete                  */
    uint16_t BLKGE:1; /*!< bit:      2  Block Gap Event                    */
    uint16_t DMAINT:1; /*!< bit:      3  DMA Interrupt                      */
    uint16_t BWRRDY:1; /*!< bit:      4  Buffer Write Ready                 */
    uint16_t BRDRDY:1; /*!< bit:      5  Buffer Read Ready                  */
    uint16_t CINS:1; /*!< bit:      6  Card Insertion                     */
    uint16_t CREM:1; /*!< bit:      7  Card Removal                       */
    uint16_t CINT:1; /*!< bit:      8  Card Interrupt                     */
    uint16_t :6; /*!< bit:  9..14  Reserved                           */
    uint16_t ERRINT:1; /*!< bit:     15  Error Interrupt                    */
  } bit; /*!< Structure used for bit  access                  */
  struct { // EMMC mode
    uint16_t CMDC:1; /*!< bit:      0  Command Complete                   */
    uint16_t TRFC:1; /*!< bit:      1  Transfer Complete                  */
    uint16_t BLKGE:1; /*!< bit:      2  Block Gap Event                    */
    uint16_t DMAINT:1; /*!< bit:      3  DMA Interrupt                      */
    uint16_t BWRRDY:1; /*!< bit:      4  Buffer Write Ready                 */
    uint16_t BRDRDY:1; /*!< bit:      5  Buffer Read Ready                  */
    uint16_t :8; /*!< bit:  6..13  Reserved                           */
    uint16_t BOOTAR:1; /*!< bit:     14  Boot Acknowledge Received          */
    uint16_t ERRINT:1; /*!< bit:     15  Error Interrupt                    */
  } EMMC; /*!< Structure used for EMMC                         */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_NISTR_Type;
# 832 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
// EMMC mode
# 879 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_EISTR : (SDHC Offset: 0x032) (R/W 16) Error Interrupt Status -------- */

typedef union {
  struct {
    uint16_t CMDTEO:1; /*!< bit:      0  Command Timeout Error              */
    uint16_t CMDCRC:1; /*!< bit:      1  Command CRC Error                  */
    uint16_t CMDEND:1; /*!< bit:      2  Command End Bit Error              */
    uint16_t CMDIDX:1; /*!< bit:      3  Command Index Error                */
    uint16_t DATTEO:1; /*!< bit:      4  Data Timeout Error                 */
    uint16_t DATCRC:1; /*!< bit:      5  Data CRC Error                     */
    uint16_t DATEND:1; /*!< bit:      6  Data End Bit Error                 */
    uint16_t CURLIM:1; /*!< bit:      7  Current Limit Error                */
    uint16_t ACMD:1; /*!< bit:      8  Auto CMD Error                     */
    uint16_t ADMA:1; /*!< bit:      9  ADMA Error                         */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct { // EMMC mode
    uint16_t CMDTEO:1; /*!< bit:      0  Command Timeout Error              */
    uint16_t CMDCRC:1; /*!< bit:      1  Command CRC Error                  */
    uint16_t CMDEND:1; /*!< bit:      2  Command End Bit Error              */
    uint16_t CMDIDX:1; /*!< bit:      3  Command Index Error                */
    uint16_t DATTEO:1; /*!< bit:      4  Data Timeout Error                 */
    uint16_t DATCRC:1; /*!< bit:      5  Data CRC Error                     */
    uint16_t DATEND:1; /*!< bit:      6  Data End Bit Error                 */
    uint16_t CURLIM:1; /*!< bit:      7  Current Limit Error                */
    uint16_t ACMD:1; /*!< bit:      8  Auto CMD Error                     */
    uint16_t ADMA:1; /*!< bit:      9  ADMA Error                         */
    uint16_t :2; /*!< bit: 10..11  Reserved                           */
    uint16_t BOOTAE:1; /*!< bit:     12  Boot Acknowledge Error             */
    uint16_t :3; /*!< bit: 13..15  Reserved                           */
  } EMMC; /*!< Structure used for EMMC                         */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_EISTR_Type;
# 979 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
// EMMC mode
# 1048 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_NISTER : (SDHC Offset: 0x034) (R/W 16) Normal Interrupt Status Enable -------- */

typedef union {
  struct {
    uint16_t CMDC:1; /*!< bit:      0  Command Complete Status Enable     */
    uint16_t TRFC:1; /*!< bit:      1  Transfer Complete Status Enable    */
    uint16_t BLKGE:1; /*!< bit:      2  Block Gap Event Status Enable      */
    uint16_t DMAINT:1; /*!< bit:      3  DMA Interrupt Status Enable        */
    uint16_t BWRRDY:1; /*!< bit:      4  Buffer Write Ready Status Enable   */
    uint16_t BRDRDY:1; /*!< bit:      5  Buffer Read Ready Status Enable    */
    uint16_t CINS:1; /*!< bit:      6  Card Insertion Status Enable       */
    uint16_t CREM:1; /*!< bit:      7  Card Removal Status Enable         */
    uint16_t CINT:1; /*!< bit:      8  Card Interrupt Status Enable       */
    uint16_t :7; /*!< bit:  9..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct { // EMMC mode
    uint16_t CMDC:1; /*!< bit:      0  Command Complete Status Enable     */
    uint16_t TRFC:1; /*!< bit:      1  Transfer Complete Status Enable    */
    uint16_t BLKGE:1; /*!< bit:      2  Block Gap Event Status Enable      */
    uint16_t DMAINT:1; /*!< bit:      3  DMA Interrupt Status Enable        */
    uint16_t BWRRDY:1; /*!< bit:      4  Buffer Write Ready Status Enable   */
    uint16_t BRDRDY:1; /*!< bit:      5  Buffer Read Ready Status Enable    */
    uint16_t :8; /*!< bit:  6..13  Reserved                           */
    uint16_t BOOTAR:1; /*!< bit:     14  Boot Acknowledge Received Status Enable */
    uint16_t :1; /*!< bit:     15  Reserved                           */
  } EMMC; /*!< Structure used for EMMC                         */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_NISTER_Type;
# 1137 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
// EMMC mode
# 1178 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_EISTER : (SDHC Offset: 0x036) (R/W 16) Error Interrupt Status Enable -------- */

typedef union {
  struct {
    uint16_t CMDTEO:1; /*!< bit:      0  Command Timeout Error Status Enable */
    uint16_t CMDCRC:1; /*!< bit:      1  Command CRC Error Status Enable    */
    uint16_t CMDEND:1; /*!< bit:      2  Command End Bit Error Status Enable */
    uint16_t CMDIDX:1; /*!< bit:      3  Command Index Error Status Enable  */
    uint16_t DATTEO:1; /*!< bit:      4  Data Timeout Error Status Enable   */
    uint16_t DATCRC:1; /*!< bit:      5  Data CRC Error Status Enable       */
    uint16_t DATEND:1; /*!< bit:      6  Data End Bit Error Status Enable   */
    uint16_t CURLIM:1; /*!< bit:      7  Current Limit Error Status Enable  */
    uint16_t ACMD:1; /*!< bit:      8  Auto CMD Error Status Enable       */
    uint16_t ADMA:1; /*!< bit:      9  ADMA Error Status Enable           */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct { // EMMC mode
    uint16_t CMDTEO:1; /*!< bit:      0  Command Timeout Error Status Enable */
    uint16_t CMDCRC:1; /*!< bit:      1  Command CRC Error Status Enable    */
    uint16_t CMDEND:1; /*!< bit:      2  Command End Bit Error Status Enable */
    uint16_t CMDIDX:1; /*!< bit:      3  Command Index Error Status Enable  */
    uint16_t DATTEO:1; /*!< bit:      4  Data Timeout Error Status Enable   */
    uint16_t DATCRC:1; /*!< bit:      5  Data CRC Error Status Enable       */
    uint16_t DATEND:1; /*!< bit:      6  Data End Bit Error Status Enable   */
    uint16_t CURLIM:1; /*!< bit:      7  Current Limit Error Status Enable  */
    uint16_t ACMD:1; /*!< bit:      8  Auto CMD Error Status Enable       */
    uint16_t ADMA:1; /*!< bit:      9  ADMA Error Status Enable           */
    uint16_t :2; /*!< bit: 10..11  Reserved                           */
    uint16_t BOOTAE:1; /*!< bit:     12  Boot Acknowledge Error Status Enable */
    uint16_t :3; /*!< bit: 13..15  Reserved                           */
  } EMMC; /*!< Structure used for EMMC                         */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_EISTER_Type;
# 1278 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
// EMMC mode
# 1343 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_NISIER : (SDHC Offset: 0x038) (R/W 16) Normal Interrupt Signal Enable -------- */

typedef union {
  struct {
    uint16_t CMDC:1; /*!< bit:      0  Command Complete Signal Enable     */
    uint16_t TRFC:1; /*!< bit:      1  Transfer Complete Signal Enable    */
    uint16_t BLKGE:1; /*!< bit:      2  Block Gap Event Signal Enable      */
    uint16_t DMAINT:1; /*!< bit:      3  DMA Interrupt Signal Enable        */
    uint16_t BWRRDY:1; /*!< bit:      4  Buffer Write Ready Signal Enable   */
    uint16_t BRDRDY:1; /*!< bit:      5  Buffer Read Ready Signal Enable    */
    uint16_t CINS:1; /*!< bit:      6  Card Insertion Signal Enable       */
    uint16_t CREM:1; /*!< bit:      7  Card Removal Signal Enable         */
    uint16_t CINT:1; /*!< bit:      8  Card Interrupt Signal Enable       */
    uint16_t :7; /*!< bit:  9..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct { // EMMC mode
    uint16_t CMDC:1; /*!< bit:      0  Command Complete Signal Enable     */
    uint16_t TRFC:1; /*!< bit:      1  Transfer Complete Signal Enable    */
    uint16_t BLKGE:1; /*!< bit:      2  Block Gap Event Signal Enable      */
    uint16_t DMAINT:1; /*!< bit:      3  DMA Interrupt Signal Enable        */
    uint16_t BWRRDY:1; /*!< bit:      4  Buffer Write Ready Signal Enable   */
    uint16_t BRDRDY:1; /*!< bit:      5  Buffer Read Ready Signal Enable    */
    uint16_t :8; /*!< bit:  6..13  Reserved                           */
    uint16_t BOOTAR:1; /*!< bit:     14  Boot Acknowledge Received Signal Enable */
    uint16_t :1; /*!< bit:     15  Reserved                           */
  } EMMC; /*!< Structure used for EMMC                         */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_NISIER_Type;
# 1432 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
// EMMC mode
# 1473 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_EISIER : (SDHC Offset: 0x03A) (R/W 16) Error Interrupt Signal Enable -------- */

typedef union {
  struct {
    uint16_t CMDTEO:1; /*!< bit:      0  Command Timeout Error Signal Enable */
    uint16_t CMDCRC:1; /*!< bit:      1  Command CRC Error Signal Enable    */
    uint16_t CMDEND:1; /*!< bit:      2  Command End Bit Error Signal Enable */
    uint16_t CMDIDX:1; /*!< bit:      3  Command Index Error Signal Enable  */
    uint16_t DATTEO:1; /*!< bit:      4  Data Timeout Error Signal Enable   */
    uint16_t DATCRC:1; /*!< bit:      5  Data CRC Error Signal Enable       */
    uint16_t DATEND:1; /*!< bit:      6  Data End Bit Error Signal Enable   */
    uint16_t CURLIM:1; /*!< bit:      7  Current Limit Error Signal Enable  */
    uint16_t ACMD:1; /*!< bit:      8  Auto CMD Error Signal Enable       */
    uint16_t ADMA:1; /*!< bit:      9  ADMA Error Signal Enable           */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct { // EMMC mode
    uint16_t CMDTEO:1; /*!< bit:      0  Command Timeout Error Signal Enable */
    uint16_t CMDCRC:1; /*!< bit:      1  Command CRC Error Signal Enable    */
    uint16_t CMDEND:1; /*!< bit:      2  Command End Bit Error Signal Enable */
    uint16_t CMDIDX:1; /*!< bit:      3  Command Index Error Signal Enable  */
    uint16_t DATTEO:1; /*!< bit:      4  Data Timeout Error Signal Enable   */
    uint16_t DATCRC:1; /*!< bit:      5  Data CRC Error Signal Enable       */
    uint16_t DATEND:1; /*!< bit:      6  Data End Bit Error Signal Enable   */
    uint16_t CURLIM:1; /*!< bit:      7  Current Limit Error Signal Enable  */
    uint16_t ACMD:1; /*!< bit:      8  Auto CMD Error Signal Enable       */
    uint16_t ADMA:1; /*!< bit:      9  ADMA Error Signal Enable           */
    uint16_t :2; /*!< bit: 10..11  Reserved                           */
    uint16_t BOOTAE:1; /*!< bit:     12  Boot Acknowledge Error Signal Enable */
    uint16_t :3; /*!< bit: 13..15  Reserved                           */
  } EMMC; /*!< Structure used for EMMC                         */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_EISIER_Type;
# 1573 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
// EMMC mode
# 1638 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_ACESR : (SDHC Offset: 0x03C) (R/  16) Auto CMD Error Status -------- */

typedef union {
  struct {
    uint16_t ACMD12NE:1; /*!< bit:      0  Auto CMD12 Not Executed            */
    uint16_t ACMDTEO:1; /*!< bit:      1  Auto CMD Timeout Error             */
    uint16_t ACMDCRC:1; /*!< bit:      2  Auto CMD CRC Error                 */
    uint16_t ACMDEND:1; /*!< bit:      3  Auto CMD End Bit Error             */
    uint16_t ACMDIDX:1; /*!< bit:      4  Auto CMD Index Error               */
    uint16_t :2; /*!< bit:  5.. 6  Reserved                           */
    uint16_t CMDNI:1; /*!< bit:      7  Command not Issued By Auto CMD12 Error */
    uint16_t :8; /*!< bit:  8..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_ACESR_Type;
# 1696 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_HC2R : (SDHC Offset: 0x03E) (R/W 16) Host Control 2 -------- */

typedef union {
  struct {
    uint16_t UHSMS:3; /*!< bit:  0.. 2  UHS Mode Select                    */
    uint16_t VS18EN:1; /*!< bit:      3  1.8V Signaling Enable              */
    uint16_t DRVSEL:2; /*!< bit:  4.. 5  Driver Strength Select             */
    uint16_t EXTUN:1; /*!< bit:      6  Execute Tuning                     */
    uint16_t SLCKSEL:1; /*!< bit:      7  Sampling Clock Select              */
    uint16_t :6; /*!< bit:  8..13  Reserved                           */
    uint16_t ASINTEN:1; /*!< bit:     14  Asynchronous Interrupt Enable      */
    uint16_t PVALEN:1; /*!< bit:     15  Preset Value Enable                */
  } bit; /*!< Structure used for bit  access                  */
  struct { // EMMC mode
    uint16_t HS200EN:4; /*!< bit:  0.. 3  HS200 Mode Enable                  */
    uint16_t DRVSEL:2; /*!< bit:  4.. 5  Driver Strength Select             */
    uint16_t EXTUN:1; /*!< bit:      6  Execute Tuning                     */
    uint16_t SLCKSEL:1; /*!< bit:      7  Sampling Clock Select              */
    uint16_t :7; /*!< bit:  8..14  Reserved                           */
    uint16_t PVALEN:1; /*!< bit:     15  Preset Value Enable                */
  } EMMC; /*!< Structure used for EMMC                         */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_HC2R_Type;
# 1780 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
// EMMC mode
# 1825 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_CA0R : (SDHC Offset: 0x040) (R/  32) Capabilities 0 -------- */

typedef union {
  struct {
    uint32_t TEOCLKF:6; /*!< bit:  0.. 5  Timeout Clock Frequency            */
    uint32_t :1; /*!< bit:      6  Reserved                           */
    uint32_t TEOCLKU:1; /*!< bit:      7  Timeout Clock Unit                 */
    uint32_t BASECLKF:8; /*!< bit:  8..15  Base Clock Frequency               */
    uint32_t MAXBLKL:2; /*!< bit: 16..17  Max Block Length                   */
    uint32_t ED8SUP:1; /*!< bit:     18  8-bit Support for Embedded Device  */
    uint32_t ADMA2SUP:1; /*!< bit:     19  ADMA2 Support                      */
    uint32_t :1; /*!< bit:     20  Reserved                           */
    uint32_t HSSUP:1; /*!< bit:     21  High Speed Support                 */
    uint32_t SDMASUP:1; /*!< bit:     22  SDMA Support                       */
    uint32_t SRSUP:1; /*!< bit:     23  Suspend/Resume Support             */
    uint32_t V33VSUP:1; /*!< bit:     24  Voltage Support 3.3V               */
    uint32_t V30VSUP:1; /*!< bit:     25  Voltage Support 3.0V               */
    uint32_t V18VSUP:1; /*!< bit:     26  Voltage Support 1.8V               */
    uint32_t :1; /*!< bit:     27  Reserved                           */
    uint32_t SB64SUP:1; /*!< bit:     28  64-Bit System Bus Support          */
    uint32_t ASINTSUP:1; /*!< bit:     29  Asynchronous Interrupt Support     */
    uint32_t SLTYPE:2; /*!< bit: 30..31  Slot Type                          */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SDHC_CA0R_Type;
# 1949 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_CA1R : (SDHC Offset: 0x044) (R/  32) Capabilities 1 -------- */

typedef union {
  struct {
    uint32_t SDR50SUP:1; /*!< bit:      0  SDR50 Support                      */
    uint32_t SDR104SUP:1; /*!< bit:      1  SDR104 Support                     */
    uint32_t DDR50SUP:1; /*!< bit:      2  DDR50 Support                      */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t DRVASUP:1; /*!< bit:      4  Driver Type A Support              */
    uint32_t DRVCSUP:1; /*!< bit:      5  Driver Type C Support              */
    uint32_t DRVDSUP:1; /*!< bit:      6  Driver Type D Support              */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t TCNTRT:4; /*!< bit:  8..11  Timer Count for Re-Tuning          */
    uint32_t :1; /*!< bit:     12  Reserved                           */
    uint32_t TSDR50:1; /*!< bit:     13  Use Tuning for SDR50               */
    uint32_t :2; /*!< bit: 14..15  Reserved                           */
    uint32_t CLKMULT:8; /*!< bit: 16..23  Clock Multiplier                   */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SDHC_CA1R_Type;
# 2053 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_MCCAR : (SDHC Offset: 0x048) (R/  32) Maximum Current Capabilities -------- */

typedef union {
  struct {
    uint32_t MAXCUR33V:8; /*!< bit:  0.. 7  Maximum Current for 3.3V           */
    uint32_t MAXCUR30V:8; /*!< bit:  8..15  Maximum Current for 3.0V           */
    uint32_t MAXCUR18V:8; /*!< bit: 16..23  Maximum Current for 1.8V           */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SDHC_MCCAR_Type;
# 2104 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_FERACES : (SDHC Offset: 0x050) ( /W 16) Force Event for Auto CMD Error Status -------- */

typedef union {
  struct {
    uint16_t ACMD12NE:1; /*!< bit:      0  Force Event for Auto CMD12 Not Executed */
    uint16_t ACMDTEO:1; /*!< bit:      1  Force Event for Auto CMD Timeout Error */
    uint16_t ACMDCRC:1; /*!< bit:      2  Force Event for Auto CMD CRC Error */
    uint16_t ACMDEND:1; /*!< bit:      3  Force Event for Auto CMD End Bit Error */
    uint16_t ACMDIDX:1; /*!< bit:      4  Force Event for Auto CMD Index Error */
    uint16_t :2; /*!< bit:  5.. 6  Reserved                           */
    uint16_t CMDNI:1; /*!< bit:      7  Force Event for Command Not Issued By Auto CMD12 Error */
    uint16_t :8; /*!< bit:  8..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_FERACES_Type;
# 2162 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_FEREIS : (SDHC Offset: 0x052) ( /W 16) Force Event for Error Interrupt Status -------- */

typedef union {
  struct {
    uint16_t CMDTEO:1; /*!< bit:      0  Force Event for Command Timeout Error */
    uint16_t CMDCRC:1; /*!< bit:      1  Force Event for Command CRC Error  */
    uint16_t CMDEND:1; /*!< bit:      2  Force Event for Command End Bit Error */
    uint16_t CMDIDX:1; /*!< bit:      3  Force Event for Command Index Error */
    uint16_t DATTEO:1; /*!< bit:      4  Force Event for Data Timeout Error */
    uint16_t DATCRC:1; /*!< bit:      5  Force Event for Data CRC Error     */
    uint16_t DATEND:1; /*!< bit:      6  Force Event for Data End Bit Error */
    uint16_t CURLIM:1; /*!< bit:      7  Force Event for Current Limit Error */
    uint16_t ACMD:1; /*!< bit:      8  Force Event for Auto CMD Error     */
    uint16_t ADMA:1; /*!< bit:      9  Force Event for ADMA Error         */
    uint16_t :2; /*!< bit: 10..11  Reserved                           */
    uint16_t BOOTAE:1; /*!< bit:     12  Force Event for Boot Acknowledge Error */
    uint16_t :3; /*!< bit: 13..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_FEREIS_Type;
# 2255 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_AESR : (SDHC Offset: 0x054) (R/   8) ADMA Error Status -------- */

typedef union {
  struct {
    uint8_t ERRST:2; /*!< bit:  0.. 1  ADMA Error State                   */
    uint8_t LMIS:1; /*!< bit:      2  ADMA Length Mismatch Error         */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SDHC_AESR_Type;
# 2289 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_ASAR : (SDHC Offset: 0x058) (R/W 32) ADMA System Address n -------- */

typedef union {
  struct {
    uint32_t ADMASA:32; /*!< bit:  0..31  ADMA System Address                */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SDHC_ASAR_Type;
# 2307 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_PVR : (SDHC Offset: 0x060) (R/W 16) Preset Value n -------- */

typedef union {
  struct {
    uint16_t SDCLKFSEL:10; /*!< bit:  0.. 9  SDCLK Frequency Select Value for Initialization */
    uint16_t CLKGSEL:1; /*!< bit:     10  Clock Generator Select Value for Initialization */
    uint16_t :3; /*!< bit: 11..13  Reserved                           */
    uint16_t DRVSEL:2; /*!< bit: 14..15  Driver Strength Select Value for Initialization */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_PVR_Type;
# 2345 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_SISR : (SDHC Offset: 0x0FC) (R/  16) Slot Interrupt Status -------- */

typedef union {
  struct {
    uint16_t INTSSL:1; /*!< bit:      0  Interrupt Signal for Each Slot     */
    uint16_t :15; /*!< bit:  1..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_SISR_Type;
# 2364 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_HCVR : (SDHC Offset: 0x0FE) (R/  16) Host Controller Version -------- */

typedef union {
  struct {
    uint16_t SVER:8; /*!< bit:  0.. 7  Spec Version                       */
    uint16_t VVER:8; /*!< bit:  8..15  Vendor Version                     */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SDHC_HCVR_Type;
# 2386 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_MC1R : (SDHC Offset: 0x204) (R/W  8) MMC Control 1 -------- */

typedef union {
  struct {
    uint8_t CMDTYP:2; /*!< bit:  0.. 1  e.MMC Command Type                 */
    uint8_t :1; /*!< bit:      2  Reserved                           */
    uint8_t DDR:1; /*!< bit:      3  e.MMC HSDDR Mode                   */
    uint8_t OPD:1; /*!< bit:      4  e.MMC Open Drain Mode              */
    uint8_t BOOTA:1; /*!< bit:      5  e.MMC Boot Acknowledge Enable      */
    uint8_t RSTN:1; /*!< bit:      6  e.MMC Reset Signal                 */
    uint8_t FCD:1; /*!< bit:      7  e.MMC Force Card Detect            */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SDHC_MC1R_Type;
# 2428 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_MC2R : (SDHC Offset: 0x205) ( /W  8) MMC Control 2 -------- */

typedef union {
  struct {
    uint8_t SRESP:1; /*!< bit:      0  e.MMC Abort Wait IRQ               */
    uint8_t ABOOT:1; /*!< bit:      1  e.MMC Abort Boot                   */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SDHC_MC2R_Type;
# 2449 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_ACR : (SDHC Offset: 0x208) (R/W 32) AHB Control -------- */

typedef union {
  struct {
    uint32_t BMAX:2; /*!< bit:  0.. 1  AHB Maximum Burst                  */
    uint32_t :30; /*!< bit:  2..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SDHC_ACR_Type;
# 2476 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_CC2R : (SDHC Offset: 0x20C) (R/W 32) Clock Control 2 -------- */

typedef union {
  struct {
    uint32_t FSDCLKD:1; /*!< bit:      0  Force SDCK Disabled                */
    uint32_t :31; /*!< bit:  1..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SDHC_CC2R_Type;
# 2498 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_CACR : (SDHC Offset: 0x230) (R/W 32) Capabilities Control -------- */

typedef union {
  struct {
    uint32_t CAPWREN:1; /*!< bit:      0  Capabilities Registers Write Enable (Required to write the correct frequencies in the Capabilities Registers) */
    uint32_t :7; /*!< bit:  1.. 7  Reserved                           */
    uint32_t KEY:8; /*!< bit:  8..15  Key (0x46)                         */
    uint32_t :16; /*!< bit: 16..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SDHC_CACR_Type;
# 2521 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/* -------- SDHC_DBGR : (SDHC Offset: 0x234) (R/W  8) Debug -------- */

typedef union {
  struct {
    uint8_t NIDBG:1; /*!< bit:      0  Non-intrusive debug enable         */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SDHC_DBGR_Type;
# 2543 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sdhc.h"
/** \brief SDHC hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ SDHC_SSAR_Type SSAR; /**< \brief Offset: 0x000 (R/W 32) SDMA System Address / Argument 2 */
  volatile /*!< Defines 'read / write' permissions */ SDHC_BSR_Type BSR; /**< \brief Offset: 0x004 (R/W 16) Block Size */
  volatile /*!< Defines 'read / write' permissions */ SDHC_BCR_Type BCR; /**< \brief Offset: 0x006 (R/W 16) Block Count */
  volatile /*!< Defines 'read / write' permissions */ SDHC_ARG1R_Type ARG1R; /**< \brief Offset: 0x008 (R/W 32) Argument 1 */
  volatile /*!< Defines 'read / write' permissions */ SDHC_TMR_Type TMR; /**< \brief Offset: 0x00C (R/W 16) Transfer Mode */
  volatile /*!< Defines 'read / write' permissions */ SDHC_CR_Type CR; /**< \brief Offset: 0x00E (R/W 16) Command */
  volatile /*!< Defines 'read only' permissions */ SDHC_RR_Type RR[4]; /**< \brief Offset: 0x010 (R/  32) Response */
  volatile /*!< Defines 'read / write' permissions */ SDHC_BDPR_Type BDPR; /**< \brief Offset: 0x020 (R/W 32) Buffer Data Port */
  volatile /*!< Defines 'read only' permissions */ SDHC_PSR_Type PSR; /**< \brief Offset: 0x024 (R/  32) Present State */
  volatile /*!< Defines 'read / write' permissions */ SDHC_HC1R_Type HC1R; /**< \brief Offset: 0x028 (R/W  8) Host Control 1 */
  volatile /*!< Defines 'read / write' permissions */ SDHC_PCR_Type PCR; /**< \brief Offset: 0x029 (R/W  8) Power Control */
  volatile /*!< Defines 'read / write' permissions */ SDHC_BGCR_Type BGCR; /**< \brief Offset: 0x02A (R/W  8) Block Gap Control */
  volatile /*!< Defines 'read / write' permissions */ SDHC_WCR_Type WCR; /**< \brief Offset: 0x02B (R/W  8) Wakeup Control */
  volatile /*!< Defines 'read / write' permissions */ SDHC_CCR_Type CCR; /**< \brief Offset: 0x02C (R/W 16) Clock Control */
  volatile /*!< Defines 'read / write' permissions */ SDHC_TCR_Type TCR; /**< \brief Offset: 0x02E (R/W  8) Timeout Control */
  volatile /*!< Defines 'read / write' permissions */ SDHC_SRR_Type SRR; /**< \brief Offset: 0x02F (R/W  8) Software Reset */
  volatile /*!< Defines 'read / write' permissions */ SDHC_NISTR_Type NISTR; /**< \brief Offset: 0x030 (R/W 16) Normal Interrupt Status */
  volatile /*!< Defines 'read / write' permissions */ SDHC_EISTR_Type EISTR; /**< \brief Offset: 0x032 (R/W 16) Error Interrupt Status */
  volatile /*!< Defines 'read / write' permissions */ SDHC_NISTER_Type NISTER; /**< \brief Offset: 0x034 (R/W 16) Normal Interrupt Status Enable */
  volatile /*!< Defines 'read / write' permissions */ SDHC_EISTER_Type EISTER; /**< \brief Offset: 0x036 (R/W 16) Error Interrupt Status Enable */
  volatile /*!< Defines 'read / write' permissions */ SDHC_NISIER_Type NISIER; /**< \brief Offset: 0x038 (R/W 16) Normal Interrupt Signal Enable */
  volatile /*!< Defines 'read / write' permissions */ SDHC_EISIER_Type EISIER; /**< \brief Offset: 0x03A (R/W 16) Error Interrupt Signal Enable */
  volatile /*!< Defines 'read only' permissions */ SDHC_ACESR_Type ACESR; /**< \brief Offset: 0x03C (R/  16) Auto CMD Error Status */
  volatile /*!< Defines 'read / write' permissions */ SDHC_HC2R_Type HC2R; /**< \brief Offset: 0x03E (R/W 16) Host Control 2 */
  volatile /*!< Defines 'read only' permissions */ SDHC_CA0R_Type CA0R; /**< \brief Offset: 0x040 (R/  32) Capabilities 0 */
  volatile /*!< Defines 'read only' permissions */ SDHC_CA1R_Type CA1R; /**< \brief Offset: 0x044 (R/  32) Capabilities 1 */
  volatile /*!< Defines 'read only' permissions */ SDHC_MCCAR_Type MCCAR; /**< \brief Offset: 0x048 (R/  32) Maximum Current Capabilities */
       RoReg8 Reserved1[0x4];
  volatile /*!< Defines 'write only' permissions */ SDHC_FERACES_Type FERACES; /**< \brief Offset: 0x050 ( /W 16) Force Event for Auto CMD Error Status */
  volatile /*!< Defines 'write only' permissions */ SDHC_FEREIS_Type FEREIS; /**< \brief Offset: 0x052 ( /W 16) Force Event for Error Interrupt Status */
  volatile /*!< Defines 'read only' permissions */ SDHC_AESR_Type AESR; /**< \brief Offset: 0x054 (R/   8) ADMA Error Status */
       RoReg8 Reserved2[0x3];
  volatile /*!< Defines 'read / write' permissions */ SDHC_ASAR_Type ASAR[1]; /**< \brief Offset: 0x058 (R/W 32) ADMA System Address n */
       RoReg8 Reserved3[0x4];
  volatile /*!< Defines 'read / write' permissions */ SDHC_PVR_Type PVR[8]; /**< \brief Offset: 0x060 (R/W 16) Preset Value n */
       RoReg8 Reserved4[0x8C];
  volatile /*!< Defines 'read only' permissions */ SDHC_SISR_Type SISR; /**< \brief Offset: 0x0FC (R/  16) Slot Interrupt Status */
  volatile /*!< Defines 'read only' permissions */ SDHC_HCVR_Type HCVR; /**< \brief Offset: 0x0FE (R/  16) Host Controller Version */
       RoReg8 Reserved5[0x104];
  volatile /*!< Defines 'read / write' permissions */ SDHC_MC1R_Type MC1R; /**< \brief Offset: 0x204 (R/W  8) MMC Control 1 */
  volatile /*!< Defines 'write only' permissions */ SDHC_MC2R_Type MC2R; /**< \brief Offset: 0x205 ( /W  8) MMC Control 2 */
       RoReg8 Reserved6[0x2];
  volatile /*!< Defines 'read / write' permissions */ SDHC_ACR_Type ACR; /**< \brief Offset: 0x208 (R/W 32) AHB Control */
  volatile /*!< Defines 'read / write' permissions */ SDHC_CC2R_Type CC2R; /**< \brief Offset: 0x20C (R/W 32) Clock Control 2 */
       RoReg8 Reserved7[0x20];
  volatile /*!< Defines 'read / write' permissions */ SDHC_CACR_Type CACR; /**< \brief Offset: 0x230 (R/W 32) Capabilities Control */
  volatile /*!< Defines 'read / write' permissions */ SDHC_DBGR_Type DBGR; /**< \brief Offset: 0x234 (R/W  8) Debug */
} Sdhc;


/*@}*/
# 605 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h" 1
/**
 * \file
 *
 * \brief Component description for SERCOM
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR SERCOM */
/* ========================================================================== */
/** \addtogroup SAMD51_SERCOM Serial Communication Interface */
/*@{*/




/* -------- SERCOM_I2CM_CTRLA : (SERCOM Offset: 0x00) (R/W 32) I2CM I2CM Control A -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t MODE:3; /*!< bit:  2.. 4  Operating Mode                     */
    uint32_t :2; /*!< bit:  5.. 6  Reserved                           */
    uint32_t RUNSTDBY:1; /*!< bit:      7  Run in Standby                     */
    uint32_t :8; /*!< bit:  8..15  Reserved                           */
    uint32_t PINOUT:1; /*!< bit:     16  Pin Usage                          */
    uint32_t :3; /*!< bit: 17..19  Reserved                           */
    uint32_t SDAHOLD:2; /*!< bit: 20..21  SDA Hold Time                      */
    uint32_t MEXTTOEN:1; /*!< bit:     22  Master SCL Low Extend Timeout      */
    uint32_t SEXTTOEN:1; /*!< bit:     23  Slave SCL Low Extend Timeout       */
    uint32_t SPEED:2; /*!< bit: 24..25  Transfer Speed                     */
    uint32_t :1; /*!< bit:     26  Reserved                           */
    uint32_t SCLSM:1; /*!< bit:     27  SCL Clock Stretch Mode             */
    uint32_t INACTOUT:2; /*!< bit: 28..29  Inactive Time-Out                  */
    uint32_t LOWTOUTEN:1; /*!< bit:     30  SCL Low Timeout Enable             */
    uint32_t :1; /*!< bit:     31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CM_CTRLA_Type;
# 100 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CS_CTRLA : (SERCOM Offset: 0x00) (R/W 32) I2CS I2CS Control A -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t MODE:3; /*!< bit:  2.. 4  Operating Mode                     */
    uint32_t :2; /*!< bit:  5.. 6  Reserved                           */
    uint32_t RUNSTDBY:1; /*!< bit:      7  Run during Standby                 */
    uint32_t :8; /*!< bit:  8..15  Reserved                           */
    uint32_t PINOUT:1; /*!< bit:     16  Pin Usage                          */
    uint32_t :3; /*!< bit: 17..19  Reserved                           */
    uint32_t SDAHOLD:2; /*!< bit: 20..21  SDA Hold Time                      */
    uint32_t :1; /*!< bit:     22  Reserved                           */
    uint32_t SEXTTOEN:1; /*!< bit:     23  Slave SCL Low Extend Timeout       */
    uint32_t SPEED:2; /*!< bit: 24..25  Transfer Speed                     */
    uint32_t :1; /*!< bit:     26  Reserved                           */
    uint32_t SCLSM:1; /*!< bit:     27  SCL Clock Stretch Mode             */
    uint32_t :2; /*!< bit: 28..29  Reserved                           */
    uint32_t LOWTOUTEN:1; /*!< bit:     30  SCL Low Timeout Enable             */
    uint32_t :1; /*!< bit:     31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CS_CTRLA_Type;
# 154 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_CTRLA : (SERCOM Offset: 0x00) (R/W 32) SPI SPI Control A -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t MODE:3; /*!< bit:  2.. 4  Operating Mode                     */
    uint32_t :2; /*!< bit:  5.. 6  Reserved                           */
    uint32_t RUNSTDBY:1; /*!< bit:      7  Run during Standby                 */
    uint32_t IBON:1; /*!< bit:      8  Immediate Buffer Overflow Notification */
    uint32_t :7; /*!< bit:  9..15  Reserved                           */
    uint32_t DOPO:2; /*!< bit: 16..17  Data Out Pinout                    */
    uint32_t :2; /*!< bit: 18..19  Reserved                           */
    uint32_t DIPO:2; /*!< bit: 20..21  Data In Pinout                     */
    uint32_t :2; /*!< bit: 22..23  Reserved                           */
    uint32_t FORM:4; /*!< bit: 24..27  Frame Format                       */
    uint32_t CPHA:1; /*!< bit:     28  Clock Phase                        */
    uint32_t CPOL:1; /*!< bit:     29  Clock Polarity                     */
    uint32_t DORD:1; /*!< bit:     30  Data Order                         */
    uint32_t :1; /*!< bit:     31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_CTRLA_Type;
# 210 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_CTRLA : (SERCOM Offset: 0x00) (R/W 32) USART USART Control A -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t MODE:3; /*!< bit:  2.. 4  Operating Mode                     */
    uint32_t :2; /*!< bit:  5.. 6  Reserved                           */
    uint32_t RUNSTDBY:1; /*!< bit:      7  Run during Standby                 */
    uint32_t IBON:1; /*!< bit:      8  Immediate Buffer Overflow Notification */
    uint32_t TXINV:1; /*!< bit:      9  Transmit Data Invert               */
    uint32_t RXINV:1; /*!< bit:     10  Receive Data Invert                */
    uint32_t :2; /*!< bit: 11..12  Reserved                           */
    uint32_t SAMPR:3; /*!< bit: 13..15  Sample                             */
    uint32_t TXPO:2; /*!< bit: 16..17  Transmit Data Pinout               */
    uint32_t :2; /*!< bit: 18..19  Reserved                           */
    uint32_t RXPO:2; /*!< bit: 20..21  Receive Data Pinout                */
    uint32_t SAMPA:2; /*!< bit: 22..23  Sample Adjustment                  */
    uint32_t FORM:4; /*!< bit: 24..27  Frame Format                       */
    uint32_t CMODE:1; /*!< bit:     28  Communication Mode                 */
    uint32_t CPOL:1; /*!< bit:     29  Clock Polarity                     */
    uint32_t DORD:1; /*!< bit:     30  Data Order                         */
    uint32_t :1; /*!< bit:     31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_USART_CTRLA_Type;
# 279 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CM_CTRLB : (SERCOM Offset: 0x04) (R/W 32) I2CM I2CM Control B -------- */

typedef union {
  struct {
    uint32_t :8; /*!< bit:  0.. 7  Reserved                           */
    uint32_t SMEN:1; /*!< bit:      8  Smart Mode Enable                  */
    uint32_t QCEN:1; /*!< bit:      9  Quick Command Enable               */
    uint32_t :6; /*!< bit: 10..15  Reserved                           */
    uint32_t CMD:2; /*!< bit: 16..17  Command                            */
    uint32_t ACKACT:1; /*!< bit:     18  Acknowledge Action                 */
    uint32_t :13; /*!< bit: 19..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CM_CTRLB_Type;
# 309 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CS_CTRLB : (SERCOM Offset: 0x04) (R/W 32) I2CS I2CS Control B -------- */

typedef union {
  struct {
    uint32_t :8; /*!< bit:  0.. 7  Reserved                           */
    uint32_t SMEN:1; /*!< bit:      8  Smart Mode Enable                  */
    uint32_t GCMD:1; /*!< bit:      9  PMBus Group Command                */
    uint32_t AACKEN:1; /*!< bit:     10  Automatic Address Acknowledge      */
    uint32_t :3; /*!< bit: 11..13  Reserved                           */
    uint32_t AMODE:2; /*!< bit: 14..15  Address Mode                       */
    uint32_t CMD:2; /*!< bit: 16..17  Command                            */
    uint32_t ACKACT:1; /*!< bit:     18  Acknowledge Action                 */
    uint32_t :13; /*!< bit: 19..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CS_CTRLB_Type;
# 346 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_CTRLB : (SERCOM Offset: 0x04) (R/W 32) SPI SPI Control B -------- */

typedef union {
  struct {
    uint32_t CHSIZE:3; /*!< bit:  0.. 2  Character Size                     */
    uint32_t :3; /*!< bit:  3.. 5  Reserved                           */
    uint32_t PLOADEN:1; /*!< bit:      6  Data Preload Enable                */
    uint32_t :2; /*!< bit:  7.. 8  Reserved                           */
    uint32_t SSDE:1; /*!< bit:      9  Slave Select Low Detect Enable     */
    uint32_t :3; /*!< bit: 10..12  Reserved                           */
    uint32_t MSSEN:1; /*!< bit:     13  Master Slave Select Enable         */
    uint32_t AMODE:2; /*!< bit: 14..15  Address Mode                       */
    uint32_t :1; /*!< bit:     16  Reserved                           */
    uint32_t RXEN:1; /*!< bit:     17  Receiver Enable                    */
    uint32_t :14; /*!< bit: 18..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_CTRLB_Type;
# 385 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_CTRLB : (SERCOM Offset: 0x04) (R/W 32) USART USART Control B -------- */

typedef union {
  struct {
    uint32_t CHSIZE:3; /*!< bit:  0.. 2  Character Size                     */
    uint32_t :3; /*!< bit:  3.. 5  Reserved                           */
    uint32_t SBMODE:1; /*!< bit:      6  Stop Bit Mode                      */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t COLDEN:1; /*!< bit:      8  Collision Detection Enable         */
    uint32_t SFDE:1; /*!< bit:      9  Start of Frame Detection Enable    */
    uint32_t ENC:1; /*!< bit:     10  Encoding Format                    */
    uint32_t :2; /*!< bit: 11..12  Reserved                           */
    uint32_t PMODE:1; /*!< bit:     13  Parity Mode                        */
    uint32_t :2; /*!< bit: 14..15  Reserved                           */
    uint32_t TXEN:1; /*!< bit:     16  Transmitter Enable                 */
    uint32_t RXEN:1; /*!< bit:     17  Receiver Enable                    */
    uint32_t :6; /*!< bit: 18..23  Reserved                           */
    uint32_t LINCMD:2; /*!< bit: 24..25  LIN Command                        */
    uint32_t :6; /*!< bit: 26..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_USART_CTRLB_Type;
# 434 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CM_CTRLC : (SERCOM Offset: 0x08) (R/W 32) I2CM I2CM Control C -------- */

typedef union {
  struct {
    uint32_t :24; /*!< bit:  0..23  Reserved                           */
    uint32_t DATA32B:1; /*!< bit:     24  Data 32 Bit                        */
    uint32_t :7; /*!< bit: 25..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CM_CTRLC_Type;
# 453 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CS_CTRLC : (SERCOM Offset: 0x08) (R/W 32) I2CS I2CS Control C -------- */

typedef union {
  struct {
    uint32_t SDASETUP:4; /*!< bit:  0.. 3  SDA Setup Time                     */
    uint32_t :20; /*!< bit:  4..23  Reserved                           */
    uint32_t DATA32B:1; /*!< bit:     24  Data 32 Bit                        */
    uint32_t :7; /*!< bit: 25..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CS_CTRLC_Type;
# 476 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_CTRLC : (SERCOM Offset: 0x08) (R/W 32) SPI SPI Control C -------- */

typedef union {
  struct {
    uint32_t ICSPACE:6; /*!< bit:  0.. 5  Inter-Character Spacing            */
    uint32_t :18; /*!< bit:  6..23  Reserved                           */
    uint32_t DATA32B:1; /*!< bit:     24  Data 32 Bit                        */
    uint32_t :7; /*!< bit: 25..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_CTRLC_Type;
# 499 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_CTRLC : (SERCOM Offset: 0x08) (R/W 32) USART USART Control C -------- */

typedef union {
  struct {
    uint32_t GTIME:3; /*!< bit:  0.. 2  Guard Time                         */
    uint32_t :5; /*!< bit:  3.. 7  Reserved                           */
    uint32_t BRKLEN:2; /*!< bit:  8.. 9  LIN Master Break Length            */
    uint32_t HDRDLY:2; /*!< bit: 10..11  LIN Master Header Delay            */
    uint32_t :4; /*!< bit: 12..15  Reserved                           */
    uint32_t INACK:1; /*!< bit:     16  Inhibit Not Acknowledge            */
    uint32_t DSNACK:1; /*!< bit:     17  Disable Successive NACK            */
    uint32_t :2; /*!< bit: 18..19  Reserved                           */
    uint32_t MAXITER:3; /*!< bit: 20..22  Maximum Iterations                 */
    uint32_t :1; /*!< bit:     23  Reserved                           */
    uint32_t DATA32B:2; /*!< bit: 24..25  Data 32 Bit                        */
    uint32_t :6; /*!< bit: 26..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_USART_CTRLC_Type;
# 544 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CM_BAUD : (SERCOM Offset: 0x0C) (R/W 32) I2CM I2CM Baud Rate -------- */

typedef union {
  struct {
    uint32_t BAUD:8; /*!< bit:  0.. 7  Baud Rate Value                    */
    uint32_t BAUDLOW:8; /*!< bit:  8..15  Baud Rate Value Low                */
    uint32_t HSBAUD:8; /*!< bit: 16..23  High Speed Baud Rate Value         */
    uint32_t HSBAUDLOW:8; /*!< bit: 24..31  High Speed Baud Rate Value Low     */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CM_BAUD_Type;
# 574 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_BAUD : (SERCOM Offset: 0x0C) (R/W  8) SPI SPI Baud Rate -------- */

typedef union {
  struct {
    uint8_t BAUD:8; /*!< bit:  0.. 7  Baud Rate Value                    */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_BAUD_Type;
# 592 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_BAUD : (SERCOM Offset: 0x0C) (R/W 16) USART USART Baud Rate -------- */

typedef union {
  struct {
    uint16_t BAUD:16; /*!< bit:  0..15  Baud Rate Value                    */
  } bit; /*!< Structure used for bit  access                  */
  struct { // FRAC mode
    uint16_t BAUD:13; /*!< bit:  0..12  Baud Rate Value                    */
    uint16_t FP:3; /*!< bit: 13..15  Fractional Part                    */
  } FRAC; /*!< Structure used for FRAC                         */
  struct { // FRACFP mode
    uint16_t BAUD:13; /*!< bit:  0..12  Baud Rate Value                    */
    uint16_t FP:3; /*!< bit: 13..15  Fractional Part                    */
  } FRACFP; /*!< Structure used for FRACFP                       */
  struct { // USARTFP mode
    uint16_t BAUD:16; /*!< bit:  0..15  Baud Rate Value                    */
  } USARTFP; /*!< Structure used for USARTFP                      */
  uint16_t reg; /*!< Type      used for register access              */
} SERCOM_USART_BAUD_Type;
# 621 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
// FRAC mode
# 630 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
// FRACFP mode
# 639 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
// USARTFP mode





/* -------- SERCOM_USART_RXPL : (SERCOM Offset: 0x0E) (R/W  8) USART USART Receive Pulse Length -------- */

typedef union {
  struct {
    uint8_t RXPL:8; /*!< bit:  0.. 7  Receive Pulse Length               */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_USART_RXPL_Type;
# 663 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CM_INTENCLR : (SERCOM Offset: 0x14) (R/W  8) I2CM I2CM Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t MB:1; /*!< bit:      0  Master On Bus Interrupt Disable    */
    uint8_t SB:1; /*!< bit:      1  Slave On Bus Interrupt Disable     */
    uint8_t :5; /*!< bit:  2.. 6  Reserved                           */
    uint8_t ERROR:1; /*!< bit:      7  Combined Error Interrupt Disable   */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_I2CM_INTENCLR_Type;
# 687 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CS_INTENCLR : (SERCOM Offset: 0x14) (R/W  8) I2CS I2CS Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t PREC:1; /*!< bit:      0  Stop Received Interrupt Disable    */
    uint8_t AMATCH:1; /*!< bit:      1  Address Match Interrupt Disable    */
    uint8_t DRDY:1; /*!< bit:      2  Data Interrupt Disable             */
    uint8_t :4; /*!< bit:  3.. 6  Reserved                           */
    uint8_t ERROR:1; /*!< bit:      7  Combined Error Interrupt Disable   */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_I2CS_INTENCLR_Type;
# 714 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_INTENCLR : (SERCOM Offset: 0x14) (R/W  8) SPI SPI Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t DRE:1; /*!< bit:      0  Data Register Empty Interrupt Disable */
    uint8_t TXC:1; /*!< bit:      1  Transmit Complete Interrupt Disable */
    uint8_t RXC:1; /*!< bit:      2  Receive Complete Interrupt Disable */
    uint8_t SSL:1; /*!< bit:      3  Slave Select Low Interrupt Disable */
    uint8_t :3; /*!< bit:  4.. 6  Reserved                           */
    uint8_t ERROR:1; /*!< bit:      7  Combined Error Interrupt Disable   */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_INTENCLR_Type;
# 744 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_INTENCLR : (SERCOM Offset: 0x14) (R/W  8) USART USART Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t DRE:1; /*!< bit:      0  Data Register Empty Interrupt Disable */
    uint8_t TXC:1; /*!< bit:      1  Transmit Complete Interrupt Disable */
    uint8_t RXC:1; /*!< bit:      2  Receive Complete Interrupt Disable */
    uint8_t RXS:1; /*!< bit:      3  Receive Start Interrupt Disable    */
    uint8_t CTSIC:1; /*!< bit:      4  Clear To Send Input Change Interrupt Disable */
    uint8_t RXBRK:1; /*!< bit:      5  Break Received Interrupt Disable   */
    uint8_t :1; /*!< bit:      6  Reserved                           */
    uint8_t ERROR:1; /*!< bit:      7  Combined Error Interrupt Disable   */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_USART_INTENCLR_Type;
# 780 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CM_INTENSET : (SERCOM Offset: 0x16) (R/W  8) I2CM I2CM Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t MB:1; /*!< bit:      0  Master On Bus Interrupt Enable     */
    uint8_t SB:1; /*!< bit:      1  Slave On Bus Interrupt Enable      */
    uint8_t :5; /*!< bit:  2.. 6  Reserved                           */
    uint8_t ERROR:1; /*!< bit:      7  Combined Error Interrupt Enable    */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_I2CM_INTENSET_Type;
# 804 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CS_INTENSET : (SERCOM Offset: 0x16) (R/W  8) I2CS I2CS Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t PREC:1; /*!< bit:      0  Stop Received Interrupt Enable     */
    uint8_t AMATCH:1; /*!< bit:      1  Address Match Interrupt Enable     */
    uint8_t DRDY:1; /*!< bit:      2  Data Interrupt Enable              */
    uint8_t :4; /*!< bit:  3.. 6  Reserved                           */
    uint8_t ERROR:1; /*!< bit:      7  Combined Error Interrupt Enable    */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_I2CS_INTENSET_Type;
# 831 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_INTENSET : (SERCOM Offset: 0x16) (R/W  8) SPI SPI Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t DRE:1; /*!< bit:      0  Data Register Empty Interrupt Enable */
    uint8_t TXC:1; /*!< bit:      1  Transmit Complete Interrupt Enable */
    uint8_t RXC:1; /*!< bit:      2  Receive Complete Interrupt Enable  */
    uint8_t SSL:1; /*!< bit:      3  Slave Select Low Interrupt Enable  */
    uint8_t :3; /*!< bit:  4.. 6  Reserved                           */
    uint8_t ERROR:1; /*!< bit:      7  Combined Error Interrupt Enable    */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_INTENSET_Type;
# 861 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_INTENSET : (SERCOM Offset: 0x16) (R/W  8) USART USART Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t DRE:1; /*!< bit:      0  Data Register Empty Interrupt Enable */
    uint8_t TXC:1; /*!< bit:      1  Transmit Complete Interrupt Enable */
    uint8_t RXC:1; /*!< bit:      2  Receive Complete Interrupt Enable  */
    uint8_t RXS:1; /*!< bit:      3  Receive Start Interrupt Enable     */
    uint8_t CTSIC:1; /*!< bit:      4  Clear To Send Input Change Interrupt Enable */
    uint8_t RXBRK:1; /*!< bit:      5  Break Received Interrupt Enable    */
    uint8_t :1; /*!< bit:      6  Reserved                           */
    uint8_t ERROR:1; /*!< bit:      7  Combined Error Interrupt Enable    */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_USART_INTENSET_Type;
# 897 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CM_INTFLAG : (SERCOM Offset: 0x18) (R/W  8) I2CM I2CM Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t MB:1; /*!< bit:      0  Master On Bus Interrupt            */
    volatile /*!< Defines 'read only' permissions */ uint8_t SB:1; /*!< bit:      1  Slave On Bus Interrupt             */
    volatile /*!< Defines 'read only' permissions */ uint8_t :5; /*!< bit:  2.. 6  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t ERROR:1; /*!< bit:      7  Combined Error Interrupt           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_I2CM_INTFLAG_Type;
# 921 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CS_INTFLAG : (SERCOM Offset: 0x18) (R/W  8) I2CS I2CS Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t PREC:1; /*!< bit:      0  Stop Received Interrupt            */
    volatile /*!< Defines 'read only' permissions */ uint8_t AMATCH:1; /*!< bit:      1  Address Match Interrupt            */
    volatile /*!< Defines 'read only' permissions */ uint8_t DRDY:1; /*!< bit:      2  Data Interrupt                     */
    volatile /*!< Defines 'read only' permissions */ uint8_t :4; /*!< bit:  3.. 6  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t ERROR:1; /*!< bit:      7  Combined Error Interrupt           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_I2CS_INTFLAG_Type;
# 948 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_INTFLAG : (SERCOM Offset: 0x18) (R/W  8) SPI SPI Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t DRE:1; /*!< bit:      0  Data Register Empty Interrupt      */
    volatile /*!< Defines 'read only' permissions */ uint8_t TXC:1; /*!< bit:      1  Transmit Complete Interrupt        */
    volatile /*!< Defines 'read only' permissions */ uint8_t RXC:1; /*!< bit:      2  Receive Complete Interrupt         */
    volatile /*!< Defines 'read only' permissions */ uint8_t SSL:1; /*!< bit:      3  Slave Select Low Interrupt Flag    */
    volatile /*!< Defines 'read only' permissions */ uint8_t :3; /*!< bit:  4.. 6  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t ERROR:1; /*!< bit:      7  Combined Error Interrupt           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_INTFLAG_Type;
# 978 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_INTFLAG : (SERCOM Offset: 0x18) (R/W  8) USART USART Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t DRE:1; /*!< bit:      0  Data Register Empty Interrupt      */
    volatile /*!< Defines 'read only' permissions */ uint8_t TXC:1; /*!< bit:      1  Transmit Complete Interrupt        */
    volatile /*!< Defines 'read only' permissions */ uint8_t RXC:1; /*!< bit:      2  Receive Complete Interrupt         */
    volatile /*!< Defines 'read only' permissions */ uint8_t RXS:1; /*!< bit:      3  Receive Start Interrupt            */
    volatile /*!< Defines 'read only' permissions */ uint8_t CTSIC:1; /*!< bit:      4  Clear To Send Input Change Interrupt */
    volatile /*!< Defines 'read only' permissions */ uint8_t RXBRK:1; /*!< bit:      5  Break Received Interrupt           */
    volatile /*!< Defines 'read only' permissions */ uint8_t :1; /*!< bit:      6  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t ERROR:1; /*!< bit:      7  Combined Error Interrupt           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_USART_INTFLAG_Type;
# 1014 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CM_STATUS : (SERCOM Offset: 0x1A) (R/W 16) I2CM I2CM Status -------- */

typedef union {
  struct {
    uint16_t BUSERR:1; /*!< bit:      0  Bus Error                          */
    uint16_t ARBLOST:1; /*!< bit:      1  Arbitration Lost                   */
    uint16_t RXNACK:1; /*!< bit:      2  Received Not Acknowledge           */
    uint16_t :1; /*!< bit:      3  Reserved                           */
    uint16_t BUSSTATE:2; /*!< bit:  4.. 5  Bus State                          */
    uint16_t LOWTOUT:1; /*!< bit:      6  SCL Low Timeout                    */
    uint16_t CLKHOLD:1; /*!< bit:      7  Clock Hold                         */
    uint16_t MEXTTOUT:1; /*!< bit:      8  Master SCL Low Extend Timeout      */
    uint16_t SEXTTOUT:1; /*!< bit:      9  Slave SCL Low Extend Timeout       */
    uint16_t LENERR:1; /*!< bit:     10  Length Error                       */
    uint16_t :5; /*!< bit: 11..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SERCOM_I2CM_STATUS_Type;
# 1058 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CS_STATUS : (SERCOM Offset: 0x1A) (R/W 16) I2CS I2CS Status -------- */

typedef union {
  struct {
    uint16_t BUSERR:1; /*!< bit:      0  Bus Error                          */
    uint16_t COLL:1; /*!< bit:      1  Transmit Collision                 */
    uint16_t RXNACK:1; /*!< bit:      2  Received Not Acknowledge           */
    uint16_t DIR:1; /*!< bit:      3  Read/Write Direction               */
    uint16_t SR:1; /*!< bit:      4  Repeated Start                     */
    uint16_t :1; /*!< bit:      5  Reserved                           */
    uint16_t LOWTOUT:1; /*!< bit:      6  SCL Low Timeout                    */
    uint16_t CLKHOLD:1; /*!< bit:      7  Clock Hold                         */
    uint16_t :1; /*!< bit:      8  Reserved                           */
    uint16_t SEXTTOUT:1; /*!< bit:      9  Slave SCL Low Extend Timeout       */
    uint16_t HS:1; /*!< bit:     10  High Speed                         */
    uint16_t LENERR:1; /*!< bit:     11  Transaction Length Error           */
    uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SERCOM_I2CS_STATUS_Type;
# 1105 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_STATUS : (SERCOM Offset: 0x1A) (R/W 16) SPI SPI Status -------- */

typedef union {
  struct {
    uint16_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint16_t BUFOVF:1; /*!< bit:      2  Buffer Overflow                    */
    uint16_t :8; /*!< bit:  3..10  Reserved                           */
    uint16_t LENERR:1; /*!< bit:     11  Transaction Length Error           */
    uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_STATUS_Type;
# 1128 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_STATUS : (SERCOM Offset: 0x1A) (R/W 16) USART USART Status -------- */

typedef union {
  struct {
    uint16_t PERR:1; /*!< bit:      0  Parity Error                       */
    uint16_t FERR:1; /*!< bit:      1  Frame Error                        */
    uint16_t BUFOVF:1; /*!< bit:      2  Buffer Overflow                    */
    uint16_t CTS:1; /*!< bit:      3  Clear To Send                      */
    uint16_t ISF:1; /*!< bit:      4  Inconsistent Sync Field            */
    uint16_t COLL:1; /*!< bit:      5  Collision Detected                 */
    uint16_t TXE:1; /*!< bit:      6  Transmitter Empty                  */
    uint16_t ITER:1; /*!< bit:      7  Maximum Number of Repetitions Reached */
    uint16_t :8; /*!< bit:  8..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SERCOM_USART_STATUS_Type;
# 1167 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CM_SYNCBUSY : (SERCOM Offset: 0x1C) (R/  32) I2CM I2CM Synchronization Busy -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset Synchronization Busy */
    uint32_t ENABLE:1; /*!< bit:      1  SERCOM Enable Synchronization Busy */
    uint32_t SYSOP:1; /*!< bit:      2  System Operation Synchronization Busy */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t LENGTH:1; /*!< bit:      4  Length Synchronization Busy        */
    uint32_t :27; /*!< bit:  5..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CM_SYNCBUSY_Type;
# 1195 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CS_SYNCBUSY : (SERCOM Offset: 0x1C) (R/  32) I2CS I2CS Synchronization Busy -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset Synchronization Busy */
    uint32_t ENABLE:1; /*!< bit:      1  SERCOM Enable Synchronization Busy */
    uint32_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint32_t LENGTH:1; /*!< bit:      4  Length Synchronization Busy        */
    uint32_t :27; /*!< bit:  5..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CS_SYNCBUSY_Type;
# 1220 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_SYNCBUSY : (SERCOM Offset: 0x1C) (R/  32) SPI SPI Synchronization Busy -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset Synchronization Busy */
    uint32_t ENABLE:1; /*!< bit:      1  SERCOM Enable Synchronization Busy */
    uint32_t CTRLB:1; /*!< bit:      2  CTRLB Synchronization Busy         */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t LENGTH:1; /*!< bit:      4  LENGTH Synchronization Busy        */
    uint32_t :27; /*!< bit:  5..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_SYNCBUSY_Type;
# 1248 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_SYNCBUSY : (SERCOM Offset: 0x1C) (R/  32) USART USART Synchronization Busy -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset Synchronization Busy */
    uint32_t ENABLE:1; /*!< bit:      1  SERCOM Enable Synchronization Busy */
    uint32_t CTRLB:1; /*!< bit:      2  CTRLB Synchronization Busy         */
    uint32_t RXERRCNT:1; /*!< bit:      3  RXERRCNT Synchronization Busy      */
    uint32_t LENGTH:1; /*!< bit:      4  LENGTH Synchronization Busy        */
    uint32_t :27; /*!< bit:  5..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_USART_SYNCBUSY_Type;
# 1278 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_RXERRCNT : (SERCOM Offset: 0x20) (R/   8) USART USART Receive Error Count -------- */

typedef union {
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_USART_RXERRCNT_Type;






/* -------- SERCOM_I2CS_LENGTH : (SERCOM Offset: 0x22) (R/W 16) I2CS I2CS Length -------- */

typedef union {
  struct {
    uint16_t LEN:8; /*!< bit:  0.. 7  Data Length                        */
    uint16_t LENEN:1; /*!< bit:      8  Data Length Enable                 */
    uint16_t :7; /*!< bit:  9..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SERCOM_I2CS_LENGTH_Type;
# 1311 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_LENGTH : (SERCOM Offset: 0x22) (R/W 16) SPI SPI Length -------- */

typedef union {
  struct {
    uint16_t LEN:8; /*!< bit:  0.. 7  Data Length                        */
    uint16_t LENEN:1; /*!< bit:      8  Data Length Enable                 */
    uint16_t :7; /*!< bit:  9..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_LENGTH_Type;
# 1333 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_LENGTH : (SERCOM Offset: 0x22) (R/W 16) USART USART Length -------- */

typedef union {
  struct {
    uint16_t LEN:8; /*!< bit:  0.. 7  Data Length                        */
    uint16_t LENEN:2; /*!< bit:  8.. 9  Data Length Enable                 */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} SERCOM_USART_LENGTH_Type;
# 1356 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CM_ADDR : (SERCOM Offset: 0x24) (R/W 32) I2CM I2CM Address -------- */

typedef union {
  struct {
    uint32_t ADDR:11; /*!< bit:  0..10  Address Value                      */
    uint32_t :2; /*!< bit: 11..12  Reserved                           */
    uint32_t LENEN:1; /*!< bit:     13  Length Enable                      */
    uint32_t HS:1; /*!< bit:     14  High Speed Mode                    */
    uint32_t TENBITEN:1; /*!< bit:     15  Ten Bit Addressing Enable          */
    uint32_t LEN:8; /*!< bit: 16..23  Length                             */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CM_ADDR_Type;
# 1389 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CS_ADDR : (SERCOM Offset: 0x24) (R/W 32) I2CS I2CS Address -------- */

typedef union {
  struct {
    uint32_t GENCEN:1; /*!< bit:      0  General Call Address Enable        */
    uint32_t ADDR:10; /*!< bit:  1..10  Address Value                      */
    uint32_t :4; /*!< bit: 11..14  Reserved                           */
    uint32_t TENBITEN:1; /*!< bit:     15  Ten Bit Addressing Enable          */
    uint32_t :1; /*!< bit:     16  Reserved                           */
    uint32_t ADDRMASK:10; /*!< bit: 17..26  Address Mask                       */
    uint32_t :5; /*!< bit: 27..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CS_ADDR_Type;
# 1420 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_ADDR : (SERCOM Offset: 0x24) (R/W 32) SPI SPI Address -------- */

typedef union {
  struct {
    uint32_t ADDR:8; /*!< bit:  0.. 7  Address Value                      */
    uint32_t :8; /*!< bit:  8..15  Reserved                           */
    uint32_t ADDRMASK:8; /*!< bit: 16..23  Address Mask                       */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_ADDR_Type;
# 1444 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CM_DATA : (SERCOM Offset: 0x28) (R/W 32) I2CM I2CM Data -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  Data Value                         */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CM_DATA_Type;
# 1462 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CS_DATA : (SERCOM Offset: 0x28) (R/W 32) I2CS I2CS Data -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  Data Value                         */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_I2CS_DATA_Type;
# 1480 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_DATA : (SERCOM Offset: 0x28) (R/W 32) SPI SPI Data -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  Data Value                         */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_DATA_Type;
# 1498 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_DATA : (SERCOM Offset: 0x28) (R/W 32) USART USART Data -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  Data Value                         */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SERCOM_USART_DATA_Type;
# 1516 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_I2CM_DBGCTRL : (SERCOM Offset: 0x30) (R/W  8) I2CM I2CM Debug Control -------- */

typedef union {
  struct {
    uint8_t DBGSTOP:1; /*!< bit:      0  Debug Mode                         */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_I2CM_DBGCTRL_Type;
# 1534 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_SPI_DBGCTRL : (SERCOM Offset: 0x30) (R/W  8) SPI SPI Debug Control -------- */

typedef union {
  struct {
    uint8_t DBGSTOP:1; /*!< bit:      0  Debug Mode                         */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_SPI_DBGCTRL_Type;
# 1552 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/* -------- SERCOM_USART_DBGCTRL : (SERCOM Offset: 0x30) (R/W  8) USART USART Debug Control -------- */

typedef union {
  struct {
    uint8_t DBGSTOP:1; /*!< bit:      0  Debug Mode                         */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} SERCOM_USART_DBGCTRL_Type;
# 1570 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/sercom.h"
/** \brief SERCOM_I2CM hardware registers */

typedef struct { /* I2C Master Mode */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CM_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 32) I2CM Control A */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CM_CTRLB_Type CTRLB; /**< \brief Offset: 0x04 (R/W 32) I2CM Control B */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CM_CTRLC_Type CTRLC; /**< \brief Offset: 0x08 (R/W 32) I2CM Control C */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CM_BAUD_Type BAUD; /**< \brief Offset: 0x0C (R/W 32) I2CM Baud Rate */
       RoReg8 Reserved1[0x4];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CM_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x14 (R/W  8) I2CM Interrupt Enable Clear */
       RoReg8 Reserved2[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CM_INTENSET_Type INTENSET; /**< \brief Offset: 0x16 (R/W  8) I2CM Interrupt Enable Set */
       RoReg8 Reserved3[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CM_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x18 (R/W  8) I2CM Interrupt Flag Status and Clear */
       RoReg8 Reserved4[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CM_STATUS_Type STATUS; /**< \brief Offset: 0x1A (R/W 16) I2CM Status */
  volatile /*!< Defines 'read only' permissions */ SERCOM_I2CM_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x1C (R/  32) I2CM Synchronization Busy */
       RoReg8 Reserved5[0x4];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CM_ADDR_Type ADDR; /**< \brief Offset: 0x24 (R/W 32) I2CM Address */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CM_DATA_Type DATA; /**< \brief Offset: 0x28 (R/W 32) I2CM Data */
       RoReg8 Reserved6[0x4];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CM_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x30 (R/W  8) I2CM Debug Control */
} SercomI2cm;


/** \brief SERCOM_I2CS hardware registers */

typedef struct { /* I2C Slave Mode */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CS_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 32) I2CS Control A */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CS_CTRLB_Type CTRLB; /**< \brief Offset: 0x04 (R/W 32) I2CS Control B */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CS_CTRLC_Type CTRLC; /**< \brief Offset: 0x08 (R/W 32) I2CS Control C */
       RoReg8 Reserved1[0x8];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CS_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x14 (R/W  8) I2CS Interrupt Enable Clear */
       RoReg8 Reserved2[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CS_INTENSET_Type INTENSET; /**< \brief Offset: 0x16 (R/W  8) I2CS Interrupt Enable Set */
       RoReg8 Reserved3[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CS_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x18 (R/W  8) I2CS Interrupt Flag Status and Clear */
       RoReg8 Reserved4[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CS_STATUS_Type STATUS; /**< \brief Offset: 0x1A (R/W 16) I2CS Status */
  volatile /*!< Defines 'read only' permissions */ SERCOM_I2CS_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x1C (R/  32) I2CS Synchronization Busy */
       RoReg8 Reserved5[0x2];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CS_LENGTH_Type LENGTH; /**< \brief Offset: 0x22 (R/W 16) I2CS Length */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CS_ADDR_Type ADDR; /**< \brief Offset: 0x24 (R/W 32) I2CS Address */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_I2CS_DATA_Type DATA; /**< \brief Offset: 0x28 (R/W 32) I2CS Data */
} SercomI2cs;


/** \brief SERCOM_SPI hardware registers */

typedef struct { /* SPI Mode */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_SPI_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 32) SPI Control A */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_SPI_CTRLB_Type CTRLB; /**< \brief Offset: 0x04 (R/W 32) SPI Control B */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_SPI_CTRLC_Type CTRLC; /**< \brief Offset: 0x08 (R/W 32) SPI Control C */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_SPI_BAUD_Type BAUD; /**< \brief Offset: 0x0C (R/W  8) SPI Baud Rate */
       RoReg8 Reserved1[0x7];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_SPI_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x14 (R/W  8) SPI Interrupt Enable Clear */
       RoReg8 Reserved2[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_SPI_INTENSET_Type INTENSET; /**< \brief Offset: 0x16 (R/W  8) SPI Interrupt Enable Set */
       RoReg8 Reserved3[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_SPI_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x18 (R/W  8) SPI Interrupt Flag Status and Clear */
       RoReg8 Reserved4[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_SPI_STATUS_Type STATUS; /**< \brief Offset: 0x1A (R/W 16) SPI Status */
  volatile /*!< Defines 'read only' permissions */ SERCOM_SPI_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x1C (R/  32) SPI Synchronization Busy */
       RoReg8 Reserved5[0x2];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_SPI_LENGTH_Type LENGTH; /**< \brief Offset: 0x22 (R/W 16) SPI Length */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_SPI_ADDR_Type ADDR; /**< \brief Offset: 0x24 (R/W 32) SPI Address */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_SPI_DATA_Type DATA; /**< \brief Offset: 0x28 (R/W 32) SPI Data */
       RoReg8 Reserved6[0x4];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_SPI_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x30 (R/W  8) SPI Debug Control */
} SercomSpi;


/** \brief SERCOM_USART hardware registers */

typedef struct { /* USART Mode */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_USART_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 32) USART Control A */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_USART_CTRLB_Type CTRLB; /**< \brief Offset: 0x04 (R/W 32) USART Control B */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_USART_CTRLC_Type CTRLC; /**< \brief Offset: 0x08 (R/W 32) USART Control C */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_USART_BAUD_Type BAUD; /**< \brief Offset: 0x0C (R/W 16) USART Baud Rate */
  volatile /*!< Defines 'read / write' permissions */ SERCOM_USART_RXPL_Type RXPL; /**< \brief Offset: 0x0E (R/W  8) USART Receive Pulse Length */
       RoReg8 Reserved1[0x5];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_USART_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x14 (R/W  8) USART Interrupt Enable Clear */
       RoReg8 Reserved2[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_USART_INTENSET_Type INTENSET; /**< \brief Offset: 0x16 (R/W  8) USART Interrupt Enable Set */
       RoReg8 Reserved3[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_USART_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x18 (R/W  8) USART Interrupt Flag Status and Clear */
       RoReg8 Reserved4[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_USART_STATUS_Type STATUS; /**< \brief Offset: 0x1A (R/W 16) USART Status */
  volatile /*!< Defines 'read only' permissions */ SERCOM_USART_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x1C (R/  32) USART Synchronization Busy */
  volatile /*!< Defines 'read only' permissions */ SERCOM_USART_RXERRCNT_Type RXERRCNT; /**< \brief Offset: 0x20 (R/   8) USART Receive Error Count */
       RoReg8 Reserved5[0x1];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_USART_LENGTH_Type LENGTH; /**< \brief Offset: 0x22 (R/W 16) USART Length */
       RoReg8 Reserved6[0x4];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_USART_DATA_Type DATA; /**< \brief Offset: 0x28 (R/W 32) USART Data */
       RoReg8 Reserved7[0x4];
  volatile /*!< Defines 'read / write' permissions */ SERCOM_USART_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x30 (R/W  8) USART Debug Control */
} SercomUsart;



typedef union {
       SercomI2cm I2CM; /**< \brief Offset: 0x00 I2C Master Mode */
       SercomI2cs I2CS; /**< \brief Offset: 0x00 I2C Slave Mode */
       SercomSpi SPI; /**< \brief Offset: 0x00 SPI Mode */
       SercomUsart USART; /**< \brief Offset: 0x00 USART Mode */
} Sercom;


/*@}*/
# 606 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/supc.h" 1
/**
 * \file
 *
 * \brief Component description for SUPC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR SUPC */
/* ========================================================================== */
/** \addtogroup SAMD51_SUPC Supply Controller */
/*@{*/




/* -------- SUPC_INTENCLR : (SUPC Offset: 0x00) (R/W 32) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint32_t BOD33RDY:1; /*!< bit:      0  BOD33 Ready                        */
    uint32_t BOD33DET:1; /*!< bit:      1  BOD33 Detection                    */
    uint32_t B33SRDY:1; /*!< bit:      2  BOD33 Synchronization Ready        */
    uint32_t BOD12RDY:1; /*!< bit:      3  BOD12 Ready                        */
    uint32_t BOD12DET:1; /*!< bit:      4  BOD12 Detection                    */
    uint32_t B12SRDY:1; /*!< bit:      5  BOD12 Synchronization Ready        */
    uint32_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint32_t VREGRDY:1; /*!< bit:      8  Voltage Regulator Ready            */
    uint32_t :1; /*!< bit:      9  Reserved                           */
    uint32_t VCORERDY:1; /*!< bit:     10  VDDCORE Ready                      */
    uint32_t :21; /*!< bit: 11..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SUPC_INTENCLR_Type;
# 82 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/supc.h"
/* -------- SUPC_INTENSET : (SUPC Offset: 0x04) (R/W 32) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint32_t BOD33RDY:1; /*!< bit:      0  BOD33 Ready                        */
    uint32_t BOD33DET:1; /*!< bit:      1  BOD33 Detection                    */
    uint32_t B33SRDY:1; /*!< bit:      2  BOD33 Synchronization Ready        */
    uint32_t BOD12RDY:1; /*!< bit:      3  BOD12 Ready                        */
    uint32_t BOD12DET:1; /*!< bit:      4  BOD12 Detection                    */
    uint32_t B12SRDY:1; /*!< bit:      5  BOD12 Synchronization Ready        */
    uint32_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint32_t VREGRDY:1; /*!< bit:      8  Voltage Regulator Ready            */
    uint32_t :1; /*!< bit:      9  Reserved                           */
    uint32_t VCORERDY:1; /*!< bit:     10  VDDCORE Ready                      */
    uint32_t :21; /*!< bit: 11..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SUPC_INTENSET_Type;
# 123 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/supc.h"
/* -------- SUPC_INTFLAG : (SUPC Offset: 0x08) (R/W 32) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t BOD33RDY:1; /*!< bit:      0  BOD33 Ready                        */
    volatile /*!< Defines 'read only' permissions */ uint32_t BOD33DET:1; /*!< bit:      1  BOD33 Detection                    */
    volatile /*!< Defines 'read only' permissions */ uint32_t B33SRDY:1; /*!< bit:      2  BOD33 Synchronization Ready        */
    volatile /*!< Defines 'read only' permissions */ uint32_t BOD12RDY:1; /*!< bit:      3  BOD12 Ready                        */
    volatile /*!< Defines 'read only' permissions */ uint32_t BOD12DET:1; /*!< bit:      4  BOD12 Detection                    */
    volatile /*!< Defines 'read only' permissions */ uint32_t B12SRDY:1; /*!< bit:      5  BOD12 Synchronization Ready        */
    volatile /*!< Defines 'read only' permissions */ uint32_t :2; /*!< bit:  6.. 7  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t VREGRDY:1; /*!< bit:      8  Voltage Regulator Ready            */
    volatile /*!< Defines 'read only' permissions */ uint32_t :1; /*!< bit:      9  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t VCORERDY:1; /*!< bit:     10  VDDCORE Ready                      */
    volatile /*!< Defines 'read only' permissions */ uint32_t :21; /*!< bit: 11..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SUPC_INTFLAG_Type;
# 164 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/supc.h"
/* -------- SUPC_STATUS : (SUPC Offset: 0x0C) (R/  32) Power and Clocks Status -------- */

typedef union {
  struct {
    uint32_t BOD33RDY:1; /*!< bit:      0  BOD33 Ready                        */
    uint32_t BOD33DET:1; /*!< bit:      1  BOD33 Detection                    */
    uint32_t B33SRDY:1; /*!< bit:      2  BOD33 Synchronization Ready        */
    uint32_t BOD12RDY:1; /*!< bit:      3  BOD12 Ready                        */
    uint32_t BOD12DET:1; /*!< bit:      4  BOD12 Detection                    */
    uint32_t B12SRDY:1; /*!< bit:      5  BOD12 Synchronization Ready        */
    uint32_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint32_t VREGRDY:1; /*!< bit:      8  Voltage Regulator Ready            */
    uint32_t :1; /*!< bit:      9  Reserved                           */
    uint32_t VCORERDY:1; /*!< bit:     10  VDDCORE Ready                      */
    uint32_t :21; /*!< bit: 11..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SUPC_STATUS_Type;
# 205 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/supc.h"
/* -------- SUPC_BOD33 : (SUPC Offset: 0x10) (R/W 32) BOD33 Control -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t ACTION:2; /*!< bit:  2.. 3  Action when Threshold Crossed      */
    uint32_t STDBYCFG:1; /*!< bit:      4  Configuration in Standby mode      */
    uint32_t RUNSTDBY:1; /*!< bit:      5  Run in Standby mode                */
    uint32_t RUNHIB:1; /*!< bit:      6  Run in Hibernate mode              */
    uint32_t RUNBKUP:1; /*!< bit:      7  Run in Backup mode                 */
    uint32_t HYST:4; /*!< bit:  8..11  Hysteresis value                   */
    uint32_t PSEL:3; /*!< bit: 12..14  Prescaler Select                   */
    uint32_t :1; /*!< bit:     15  Reserved                           */
    uint32_t LEVEL:8; /*!< bit: 16..23  Threshold Level for VDD            */
    uint32_t VBATLEVEL:8; /*!< bit: 24..31  Threshold Level in battery backup sleep mode for VBAT */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SUPC_BOD33_Type;
# 280 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/supc.h"
/* -------- SUPC_BOD12 : (SUPC Offset: 0x14) (R/W 32) BOD12 Control -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t HYST:1; /*!< bit:      2  Hysteresis Enable                  */
    uint32_t ACTION:2; /*!< bit:  3.. 4  Action when Threshold Crossed      */
    uint32_t STDBYCFG:1; /*!< bit:      5  Configuration in Standby mode      */
    uint32_t RUNSTDBY:1; /*!< bit:      6  Run during Standby                 */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t ACTCFG:1; /*!< bit:      8  Configuration in Active mode       */
    uint32_t :3; /*!< bit:  9..11  Reserved                           */
    uint32_t PSEL:4; /*!< bit: 12..15  Prescaler Select                   */
    uint32_t LEVEL:6; /*!< bit: 16..21  Threshold Level                    */
    uint32_t :10; /*!< bit: 22..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SUPC_BOD12_Type;
# 363 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/supc.h"
/* -------- SUPC_VREG : (SUPC Offset: 0x18) (R/W 32) VREG Control -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t SEL:1; /*!< bit:      2  Voltage Regulator Selection        */
    uint32_t :4; /*!< bit:  3.. 6  Reserved                           */
    uint32_t RUNBKUP:1; /*!< bit:      7  Run in Backup mode                 */
    uint32_t :8; /*!< bit:  8..15  Reserved                           */
    uint32_t VSEN:1; /*!< bit:     16  Voltage Scaling Enable             */
    uint32_t :7; /*!< bit: 17..23  Reserved                           */
    uint32_t VSPER:3; /*!< bit: 24..26  Voltage Scaling Period             */
    uint32_t :5; /*!< bit: 27..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SUPC_VREG_Type;
# 402 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/supc.h"
/* -------- SUPC_VREF : (SUPC Offset: 0x1C) (R/W 32) VREF Control -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t TSEN:1; /*!< bit:      1  Temperature Sensor Output Enable   */
    uint32_t VREFOE:1; /*!< bit:      2  Voltage Reference Output Enable    */
    uint32_t TSSEL:1; /*!< bit:      3  Temperature Sensor Selection       */
    uint32_t :2; /*!< bit:  4.. 5  Reserved                           */
    uint32_t RUNSTDBY:1; /*!< bit:      6  Run during Standby                 */
    uint32_t ONDEMAND:1; /*!< bit:      7  On Demand Contrl                   */
    uint32_t :8; /*!< bit:  8..15  Reserved                           */
    uint32_t SEL:4; /*!< bit: 16..19  Voltage Reference Selection        */
    uint32_t :12; /*!< bit: 20..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SUPC_VREF_Type;
# 455 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/supc.h"
/* -------- SUPC_BBPS : (SUPC Offset: 0x20) (R/W 32) Battery Backup Power Switch -------- */

typedef union {
  struct {
    uint32_t CONF:1; /*!< bit:      0  Battery Backup Configuration       */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t WAKEEN:1; /*!< bit:      2  Wake Enable                        */
    uint32_t :29; /*!< bit:  3..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SUPC_BBPS_Type;
# 481 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/supc.h"
/* -------- SUPC_BKOUT : (SUPC Offset: 0x24) (R/W 32) Backup Output Control -------- */

typedef union {
  struct {
    uint32_t EN:2; /*!< bit:  0.. 1  Enable Output                      */
    uint32_t :6; /*!< bit:  2.. 7  Reserved                           */
    uint32_t CLR:2; /*!< bit:  8.. 9  Clear Output                       */
    uint32_t :6; /*!< bit: 10..15  Reserved                           */
    uint32_t SET:2; /*!< bit: 16..17  Set Output                         */
    uint32_t :6; /*!< bit: 18..23  Reserved                           */
    uint32_t RTCTGL:2; /*!< bit: 24..25  RTC Toggle Output                  */
    uint32_t :6; /*!< bit: 26..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SUPC_BKOUT_Type;
# 515 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/supc.h"
/* -------- SUPC_BKIN : (SUPC Offset: 0x28) (R/  32) Backup Input Control -------- */

typedef union {
  struct {
    uint32_t BKIN:8; /*!< bit:  0.. 7  Backup Input Value                 */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} SUPC_BKIN_Type;
# 534 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/supc.h"
/** \brief SUPC hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ SUPC_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x00 (R/W 32) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ SUPC_INTENSET_Type INTENSET; /**< \brief Offset: 0x04 (R/W 32) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ SUPC_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x08 (R/W 32) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read only' permissions */ SUPC_STATUS_Type STATUS; /**< \brief Offset: 0x0C (R/  32) Power and Clocks Status */
  volatile /*!< Defines 'read / write' permissions */ SUPC_BOD33_Type BOD33; /**< \brief Offset: 0x10 (R/W 32) BOD33 Control */
  volatile /*!< Defines 'read / write' permissions */ SUPC_BOD12_Type BOD12; /**< \brief Offset: 0x14 (R/W 32) BOD12 Control */
  volatile /*!< Defines 'read / write' permissions */ SUPC_VREG_Type VREG; /**< \brief Offset: 0x18 (R/W 32) VREG Control */
  volatile /*!< Defines 'read / write' permissions */ SUPC_VREF_Type VREF; /**< \brief Offset: 0x1C (R/W 32) VREF Control */
  volatile /*!< Defines 'read / write' permissions */ SUPC_BBPS_Type BBPS; /**< \brief Offset: 0x20 (R/W 32) Battery Backup Power Switch */
  volatile /*!< Defines 'read / write' permissions */ SUPC_BKOUT_Type BKOUT; /**< \brief Offset: 0x24 (R/W 32) Backup Output Control */
  volatile /*!< Defines 'read only' permissions */ SUPC_BKIN_Type BKIN; /**< \brief Offset: 0x28 (R/  32) Backup Input Control */
} Supc;


/*@}*/
# 607 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h" 1
/**
 * \file
 *
 * \brief Component description for TAL
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR TAL */
/* ========================================================================== */
/** \addtogroup SAMD51_TAL Trigger Allocator */
/*@{*/




/* -------- TAL_CTRLA : (TAL Offset: 0x000) (R/W  8) Control A -------- */

typedef union {
  struct {
    uint8_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint8_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TAL_CTRLA_Type;
# 62 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_EXTCTRL : (TAL Offset: 0x001) (R/W  8) External Break Control -------- */

typedef union {
  struct {
    uint8_t ENABLE:1; /*!< bit:      0  Enable BRK Pin                     */
    uint8_t INV:1; /*!< bit:      1  Invert BRK Pin                     */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TAL_EXTCTRL_Type;
# 83 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_EVCTRL : (TAL Offset: 0x004) (R/W 16) Event Control -------- */

typedef union {
  struct {
    uint16_t BRKEI:1; /*!< bit:      0  Break Input Event Enable           */
    uint16_t BRKEO:1; /*!< bit:      1  Break Output Event Enable          */
    uint16_t IRQMONEO0:1; /*!< bit:      2  Interrupt Request Monitor 0 Output Event Enable */
    uint16_t :13; /*!< bit:  3..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint16_t IRQMONEO:1; /*!< bit:      2  Interrupt Request Monitor x Output Event Enable */
    uint16_t :13; /*!< bit:  3..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} TAL_EVCTRL_Type;
# 115 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_INTENCLR : (TAL Offset: 0x008) (R/W  8) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t BRK:1; /*!< bit:      0  Break Interrupt Enable             */
    uint8_t IPS0:1; /*!< bit:      1  Inter-Processor Signal Interrupt Enable for CPU 0 */
    uint8_t IPS1:1; /*!< bit:      2  Inter-Processor Signal Interrupt Enable for CPU 1 */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t :1; /*!< bit:      0  Reserved                           */
    uint8_t IPS:2; /*!< bit:  1.. 2  Inter-Processor Signal Interrupt Enable for CPU x */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TAL_INTENCLR_Type;
# 147 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_INTENSET : (TAL Offset: 0x009) (R/W  8) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t BRK:1; /*!< bit:      0  Break Interrupt Enable             */
    uint8_t IPS0:1; /*!< bit:      1  Inter-Processor Signal Interrupt Enable for CPU 0 */
    uint8_t IPS1:1; /*!< bit:      2  Inter-Processor Signal Interrupt Enable for CPU 1 */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t :1; /*!< bit:      0  Reserved                           */
    uint8_t IPS:2; /*!< bit:  1.. 2  Inter-Processor Signal Interrupt Enable for CPU x */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TAL_INTENSET_Type;
# 179 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_INTFLAG : (TAL Offset: 0x00A) (R/W  8) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t BRK:1; /*!< bit:      0  Break                              */
    volatile /*!< Defines 'read only' permissions */ uint8_t IPS0:1; /*!< bit:      1  Inter-Processor Signal for CPU 0   */
    volatile /*!< Defines 'read only' permissions */ uint8_t IPS1:1; /*!< bit:      2  Inter-Processor Signal for CPU 1   */
    volatile /*!< Defines 'read only' permissions */ uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t :1; /*!< bit:      0  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t IPS:2; /*!< bit:  1.. 2  Inter-Processor Signal for CPU x   */
    volatile /*!< Defines 'read only' permissions */ uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TAL_INTFLAG_Type;
# 211 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_GLOBMASK : (TAL Offset: 0x00B) (R/W  8) Global Break Requests Mask -------- */

typedef union {
  struct {
    uint8_t CPU0:1; /*!< bit:      0  CPU 0 Break Master                 */
    uint8_t CPU1:1; /*!< bit:      1  CPU 1 Break Master                 */
    uint8_t :4; /*!< bit:  2.. 5  Reserved                           */
    uint8_t EVBRK:1; /*!< bit:      6  Event Break Master                 */
    uint8_t EXTBRK:1; /*!< bit:      7  External Break Master              */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t CPU:2; /*!< bit:  0.. 1  CPU x Break Master                 */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TAL_GLOBMASK_Type;
# 245 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_HALT : (TAL Offset: 0x00C) ( /W  8) Debug Halt Request -------- */

typedef union {
  struct {
    uint8_t CPU0:1; /*!< bit:      0  CPU 0 Break Master                 */
    uint8_t CPU1:1; /*!< bit:      1  CPU 1 Break Master                 */
    uint8_t :4; /*!< bit:  2.. 5  Reserved                           */
    uint8_t EVBRK:1; /*!< bit:      6  Event Break Master                 */
    uint8_t EXTBRK:1; /*!< bit:      7  External Break Master              */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t CPU:2; /*!< bit:  0.. 1  CPU x Break Master                 */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TAL_HALT_Type;
# 279 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_RESTART : (TAL Offset: 0x00D) ( /W  8) Debug Restart Request -------- */

typedef union {
  struct {
    uint8_t CPU0:1; /*!< bit:      0  CPU 0 Break Master                 */
    uint8_t CPU1:1; /*!< bit:      1  CPU 1 Break Master                 */
    uint8_t :5; /*!< bit:  2.. 6  Reserved                           */
    uint8_t EXTBRK:1; /*!< bit:      7  External Break Master              */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t CPU:2; /*!< bit:  0.. 1  CPU x Break Master                 */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TAL_RESTART_Type;
# 310 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_BRKSTATUS : (TAL Offset: 0x00E) (R/  16) Break Request Status -------- */

typedef union {
  struct {
    uint16_t CPU0:2; /*!< bit:  0.. 1  CPU 0 Break Request                */
    uint16_t CPU1:2; /*!< bit:  2.. 3  CPU 1 Break Request                */
    uint16_t :8; /*!< bit:  4..11  Reserved                           */
    uint16_t EVBRK:2; /*!< bit: 12..13  Event Break Request                */
    uint16_t EXTBRK:2; /*!< bit: 14..15  External Break Request             */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} TAL_BRKSTATUS_Type;
# 341 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_CTICTRLA : (TAL Offset: 0x010) (R/W  8) CTIS Cross-Trigger Interface n Control A -------- */

typedef union {
  struct {
    uint8_t BRK:2; /*!< bit:  0.. 1  Action when global break issued    */
    uint8_t RESTART:1; /*!< bit:      2  Action when global restart issued  */
    uint8_t IPS:1; /*!< bit:      3  Action when inter-process resource freed */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TAL_CTICTRLA_Type;
# 380 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_CTIMASK : (TAL Offset: 0x011) (R/W  8) CTIS Cross-Trigger Interface n Mask -------- */

typedef union {
  struct {
    uint8_t CPU0:1; /*!< bit:      0  CPU 0 Break Master                 */
    uint8_t CPU1:1; /*!< bit:      1  CPU 1 Break Master                 */
    uint8_t :4; /*!< bit:  2.. 5  Reserved                           */
    uint8_t EVBRK:1; /*!< bit:      6  Event Break Master                 */
    uint8_t EXTBRK:1; /*!< bit:      7  External Break Master              */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t CPU:2; /*!< bit:  0.. 1  CPU x Break Master                 */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TAL_CTIMASK_Type;
# 414 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_INTSTATUS : (TAL Offset: 0x020) (R/   8) Interrupt n Status -------- */

typedef union {
  struct {
    uint8_t IRQ0:1; /*!< bit:      0  Interrupt Status for Interrupt Request 0 within Interrupt n */
    uint8_t IRQ1:1; /*!< bit:      1  Interrupt Status for Interrupt Request 1 within Interrupt n */
    uint8_t IRQ2:1; /*!< bit:      2  Interrupt Status for Interrupt Request 2 within Interrupt n */
    uint8_t IRQ3:1; /*!< bit:      3  Interrupt Status for Interrupt Request 3 within Interrupt n */
    uint8_t IRQ4:1; /*!< bit:      4  Interrupt Status for Interrupt Request 4 within Interrupt n */
    uint8_t IRQ5:1; /*!< bit:      5  Interrupt Status for Interrupt Request 5 within Interrupt n */
    uint8_t IRQ6:1; /*!< bit:      6  Interrupt Status for Interrupt Request 6 within Interrupt n */
    uint8_t IRQ7:1; /*!< bit:      7  Interrupt Status for Interrupt Request 7 within Interrupt n */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t IRQ:8; /*!< bit:  0.. 7  Interrupt Status for Interrupt Request x within Interrupt n */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TAL_INTSTATUS_Type;
# 458 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_DMACPUSEL0 : (TAL Offset: 0x110) (R/W 32) DMA Channel Interrupts CPU Select 0 -------- */

typedef union {
  struct {
    uint32_t CH0:1; /*!< bit:      0  DMA Channel 0 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t CH1:1; /*!< bit:      2  DMA Channel 1 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t CH2:1; /*!< bit:      4  DMA Channel 2 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      5  Reserved                           */
    uint32_t CH3:1; /*!< bit:      6  DMA Channel 3 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t CH4:1; /*!< bit:      8  DMA Channel 4 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      9  Reserved                           */
    uint32_t CH5:1; /*!< bit:     10  DMA Channel 5 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t CH6:1; /*!< bit:     12  DMA Channel 6 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     13  Reserved                           */
    uint32_t CH7:1; /*!< bit:     14  DMA Channel 7 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     15  Reserved                           */
    uint32_t CH8:1; /*!< bit:     16  DMA Channel 8 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     17  Reserved                           */
    uint32_t CH9:1; /*!< bit:     18  DMA Channel 9 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     19  Reserved                           */
    uint32_t CH10:1; /*!< bit:     20  DMA Channel 10 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     21  Reserved                           */
    uint32_t CH11:1; /*!< bit:     22  DMA Channel 11 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     23  Reserved                           */
    uint32_t CH12:1; /*!< bit:     24  DMA Channel 12 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     25  Reserved                           */
    uint32_t CH13:1; /*!< bit:     26  DMA Channel 13 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     27  Reserved                           */
    uint32_t CH14:1; /*!< bit:     28  DMA Channel 14 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     29  Reserved                           */
    uint32_t CH15:1; /*!< bit:     30  DMA Channel 15 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_DMACPUSEL0_Type;
# 552 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_DMACPUSEL1 : (TAL Offset: 0x114) (R/W 32) DMA Channel Interrupts CPU Select 1 -------- */

typedef union {
  struct {
    uint32_t CH16:1; /*!< bit:      0  DMA Channel 16 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t CH17:1; /*!< bit:      2  DMA Channel 17 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t CH18:1; /*!< bit:      4  DMA Channel 18 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      5  Reserved                           */
    uint32_t CH19:1; /*!< bit:      6  DMA Channel 19 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t CH20:1; /*!< bit:      8  DMA Channel 20 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      9  Reserved                           */
    uint32_t CH21:1; /*!< bit:     10  DMA Channel 21 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t CH22:1; /*!< bit:     12  DMA Channel 22 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     13  Reserved                           */
    uint32_t CH23:1; /*!< bit:     14  DMA Channel 23 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     15  Reserved                           */
    uint32_t CH24:1; /*!< bit:     16  DMA Channel 24 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     17  Reserved                           */
    uint32_t CH25:1; /*!< bit:     18  DMA Channel 25 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     19  Reserved                           */
    uint32_t CH26:1; /*!< bit:     20  DMA Channel 26 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     21  Reserved                           */
    uint32_t CH27:1; /*!< bit:     22  DMA Channel 27 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     23  Reserved                           */
    uint32_t CH28:1; /*!< bit:     24  DMA Channel 28 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     25  Reserved                           */
    uint32_t CH29:1; /*!< bit:     26  DMA Channel 29 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     27  Reserved                           */
    uint32_t CH30:1; /*!< bit:     28  DMA Channel 30 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     29  Reserved                           */
    uint32_t CH31:1; /*!< bit:     30  DMA Channel 31 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_DMACPUSEL1_Type;
# 646 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_EVCPUSEL0 : (TAL Offset: 0x118) (R/W 32) EVSYS Channel Interrupts CPU Select 0 -------- */

typedef union {
  struct {
    uint32_t CH0:1; /*!< bit:      0  Event Channel 0 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t CH1:1; /*!< bit:      2  Event Channel 1 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t CH2:1; /*!< bit:      4  Event Channel 2 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      5  Reserved                           */
    uint32_t CH3:1; /*!< bit:      6  Event Channel 3 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t CH4:1; /*!< bit:      8  Event Channel 4 Interrupt CPU Select */
    uint32_t :1; /*!< bit:      9  Reserved                           */
    uint32_t CH5:1; /*!< bit:     10  Event Channel 5 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t CH6:1; /*!< bit:     12  Event Channel 6 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     13  Reserved                           */
    uint32_t CH7:1; /*!< bit:     14  Event Channel 7 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     15  Reserved                           */
    uint32_t CH8:1; /*!< bit:     16  Event Channel 8 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     17  Reserved                           */
    uint32_t CH9:1; /*!< bit:     18  Event Channel 9 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     19  Reserved                           */
    uint32_t CH10:1; /*!< bit:     20  Event Channel 10 Interrupt CPU Select */
    uint32_t :1; /*!< bit:     21  Reserved                           */
    uint32_t CH11:1; /*!< bit:     22  Event Channel 11 Interrupt CPU Select */
    uint32_t :9; /*!< bit: 23..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_EVCPUSEL0_Type;
# 720 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_EICCPUSEL0 : (TAL Offset: 0x120) (R/W 32) EIC External Interrupts CPU Select 0 -------- */

typedef union {
  struct {
    uint32_t EXTINT0:1; /*!< bit:      0  External Interrupt 0 CPU Select    */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t EXTINT1:1; /*!< bit:      2  External Interrupt 1 CPU Select    */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t EXTINT2:1; /*!< bit:      4  External Interrupt 2 CPU Select    */
    uint32_t :1; /*!< bit:      5  Reserved                           */
    uint32_t EXTINT3:1; /*!< bit:      6  External Interrupt 3 CPU Select    */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t EXTINT4:1; /*!< bit:      8  External Interrupt 4 CPU Select    */
    uint32_t :1; /*!< bit:      9  Reserved                           */
    uint32_t EXTINT5:1; /*!< bit:     10  External Interrupt 5 CPU Select    */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t EXTINT6:1; /*!< bit:     12  External Interrupt 6 CPU Select    */
    uint32_t :1; /*!< bit:     13  Reserved                           */
    uint32_t EXTINT7:1; /*!< bit:     14  External Interrupt 7 CPU Select    */
    uint32_t :1; /*!< bit:     15  Reserved                           */
    uint32_t EXTINT8:1; /*!< bit:     16  External Interrupt 8 CPU Select    */
    uint32_t :1; /*!< bit:     17  Reserved                           */
    uint32_t EXTINT9:1; /*!< bit:     18  External Interrupt 9 CPU Select    */
    uint32_t :1; /*!< bit:     19  Reserved                           */
    uint32_t EXTINT10:1; /*!< bit:     20  External Interrupt 10 CPU Select   */
    uint32_t :1; /*!< bit:     21  Reserved                           */
    uint32_t EXTINT11:1; /*!< bit:     22  External Interrupt 11 CPU Select   */
    uint32_t :1; /*!< bit:     23  Reserved                           */
    uint32_t EXTINT12:1; /*!< bit:     24  External Interrupt 12 CPU Select   */
    uint32_t :1; /*!< bit:     25  Reserved                           */
    uint32_t EXTINT13:1; /*!< bit:     26  External Interrupt 13 CPU Select   */
    uint32_t :1; /*!< bit:     27  Reserved                           */
    uint32_t EXTINT14:1; /*!< bit:     28  External Interrupt 14 CPU Select   */
    uint32_t :1; /*!< bit:     29  Reserved                           */
    uint32_t EXTINT15:1; /*!< bit:     30  External Interrupt 15 CPU Select   */
    uint32_t :1; /*!< bit:     31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_EICCPUSEL0_Type;
# 814 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_INTCPUSEL0 : (TAL Offset: 0x128) (R/W 32) Interrupts CPU Select 0 -------- */

typedef union {
  struct {
    uint32_t PAC:1; /*!< bit:      0  PAC Interrupt CPU Select           */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t PM:1; /*!< bit:      2  PM Interrupt CPU Select            */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t MCLK:1; /*!< bit:      4  MCLK Interrupt CPU Select          */
    uint32_t :3; /*!< bit:  5.. 7  Reserved                           */
    uint32_t OSCCTRL:1; /*!< bit:      8  OSCCTRL Interrupt CPU Select       */
    uint32_t :1; /*!< bit:      9  Reserved                           */
    uint32_t OSC32KCTRL:1; /*!< bit:     10  OSC32KCTRL Interrupt CPU Select    */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t SUPC:1; /*!< bit:     12  SUPC Interrupt CPU Select          */
    uint32_t :3; /*!< bit: 13..15  Reserved                           */
    uint32_t WDT:1; /*!< bit:     16  WDT Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     17  Reserved                           */
    uint32_t RTC:1; /*!< bit:     18  RTC Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     19  Reserved                           */
    uint32_t EIC:1; /*!< bit:     20  EIC Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     21  Reserved                           */
    uint32_t FREQM:1; /*!< bit:     22  FREQM Interrupt CPU Select         */
    uint32_t :1; /*!< bit:     23  Reserved                           */
    uint32_t SERCOM0:1; /*!< bit:     24  SERCOM0 Interrupt CPU Select       */
    uint32_t :1; /*!< bit:     25  Reserved                           */
    uint32_t SERCOM1:1; /*!< bit:     26  SERCOM1 Interrupt CPU Select       */
    uint32_t :1; /*!< bit:     27  Reserved                           */
    uint32_t TC0:1; /*!< bit:     28  TC0 Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     29  Reserved                           */
    uint32_t TC1:1; /*!< bit:     30  TC1 Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_INTCPUSEL0_Type;
# 898 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_INTCPUSEL1 : (TAL Offset: 0x12C) (R/W 32) Interrupts CPU Select 1 -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} TAL_INTCPUSEL1_Type;






/* -------- TAL_INTCPUSEL2 : (TAL Offset: 0x130) (R/W 32) Interrupts CPU Select 2 -------- */

typedef union {
  struct {
    uint32_t USB:1; /*!< bit:      0  USB Interrupt CPU Select           */
    uint32_t :3; /*!< bit:  1.. 3  Reserved                           */
    uint32_t NVMCTRL:1; /*!< bit:      4  NVMCTRL Interrupt CPU Select       */
    uint32_t :5; /*!< bit:  5.. 9  Reserved                           */
    uint32_t DMAC:1; /*!< bit:     10  DMAC Interrupt CPU Select          */
    uint32_t :3; /*!< bit: 11..13  Reserved                           */
    uint32_t EVSYS:1; /*!< bit:     14  EVSYS Interrupt CPU Select         */
    uint32_t :1; /*!< bit:     15  Reserved                           */
    uint32_t PICOP:1; /*!< bit:     16  PICOP Interrupt CPU Select         */
    uint32_t :1; /*!< bit:     17  Reserved                           */
    uint32_t SERCOM2:1; /*!< bit:     18  SERCOM2 Interrupt CPU Select       */
    uint32_t :1; /*!< bit:     19  Reserved                           */
    uint32_t SERCOM3:1; /*!< bit:     20  SERCOM3 Interrupt CPU Select       */
    uint32_t :1; /*!< bit:     21  Reserved                           */
    uint32_t TCC0:1; /*!< bit:     22  TCC0 Interrupt CPU Select          */
    uint32_t :1; /*!< bit:     23  Reserved                           */
    uint32_t TCC1:1; /*!< bit:     24  TCC1 Interrupt CPU Select          */
    uint32_t :1; /*!< bit:     25  Reserved                           */
    uint32_t TC2:1; /*!< bit:     26  TC2 Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     27  Reserved                           */
    uint32_t TC3:1; /*!< bit:     28  TC3 Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     29  Reserved                           */
    uint32_t TAL:1; /*!< bit:     30  TAL Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_INTCPUSEL2_Type;
# 983 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_INTCPUSEL3 : (TAL Offset: 0x134) (R/W 32) Interrupts CPU Select 3 -------- */

typedef union {
  struct {
    uint32_t RAMECC:1; /*!< bit:      0  RAMECC Interrupt CPU Select        */
    uint32_t :31; /*!< bit:  1..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_INTCPUSEL3_Type;
# 1002 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_INTCPUSEL4 : (TAL Offset: 0x138) (R/W 32) Interrupts CPU Select 4 -------- */

typedef union {
  struct {
    uint32_t CAN0:1; /*!< bit:      0  CAN0 Interrupt CPU Select          */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t CAN1:1; /*!< bit:      2  CAN1 Interrupt CPU Select          */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t GMAC:1; /*!< bit:      4  GMAC Interrupt CPU Select          */
    uint32_t :1; /*!< bit:      5  Reserved                           */
    uint32_t TCC2:1; /*!< bit:      6  TCC2 Interrupt CPU Select          */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t TCC3:1; /*!< bit:      8  TCC3 Interrupt CPU Select          */
    uint32_t :1; /*!< bit:      9  Reserved                           */
    uint32_t TC4:1; /*!< bit:     10  TC4 Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t TC5:1; /*!< bit:     12  TC5 Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     13  Reserved                           */
    uint32_t PDEC:1; /*!< bit:     14  PDEC Interrupt CPU Select          */
    uint32_t :1; /*!< bit:     15  Reserved                           */
    uint32_t AC:1; /*!< bit:     16  AC Interrupt CPU Select            */
    uint32_t :1; /*!< bit:     17  Reserved                           */
    uint32_t AES:1; /*!< bit:     18  AES Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     19  Reserved                           */
    uint32_t TRNG:1; /*!< bit:     20  TRNG Interrupt CPU Select          */
    uint32_t :1; /*!< bit:     21  Reserved                           */
    uint32_t ICM:1; /*!< bit:     22  ICM Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     23  Reserved                           */
    uint32_t PUKCC:1; /*!< bit:     24  PUKCC Interrupt CPU Select         */
    uint32_t :1; /*!< bit:     25  Reserved                           */
    uint32_t QSPI:1; /*!< bit:     26  QSPI Interrupt CPU Select          */
    uint32_t :5; /*!< bit: 27..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_INTCPUSEL4_Type;
# 1086 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_INTCPUSEL5 : (TAL Offset: 0x13C) (R/W 32) Interrupts CPU Select 5 -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} TAL_INTCPUSEL5_Type;






/* -------- TAL_INTCPUSEL6 : (TAL Offset: 0x140) (R/W 32) Interrupts CPU Select 6 -------- */

typedef union {
  struct {
    uint32_t SERCOM4:1; /*!< bit:      0  SERCOM4 Interrupt CPU Select       */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t SERCOM5:1; /*!< bit:      2  SERCOM5 Interrupt CPU Select       */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t SERCOM6:1; /*!< bit:      4  SERCOM6 Interrupt CPU Select       */
    uint32_t :1; /*!< bit:      5  Reserved                           */
    uint32_t SERCOM7:1; /*!< bit:      6  SERCOM7 Interrupt CPU Select       */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t TCC4:1; /*!< bit:      8  TCC4 Interrupt CPU Select          */
    uint32_t :1; /*!< bit:      9  Reserved                           */
    uint32_t TC6:1; /*!< bit:     10  TC6 Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t TC7:1; /*!< bit:     12  TC7 Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     13  Reserved                           */
    uint32_t ADC0:1; /*!< bit:     14  ADC0 Interrupt CPU Select          */
    uint32_t :1; /*!< bit:     15  Reserved                           */
    uint32_t ADC1:1; /*!< bit:     16  ADC1 Interrupt CPU Select          */
    uint32_t :1; /*!< bit:     17  Reserved                           */
    uint32_t DAC:1; /*!< bit:     18  DAC Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     19  Reserved                           */
    uint32_t I2S:1; /*!< bit:     20  I2S Interrupt CPU Select           */
    uint32_t :1; /*!< bit:     21  Reserved                           */
    uint32_t PCC:1; /*!< bit:     22  PCC Interrupt CPU Select           */
    uint32_t :9; /*!< bit: 23..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_INTCPUSEL6_Type;
# 1171 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_INTCPUSEL7 : (TAL Offset: 0x144) (R/W 32) Interrupts CPU Select 7 -------- */

typedef union {
  uint32_t reg; /*!< Type      used for register access              */
} TAL_INTCPUSEL7_Type;






/* -------- TAL_INTCPUSEL8 : (TAL Offset: 0x148) (R/W 32) Interrupts CPU Select 8 -------- */

typedef union {
  struct {
    uint32_t SDHC0:1; /*!< bit:      0  SDHC0 Interrupt CPU Select         */
    uint32_t :1; /*!< bit:      1  Reserved                           */
    uint32_t SDHC1:1; /*!< bit:      2  SDHC1 Interrupt CPU Select         */
    uint32_t :29; /*!< bit:  3..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_INTCPUSEL8_Type;
# 1206 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_IRQTRIG : (TAL Offset: 0x164) (R/W 32) Interrupt Trigger -------- */

typedef union {
  struct {
    uint32_t ENABLE:1; /*!< bit:      0  Trigger Enable                     */
    uint32_t :7; /*!< bit:  1.. 7  Reserved                           */
    uint32_t IRQNUM:8; /*!< bit:  8..15  Interrupt Request Number           */
    uint32_t OVERRIDE:8; /*!< bit: 16..23  Interrupt Request Override Value   */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_IRQTRIG_Type;
# 1233 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_IRQMON : (TAL Offset: 0x168) (R/W 16) Interrupt Monitor Select -------- */

typedef union {
  struct {
    uint16_t EXTEND:1; /*!< bit:      0  Extended Interrupt Request         */
    uint16_t DROP:1; /*!< bit:      1  Drop Shortened Events              */
    uint16_t CPUID:1; /*!< bit:      2  ID of CPU currently servicing this IRQ */
    uint16_t :5; /*!< bit:  3.. 7  Reserved                           */
    uint16_t IRQNUM:8; /*!< bit:  8..15  Interrupt Request Number           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} TAL_IRQMON_Type;
# 1266 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_CPUIRQS : (TAL Offset: 0x180) (R/  32) CPUIRQS Interrupt Status m for CPU n -------- */

typedef union {
  struct {
    uint32_t CPUIRQS:32; /*!< bit:  0..31  Interrupt Requests for CPU n       */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_CPUIRQS_Type;
# 1284 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_SMASK : (TAL Offset: 0x200) (R/W 32) SMASKS Inter-Process Signal Mask m for CPU n -------- */

typedef union {
  struct {
    uint32_t IPS0:1; /*!< bit:      0  Inter-Process Signal 0             */
    uint32_t IPS1:1; /*!< bit:      1  Inter-Process Signal 1             */
    uint32_t IPS2:1; /*!< bit:      2  Inter-Process Signal 2             */
    uint32_t IPS3:1; /*!< bit:      3  Inter-Process Signal 3             */
    uint32_t IPS4:1; /*!< bit:      4  Inter-Process Signal 4             */
    uint32_t IPS5:1; /*!< bit:      5  Inter-Process Signal 5             */
    uint32_t IPS6:1; /*!< bit:      6  Inter-Process Signal 6             */
    uint32_t IPS7:1; /*!< bit:      7  Inter-Process Signal 7             */
    uint32_t IPS8:1; /*!< bit:      8  Inter-Process Signal 8             */
    uint32_t IPS9:1; /*!< bit:      9  Inter-Process Signal 9             */
    uint32_t IPS10:1; /*!< bit:     10  Inter-Process Signal 10            */
    uint32_t IPS11:1; /*!< bit:     11  Inter-Process Signal 11            */
    uint32_t IPS12:1; /*!< bit:     12  Inter-Process Signal 12            */
    uint32_t IPS13:1; /*!< bit:     13  Inter-Process Signal 13            */
    uint32_t IPS14:1; /*!< bit:     14  Inter-Process Signal 14            */
    uint32_t IPS15:1; /*!< bit:     15  Inter-Process Signal 15            */
    uint32_t IPS16:1; /*!< bit:     16  Inter-Process Signal 16            */
    uint32_t IPS17:1; /*!< bit:     17  Inter-Process Signal 17            */
    uint32_t IPS18:1; /*!< bit:     18  Inter-Process Signal 18            */
    uint32_t IPS19:1; /*!< bit:     19  Inter-Process Signal 19            */
    uint32_t IPS20:1; /*!< bit:     20  Inter-Process Signal 20            */
    uint32_t IPS21:1; /*!< bit:     21  Inter-Process Signal 21            */
    uint32_t IPS22:1; /*!< bit:     22  Inter-Process Signal 22            */
    uint32_t IPS23:1; /*!< bit:     23  Inter-Process Signal 23            */
    uint32_t IPS24:1; /*!< bit:     24  Inter-Process Signal 24            */
    uint32_t IPS25:1; /*!< bit:     25  Inter-Process Signal 25            */
    uint32_t IPS26:1; /*!< bit:     26  Inter-Process Signal 26            */
    uint32_t IPS27:1; /*!< bit:     27  Inter-Process Signal 27            */
    uint32_t IPS28:1; /*!< bit:     28  Inter-Process Signal 28            */
    uint32_t IPS29:1; /*!< bit:     29  Inter-Process Signal 29            */
    uint32_t IPS30:1; /*!< bit:     30  Inter-Process Signal 30            */
    uint32_t IPS31:1; /*!< bit:     31  Inter-Process Signal 31            */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t IPS:32; /*!< bit:  0..31  Inter-Process Signal x             */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_SMASK_Type;
# 1400 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_SFLAGCLR : (TAL Offset: 0x220) ( /W 32) Inter-Process Signal Flag Clear -------- */

typedef union {
  struct {
    uint32_t IPS0:1; /*!< bit:      0  Inter-Process Signal 0             */
    uint32_t IPS1:1; /*!< bit:      1  Inter-Process Signal 1             */
    uint32_t IPS2:1; /*!< bit:      2  Inter-Process Signal 2             */
    uint32_t IPS3:1; /*!< bit:      3  Inter-Process Signal 3             */
    uint32_t IPS4:1; /*!< bit:      4  Inter-Process Signal 4             */
    uint32_t IPS5:1; /*!< bit:      5  Inter-Process Signal 5             */
    uint32_t IPS6:1; /*!< bit:      6  Inter-Process Signal 6             */
    uint32_t IPS7:1; /*!< bit:      7  Inter-Process Signal 7             */
    uint32_t IPS8:1; /*!< bit:      8  Inter-Process Signal 8             */
    uint32_t IPS9:1; /*!< bit:      9  Inter-Process Signal 9             */
    uint32_t IPS10:1; /*!< bit:     10  Inter-Process Signal 10            */
    uint32_t IPS11:1; /*!< bit:     11  Inter-Process Signal 11            */
    uint32_t IPS12:1; /*!< bit:     12  Inter-Process Signal 12            */
    uint32_t IPS13:1; /*!< bit:     13  Inter-Process Signal 13            */
    uint32_t IPS14:1; /*!< bit:     14  Inter-Process Signal 14            */
    uint32_t IPS15:1; /*!< bit:     15  Inter-Process Signal 15            */
    uint32_t IPS16:1; /*!< bit:     16  Inter-Process Signal 16            */
    uint32_t IPS17:1; /*!< bit:     17  Inter-Process Signal 17            */
    uint32_t IPS18:1; /*!< bit:     18  Inter-Process Signal 18            */
    uint32_t IPS19:1; /*!< bit:     19  Inter-Process Signal 19            */
    uint32_t IPS20:1; /*!< bit:     20  Inter-Process Signal 20            */
    uint32_t IPS21:1; /*!< bit:     21  Inter-Process Signal 21            */
    uint32_t IPS22:1; /*!< bit:     22  Inter-Process Signal 22            */
    uint32_t IPS23:1; /*!< bit:     23  Inter-Process Signal 23            */
    uint32_t IPS24:1; /*!< bit:     24  Inter-Process Signal 24            */
    uint32_t IPS25:1; /*!< bit:     25  Inter-Process Signal 25            */
    uint32_t IPS26:1; /*!< bit:     26  Inter-Process Signal 26            */
    uint32_t IPS27:1; /*!< bit:     27  Inter-Process Signal 27            */
    uint32_t IPS28:1; /*!< bit:     28  Inter-Process Signal 28            */
    uint32_t IPS29:1; /*!< bit:     29  Inter-Process Signal 29            */
    uint32_t IPS30:1; /*!< bit:     30  Inter-Process Signal 30            */
    uint32_t IPS31:1; /*!< bit:     31  Inter-Process Signal 31            */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t IPS:32; /*!< bit:  0..31  Inter-Process Signal x             */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_SFLAGCLR_Type;
# 1516 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_SFLAGSET : (TAL Offset: 0x228) ( /W 32) Inter-Process Signal Flag Set -------- */

typedef union {
  struct {
    uint32_t IPS0:1; /*!< bit:      0  Inter-Process Signal 0             */
    uint32_t IPS1:1; /*!< bit:      1  Inter-Process Signal 1             */
    uint32_t IPS2:1; /*!< bit:      2  Inter-Process Signal 2             */
    uint32_t IPS3:1; /*!< bit:      3  Inter-Process Signal 3             */
    uint32_t IPS4:1; /*!< bit:      4  Inter-Process Signal 4             */
    uint32_t IPS5:1; /*!< bit:      5  Inter-Process Signal 5             */
    uint32_t IPS6:1; /*!< bit:      6  Inter-Process Signal 6             */
    uint32_t IPS7:1; /*!< bit:      7  Inter-Process Signal 7             */
    uint32_t IPS8:1; /*!< bit:      8  Inter-Process Signal 8             */
    uint32_t IPS9:1; /*!< bit:      9  Inter-Process Signal 9             */
    uint32_t IPS10:1; /*!< bit:     10  Inter-Process Signal 10            */
    uint32_t IPS11:1; /*!< bit:     11  Inter-Process Signal 11            */
    uint32_t IPS12:1; /*!< bit:     12  Inter-Process Signal 12            */
    uint32_t IPS13:1; /*!< bit:     13  Inter-Process Signal 13            */
    uint32_t IPS14:1; /*!< bit:     14  Inter-Process Signal 14            */
    uint32_t IPS15:1; /*!< bit:     15  Inter-Process Signal 15            */
    uint32_t IPS16:1; /*!< bit:     16  Inter-Process Signal 16            */
    uint32_t IPS17:1; /*!< bit:     17  Inter-Process Signal 17            */
    uint32_t IPS18:1; /*!< bit:     18  Inter-Process Signal 18            */
    uint32_t IPS19:1; /*!< bit:     19  Inter-Process Signal 19            */
    uint32_t IPS20:1; /*!< bit:     20  Inter-Process Signal 20            */
    uint32_t IPS21:1; /*!< bit:     21  Inter-Process Signal 21            */
    uint32_t IPS22:1; /*!< bit:     22  Inter-Process Signal 22            */
    uint32_t IPS23:1; /*!< bit:     23  Inter-Process Signal 23            */
    uint32_t IPS24:1; /*!< bit:     24  Inter-Process Signal 24            */
    uint32_t IPS25:1; /*!< bit:     25  Inter-Process Signal 25            */
    uint32_t IPS26:1; /*!< bit:     26  Inter-Process Signal 26            */
    uint32_t IPS27:1; /*!< bit:     27  Inter-Process Signal 27            */
    uint32_t IPS28:1; /*!< bit:     28  Inter-Process Signal 28            */
    uint32_t IPS29:1; /*!< bit:     29  Inter-Process Signal 29            */
    uint32_t IPS30:1; /*!< bit:     30  Inter-Process Signal 30            */
    uint32_t IPS31:1; /*!< bit:     31  Inter-Process Signal 31            */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t IPS:32; /*!< bit:  0..31  Inter-Process Signal x             */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_SFLAGSET_Type;
# 1632 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_SFLAG : (TAL Offset: 0x230) (R/  32) Inter-Process Signal Flag -------- */

typedef union {
  struct {
    uint32_t IPS0:1; /*!< bit:      0  Inter-Process Signal 0             */
    uint32_t IPS1:1; /*!< bit:      1  Inter-Process Signal 1             */
    uint32_t IPS2:1; /*!< bit:      2  Inter-Process Signal 2             */
    uint32_t IPS3:1; /*!< bit:      3  Inter-Process Signal 3             */
    uint32_t IPS4:1; /*!< bit:      4  Inter-Process Signal 4             */
    uint32_t IPS5:1; /*!< bit:      5  Inter-Process Signal 5             */
    uint32_t IPS6:1; /*!< bit:      6  Inter-Process Signal 6             */
    uint32_t IPS7:1; /*!< bit:      7  Inter-Process Signal 7             */
    uint32_t IPS8:1; /*!< bit:      8  Inter-Process Signal 8             */
    uint32_t IPS9:1; /*!< bit:      9  Inter-Process Signal 9             */
    uint32_t IPS10:1; /*!< bit:     10  Inter-Process Signal 10            */
    uint32_t IPS11:1; /*!< bit:     11  Inter-Process Signal 11            */
    uint32_t IPS12:1; /*!< bit:     12  Inter-Process Signal 12            */
    uint32_t IPS13:1; /*!< bit:     13  Inter-Process Signal 13            */
    uint32_t IPS14:1; /*!< bit:     14  Inter-Process Signal 14            */
    uint32_t IPS15:1; /*!< bit:     15  Inter-Process Signal 15            */
    uint32_t IPS16:1; /*!< bit:     16  Inter-Process Signal 16            */
    uint32_t IPS17:1; /*!< bit:     17  Inter-Process Signal 17            */
    uint32_t IPS18:1; /*!< bit:     18  Inter-Process Signal 18            */
    uint32_t IPS19:1; /*!< bit:     19  Inter-Process Signal 19            */
    uint32_t IPS20:1; /*!< bit:     20  Inter-Process Signal 20            */
    uint32_t IPS21:1; /*!< bit:     21  Inter-Process Signal 21            */
    uint32_t IPS22:1; /*!< bit:     22  Inter-Process Signal 22            */
    uint32_t IPS23:1; /*!< bit:     23  Inter-Process Signal 23            */
    uint32_t IPS24:1; /*!< bit:     24  Inter-Process Signal 24            */
    uint32_t IPS25:1; /*!< bit:     25  Inter-Process Signal 25            */
    uint32_t IPS26:1; /*!< bit:     26  Inter-Process Signal 26            */
    uint32_t IPS27:1; /*!< bit:     27  Inter-Process Signal 27            */
    uint32_t IPS28:1; /*!< bit:     28  Inter-Process Signal 28            */
    uint32_t IPS29:1; /*!< bit:     29  Inter-Process Signal 29            */
    uint32_t IPS30:1; /*!< bit:     30  Inter-Process Signal 30            */
    uint32_t IPS31:1; /*!< bit:     31  Inter-Process Signal 31            */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t IPS:32; /*!< bit:  0..31  Inter-Process Signal x             */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TAL_SFLAG_Type;
# 1748 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/* -------- TAL_SFLAGCLRR : (TAL Offset: 0x300) (R/W  8) Inter-Process Signal Flag Bit n -------- */

typedef union {
  struct {
    uint8_t IPS:1; /*!< bit:      0  Inter-Process Signal n             */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TAL_SFLAGCLRR_Type;
# 1766 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tal.h"
/** \brief TalCpuirqs hardware registers */

typedef struct {
  volatile /*!< Defines 'read only' permissions */ TAL_CPUIRQS_Type CPUIRQS[5]; /**< \brief Offset: 0x000 (R/  32) Interrupt Status m for CPU n */
       RoReg8 Reserved1[0xC];
} TalCpuirqs;


/** \brief TalCtis hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ TAL_CTICTRLA_Type CTICTRLA; /**< \brief Offset: 0x000 (R/W  8) Cross-Trigger Interface n Control A */
  volatile /*!< Defines 'read / write' permissions */ TAL_CTIMASK_Type CTIMASK; /**< \brief Offset: 0x001 (R/W  8) Cross-Trigger Interface n Mask */
} TalCtis;


/** \brief TalSmasks hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ TAL_SMASK_Type SMASK[2]; /**< \brief Offset: 0x000 (R/W 32) Inter-Process Signal Mask m for CPU n */
} TalSmasks;


/** \brief TAL hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ TAL_CTRLA_Type CTRLA; /**< \brief Offset: 0x000 (R/W  8) Control A */
  volatile /*!< Defines 'read / write' permissions */ TAL_EXTCTRL_Type EXTCTRL; /**< \brief Offset: 0x001 (R/W  8) External Break Control */
       RoReg8 Reserved1[0x2];
  volatile /*!< Defines 'read / write' permissions */ TAL_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x004 (R/W 16) Event Control */
       RoReg8 Reserved2[0x2];
  volatile /*!< Defines 'read / write' permissions */ TAL_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x008 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ TAL_INTENSET_Type INTENSET; /**< \brief Offset: 0x009 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ TAL_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x00A (R/W  8) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read / write' permissions */ TAL_GLOBMASK_Type GLOBMASK; /**< \brief Offset: 0x00B (R/W  8) Global Break Requests Mask */
  volatile /*!< Defines 'write only' permissions */ TAL_HALT_Type HALT; /**< \brief Offset: 0x00C ( /W  8) Debug Halt Request */
  volatile /*!< Defines 'write only' permissions */ TAL_RESTART_Type RESTART; /**< \brief Offset: 0x00D ( /W  8) Debug Restart Request */
  volatile /*!< Defines 'read only' permissions */ TAL_BRKSTATUS_Type BRKSTATUS; /**< \brief Offset: 0x00E (R/  16) Break Request Status */
       TalCtis Ctis[4]; /**< \brief Offset: 0x010 TalCtis groups [CTI_NUM] */
       RoReg8 Reserved3[0x8];
  volatile /*!< Defines 'read only' permissions */ TAL_INTSTATUS_Type INTSTATUS[137]; /**< \brief Offset: 0x020 (R/   8) Interrupt n Status */
       RoReg8 Reserved4[0x67];
  volatile /*!< Defines 'read / write' permissions */ TAL_DMACPUSEL0_Type DMACPUSEL0; /**< \brief Offset: 0x110 (R/W 32) DMA Channel Interrupts CPU Select 0 */
  volatile /*!< Defines 'read / write' permissions */ TAL_DMACPUSEL1_Type DMACPUSEL1; /**< \brief Offset: 0x114 (R/W 32) DMA Channel Interrupts CPU Select 1 */
  volatile /*!< Defines 'read / write' permissions */ TAL_EVCPUSEL0_Type EVCPUSEL0; /**< \brief Offset: 0x118 (R/W 32) EVSYS Channel Interrupts CPU Select 0 */
       RoReg8 Reserved5[0x4];
  volatile /*!< Defines 'read / write' permissions */ TAL_EICCPUSEL0_Type EICCPUSEL0; /**< \brief Offset: 0x120 (R/W 32) EIC External Interrupts CPU Select 0 */
       RoReg8 Reserved6[0x4];
  volatile /*!< Defines 'read / write' permissions */ TAL_INTCPUSEL0_Type INTCPUSEL0; /**< \brief Offset: 0x128 (R/W 32) Interrupts CPU Select 0 */
  volatile /*!< Defines 'read / write' permissions */ TAL_INTCPUSEL1_Type INTCPUSEL1; /**< \brief Offset: 0x12C (R/W 32) Interrupts CPU Select 1 */
  volatile /*!< Defines 'read / write' permissions */ TAL_INTCPUSEL2_Type INTCPUSEL2; /**< \brief Offset: 0x130 (R/W 32) Interrupts CPU Select 2 */
  volatile /*!< Defines 'read / write' permissions */ TAL_INTCPUSEL3_Type INTCPUSEL3; /**< \brief Offset: 0x134 (R/W 32) Interrupts CPU Select 3 */
  volatile /*!< Defines 'read / write' permissions */ TAL_INTCPUSEL4_Type INTCPUSEL4; /**< \brief Offset: 0x138 (R/W 32) Interrupts CPU Select 4 */
  volatile /*!< Defines 'read / write' permissions */ TAL_INTCPUSEL5_Type INTCPUSEL5; /**< \brief Offset: 0x13C (R/W 32) Interrupts CPU Select 5 */
  volatile /*!< Defines 'read / write' permissions */ TAL_INTCPUSEL6_Type INTCPUSEL6; /**< \brief Offset: 0x140 (R/W 32) Interrupts CPU Select 6 */
  volatile /*!< Defines 'read / write' permissions */ TAL_INTCPUSEL7_Type INTCPUSEL7; /**< \brief Offset: 0x144 (R/W 32) Interrupts CPU Select 7 */
  volatile /*!< Defines 'read / write' permissions */ TAL_INTCPUSEL8_Type INTCPUSEL8; /**< \brief Offset: 0x148 (R/W 32) Interrupts CPU Select 8 */
       RoReg8 Reserved7[0x18];
  volatile /*!< Defines 'read / write' permissions */ TAL_IRQTRIG_Type IRQTRIG; /**< \brief Offset: 0x164 (R/W 32) Interrupt Trigger */
  volatile /*!< Defines 'read / write' permissions */ TAL_IRQMON_Type IRQMON[1]; /**< \brief Offset: 0x168 (R/W 16) Interrupt Monitor Select */
       RoReg8 Reserved8[0x16];
       TalCpuirqs Cpuirqs[2]; /**< \brief Offset: 0x180 TalCpuirqs groups [CPU_NUM] */
       RoReg8 Reserved9[0x40];
       TalSmasks Smasks[2]; /**< \brief Offset: 0x200 TalSmasks groups [CPU_NUM] */
       RoReg8 Reserved10[0x10];
  volatile /*!< Defines 'write only' permissions */ TAL_SFLAGCLR_Type SFLAGCLR[2]; /**< \brief Offset: 0x220 ( /W 32) Inter-Process Signal Flag Clear */
  volatile /*!< Defines 'write only' permissions */ TAL_SFLAGSET_Type SFLAGSET[2]; /**< \brief Offset: 0x228 ( /W 32) Inter-Process Signal Flag Set */
  volatile /*!< Defines 'read only' permissions */ TAL_SFLAG_Type SFLAG[2]; /**< \brief Offset: 0x230 (R/  32) Inter-Process Signal Flag */
       RoReg8 Reserved11[0xC8];
  volatile /*!< Defines 'read / write' permissions */ TAL_SFLAGCLRR_Type SFLAGCLRR[64]; /**< \brief Offset: 0x300 (R/W  8) Inter-Process Signal Flag Bit n */
} Tal;


/*@}*/
# 608 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h" 1
/**
 * \file
 *
 * \brief Component description for TC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR TC */
/* ========================================================================== */
/** \addtogroup SAMD51_TC Basic Timer Counter */
/*@{*/




/* -------- TC_CTRLA : (TC Offset: 0x00) (R/W 32) Control A -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t MODE:2; /*!< bit:  2.. 3  Timer Counter Mode                 */
    uint32_t PRESCSYNC:2; /*!< bit:  4.. 5  Prescaler and Counter Synchronization */
    uint32_t RUNSTDBY:1; /*!< bit:      6  Run during Standby                 */
    uint32_t ONDEMAND:1; /*!< bit:      7  Clock On Demand                    */
    uint32_t PRESCALER:3; /*!< bit:  8..10  Prescaler                          */
    uint32_t ALOCK:1; /*!< bit:     11  Auto Lock                          */
    uint32_t :4; /*!< bit: 12..15  Reserved                           */
    uint32_t CAPTEN0:1; /*!< bit:     16  Capture Channel 0 Enable           */
    uint32_t CAPTEN1:1; /*!< bit:     17  Capture Channel 1 Enable           */
    uint32_t :2; /*!< bit: 18..19  Reserved                           */
    uint32_t COPEN0:1; /*!< bit:     20  Capture On Pin 0 Enable            */
    uint32_t COPEN1:1; /*!< bit:     21  Capture On Pin 1 Enable            */
    uint32_t :2; /*!< bit: 22..23  Reserved                           */
    uint32_t CAPTMODE0:2; /*!< bit: 24..25  Capture Mode Channel 0             */
    uint32_t :1; /*!< bit:     26  Reserved                           */
    uint32_t CAPTMODE1:2; /*!< bit: 27..28  Capture mode Channel 1             */
    uint32_t :3; /*!< bit: 29..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :16; /*!< bit:  0..15  Reserved                           */
    uint32_t CAPTEN:2; /*!< bit: 16..17  Capture Channel x Enable           */
    uint32_t :2; /*!< bit: 18..19  Reserved                           */
    uint32_t COPEN:2; /*!< bit: 20..21  Capture On Pin x Enable            */
    uint32_t :10; /*!< bit: 22..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TC_CTRLA_Type;
# 160 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_CTRLBCLR : (TC Offset: 0x04) (R/W  8) Control B Clear -------- */

typedef union {
  struct {
    uint8_t DIR:1; /*!< bit:      0  Counter Direction                  */
    uint8_t LUPD:1; /*!< bit:      1  Lock Update                        */
    uint8_t ONESHOT:1; /*!< bit:      2  One-Shot on Counter                */
    uint8_t :2; /*!< bit:  3.. 4  Reserved                           */
    uint8_t CMD:3; /*!< bit:  5.. 7  Command                            */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_CTRLBCLR_Type;
# 200 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_CTRLBSET : (TC Offset: 0x05) (R/W  8) Control B Set -------- */

typedef union {
  struct {
    uint8_t DIR:1; /*!< bit:      0  Counter Direction                  */
    uint8_t LUPD:1; /*!< bit:      1  Lock Update                        */
    uint8_t ONESHOT:1; /*!< bit:      2  One-Shot on Counter                */
    uint8_t :2; /*!< bit:  3.. 4  Reserved                           */
    uint8_t CMD:3; /*!< bit:  5.. 7  Command                            */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_CTRLBSET_Type;
# 240 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_EVCTRL : (TC Offset: 0x06) (R/W 16) Event Control -------- */

typedef union {
  struct {
    uint16_t EVACT:3; /*!< bit:  0.. 2  Event Action                       */
    uint16_t :1; /*!< bit:      3  Reserved                           */
    uint16_t TCINV:1; /*!< bit:      4  TC Event Input Polarity            */
    uint16_t TCEI:1; /*!< bit:      5  TC Event Enable                    */
    uint16_t :2; /*!< bit:  6.. 7  Reserved                           */
    uint16_t OVFEO:1; /*!< bit:      8  Event Output Enable                */
    uint16_t :3; /*!< bit:  9..11  Reserved                           */
    uint16_t MCEO0:1; /*!< bit:     12  MC Event Output Enable 0           */
    uint16_t MCEO1:1; /*!< bit:     13  MC Event Output Enable 1           */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t :12; /*!< bit:  0..11  Reserved                           */
    uint16_t MCEO:2; /*!< bit: 12..13  MC Event Output Enable x           */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} TC_EVCTRL_Type;
# 301 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_INTENCLR : (TC Offset: 0x08) (R/W  8) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t OVF:1; /*!< bit:      0  OVF Interrupt Disable              */
    uint8_t ERR:1; /*!< bit:      1  ERR Interrupt Disable              */
    uint8_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint8_t MC0:1; /*!< bit:      4  MC Interrupt Disable 0             */
    uint8_t MC1:1; /*!< bit:      5  MC Interrupt Disable 1             */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t :4; /*!< bit:  0.. 3  Reserved                           */
    uint8_t MC:2; /*!< bit:  4.. 5  MC Interrupt Disable x             */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_INTENCLR_Type;
# 337 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_INTENSET : (TC Offset: 0x09) (R/W  8) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t OVF:1; /*!< bit:      0  OVF Interrupt Enable               */
    uint8_t ERR:1; /*!< bit:      1  ERR Interrupt Enable               */
    uint8_t :2; /*!< bit:  2.. 3  Reserved                           */
    uint8_t MC0:1; /*!< bit:      4  MC Interrupt Enable 0              */
    uint8_t MC1:1; /*!< bit:      5  MC Interrupt Enable 1              */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t :4; /*!< bit:  0.. 3  Reserved                           */
    uint8_t MC:2; /*!< bit:  4.. 5  MC Interrupt Enable x              */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_INTENSET_Type;
# 373 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_INTFLAG : (TC Offset: 0x0A) (R/W  8) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t OVF:1; /*!< bit:      0  OVF Interrupt Flag                 */
    volatile /*!< Defines 'read only' permissions */ uint8_t ERR:1; /*!< bit:      1  ERR Interrupt Flag                 */
    volatile /*!< Defines 'read only' permissions */ uint8_t :2; /*!< bit:  2.. 3  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t MC0:1; /*!< bit:      4  MC Interrupt Flag 0                */
    volatile /*!< Defines 'read only' permissions */ uint8_t MC1:1; /*!< bit:      5  MC Interrupt Flag 1                */
    volatile /*!< Defines 'read only' permissions */ uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t :4; /*!< bit:  0.. 3  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t MC:2; /*!< bit:  4.. 5  MC Interrupt Flag x                */
    volatile /*!< Defines 'read only' permissions */ uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_INTFLAG_Type;
# 409 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_STATUS : (TC Offset: 0x0B) (R/W  8) Status -------- */

typedef union {
  struct {
    uint8_t STOP:1; /*!< bit:      0  Stop Status Flag                   */
    uint8_t SLAVE:1; /*!< bit:      1  Slave Status Flag                  */
    uint8_t :1; /*!< bit:      2  Reserved                           */
    uint8_t PERBUFV:1; /*!< bit:      3  Synchronization Busy Status        */
    uint8_t CCBUFV0:1; /*!< bit:      4  Compare channel buffer 0 valid     */
    uint8_t CCBUFV1:1; /*!< bit:      5  Compare channel buffer 1 valid     */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t :4; /*!< bit:  0.. 3  Reserved                           */
    uint8_t CCBUFV:2; /*!< bit:  4.. 5  Compare channel buffer x valid     */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_STATUS_Type;
# 448 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_WAVE : (TC Offset: 0x0C) (R/W  8) Waveform Generation Control -------- */

typedef union {
  struct {
    uint8_t WAVEGEN:2; /*!< bit:  0.. 1  Waveform Generation Mode           */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_WAVE_Type;
# 475 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_DRVCTRL : (TC Offset: 0x0D) (R/W  8) Control C -------- */

typedef union {
  struct {
    uint8_t INVEN0:1; /*!< bit:      0  Output Waveform Invert Enable 0    */
    uint8_t INVEN1:1; /*!< bit:      1  Output Waveform Invert Enable 1    */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t INVEN:2; /*!< bit:  0.. 1  Output Waveform Invert Enable x    */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_DRVCTRL_Type;
# 503 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_DBGCTRL : (TC Offset: 0x0F) (R/W  8) Debug Control -------- */

typedef union {
  struct {
    uint8_t DBGRUN:1; /*!< bit:      0  Run During Debug                   */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_DBGCTRL_Type;
# 521 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_SYNCBUSY : (TC Offset: 0x10) (R/  32) Synchronization Status -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  swrst                              */
    uint32_t ENABLE:1; /*!< bit:      1  enable                             */
    uint32_t CTRLB:1; /*!< bit:      2  CTRLB                              */
    uint32_t STATUS:1; /*!< bit:      3  STATUS                             */
    uint32_t COUNT:1; /*!< bit:      4  Counter                            */
    uint32_t PER:1; /*!< bit:      5  Period                             */
    uint32_t CC0:1; /*!< bit:      6  Compare Channel 0                  */
    uint32_t CC1:1; /*!< bit:      7  Compare Channel 1                  */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :6; /*!< bit:  0.. 5  Reserved                           */
    uint32_t CC:2; /*!< bit:  6.. 7  Compare Channel x                  */
    uint32_t :24; /*!< bit:  8..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TC_SYNCBUSY_Type;
# 568 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_COUNT16_COUNT : (TC Offset: 0x14) (R/W 16) COUNT16 COUNT16 Count -------- */

typedef union {
  struct {
    uint16_t COUNT:16; /*!< bit:  0..15  Counter Value                      */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} TC_COUNT16_COUNT_Type;
# 586 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_COUNT32_COUNT : (TC Offset: 0x14) (R/W 32) COUNT32 COUNT32 Count -------- */

typedef union {
  struct {
    uint32_t COUNT:32; /*!< bit:  0..31  Counter Value                      */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TC_COUNT32_COUNT_Type;
# 604 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_COUNT8_COUNT : (TC Offset: 0x14) (R/W  8) COUNT8 COUNT8 Count -------- */

typedef union {
  struct {
    uint8_t COUNT:8; /*!< bit:  0.. 7  Counter Value                      */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_COUNT8_COUNT_Type;
# 622 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_COUNT8_PER : (TC Offset: 0x1B) (R/W  8) COUNT8 COUNT8 Period -------- */

typedef union {
  struct {
    uint8_t PER:8; /*!< bit:  0.. 7  Period Value                       */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_COUNT8_PER_Type;
# 640 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_COUNT16_CC : (TC Offset: 0x1C) (R/W 16) COUNT16 COUNT16 Compare and Capture -------- */

typedef union {
  struct {
    uint16_t CC:16; /*!< bit:  0..15  Counter/Compare Value              */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} TC_COUNT16_CC_Type;
# 658 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_COUNT32_CC : (TC Offset: 0x1C) (R/W 32) COUNT32 COUNT32 Compare and Capture -------- */

typedef union {
  struct {
    uint32_t CC:32; /*!< bit:  0..31  Counter/Compare Value              */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TC_COUNT32_CC_Type;
# 676 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_COUNT8_CC : (TC Offset: 0x1C) (R/W  8) COUNT8 COUNT8 Compare and Capture -------- */

typedef union {
  struct {
    uint8_t CC:8; /*!< bit:  0.. 7  Counter/Compare Value              */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_COUNT8_CC_Type;
# 694 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_COUNT8_PERBUF : (TC Offset: 0x2F) (R/W  8) COUNT8 COUNT8 Period Buffer -------- */

typedef union {
  struct {
    uint8_t PERBUF:8; /*!< bit:  0.. 7  Period Buffer Value                */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_COUNT8_PERBUF_Type;
# 712 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_COUNT16_CCBUF : (TC Offset: 0x30) (R/W 16) COUNT16 COUNT16 Compare and Capture Buffer -------- */

typedef union {
  struct {
    uint16_t CCBUF:16; /*!< bit:  0..15  Counter/Compare Buffer Value       */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} TC_COUNT16_CCBUF_Type;
# 730 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_COUNT32_CCBUF : (TC Offset: 0x30) (R/W 32) COUNT32 COUNT32 Compare and Capture Buffer -------- */

typedef union {
  struct {
    uint32_t CCBUF:32; /*!< bit:  0..31  Counter/Compare Buffer Value       */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TC_COUNT32_CCBUF_Type;
# 748 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/* -------- TC_COUNT8_CCBUF : (TC Offset: 0x30) (R/W  8) COUNT8 COUNT8 Compare and Capture Buffer -------- */

typedef union {
  struct {
    uint8_t CCBUF:8; /*!< bit:  0.. 7  Counter/Compare Buffer Value       */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TC_COUNT8_CCBUF_Type;
# 766 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tc.h"
/** \brief TC_COUNT8 hardware registers */

typedef struct { /* 8-bit Counter Mode */
  volatile /*!< Defines 'read / write' permissions */ TC_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 32) Control A */
  volatile /*!< Defines 'read / write' permissions */ TC_CTRLBCLR_Type CTRLBCLR; /**< \brief Offset: 0x04 (R/W  8) Control B Clear */
  volatile /*!< Defines 'read / write' permissions */ TC_CTRLBSET_Type CTRLBSET; /**< \brief Offset: 0x05 (R/W  8) Control B Set */
  volatile /*!< Defines 'read / write' permissions */ TC_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x06 (R/W 16) Event Control */
  volatile /*!< Defines 'read / write' permissions */ TC_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x08 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ TC_INTENSET_Type INTENSET; /**< \brief Offset: 0x09 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ TC_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x0A (R/W  8) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read / write' permissions */ TC_STATUS_Type STATUS; /**< \brief Offset: 0x0B (R/W  8) Status */
  volatile /*!< Defines 'read / write' permissions */ TC_WAVE_Type WAVE; /**< \brief Offset: 0x0C (R/W  8) Waveform Generation Control */
  volatile /*!< Defines 'read / write' permissions */ TC_DRVCTRL_Type DRVCTRL; /**< \brief Offset: 0x0D (R/W  8) Control C */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read / write' permissions */ TC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x0F (R/W  8) Debug Control */
  volatile /*!< Defines 'read only' permissions */ TC_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x10 (R/  32) Synchronization Status */
  volatile /*!< Defines 'read / write' permissions */ TC_COUNT8_COUNT_Type COUNT; /**< \brief Offset: 0x14 (R/W  8) COUNT8 Count */
       RoReg8 Reserved2[0x6];
  volatile /*!< Defines 'read / write' permissions */ TC_COUNT8_PER_Type PER; /**< \brief Offset: 0x1B (R/W  8) COUNT8 Period */
  volatile /*!< Defines 'read / write' permissions */ TC_COUNT8_CC_Type CC[2]; /**< \brief Offset: 0x1C (R/W  8) COUNT8 Compare and Capture */
       RoReg8 Reserved3[0x11];
  volatile /*!< Defines 'read / write' permissions */ TC_COUNT8_PERBUF_Type PERBUF; /**< \brief Offset: 0x2F (R/W  8) COUNT8 Period Buffer */
  volatile /*!< Defines 'read / write' permissions */ TC_COUNT8_CCBUF_Type CCBUF[2]; /**< \brief Offset: 0x30 (R/W  8) COUNT8 Compare and Capture Buffer */
} TcCount8;


/** \brief TC_COUNT16 hardware registers */

typedef struct { /* 16-bit Counter Mode */
  volatile /*!< Defines 'read / write' permissions */ TC_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 32) Control A */
  volatile /*!< Defines 'read / write' permissions */ TC_CTRLBCLR_Type CTRLBCLR; /**< \brief Offset: 0x04 (R/W  8) Control B Clear */
  volatile /*!< Defines 'read / write' permissions */ TC_CTRLBSET_Type CTRLBSET; /**< \brief Offset: 0x05 (R/W  8) Control B Set */
  volatile /*!< Defines 'read / write' permissions */ TC_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x06 (R/W 16) Event Control */
  volatile /*!< Defines 'read / write' permissions */ TC_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x08 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ TC_INTENSET_Type INTENSET; /**< \brief Offset: 0x09 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ TC_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x0A (R/W  8) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read / write' permissions */ TC_STATUS_Type STATUS; /**< \brief Offset: 0x0B (R/W  8) Status */
  volatile /*!< Defines 'read / write' permissions */ TC_WAVE_Type WAVE; /**< \brief Offset: 0x0C (R/W  8) Waveform Generation Control */
  volatile /*!< Defines 'read / write' permissions */ TC_DRVCTRL_Type DRVCTRL; /**< \brief Offset: 0x0D (R/W  8) Control C */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read / write' permissions */ TC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x0F (R/W  8) Debug Control */
  volatile /*!< Defines 'read only' permissions */ TC_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x10 (R/  32) Synchronization Status */
  volatile /*!< Defines 'read / write' permissions */ TC_COUNT16_COUNT_Type COUNT; /**< \brief Offset: 0x14 (R/W 16) COUNT16 Count */
       RoReg8 Reserved2[0x6];
  volatile /*!< Defines 'read / write' permissions */ TC_COUNT16_CC_Type CC[2]; /**< \brief Offset: 0x1C (R/W 16) COUNT16 Compare and Capture */
       RoReg8 Reserved3[0x10];
  volatile /*!< Defines 'read / write' permissions */ TC_COUNT16_CCBUF_Type CCBUF[2]; /**< \brief Offset: 0x30 (R/W 16) COUNT16 Compare and Capture Buffer */
} TcCount16;


/** \brief TC_COUNT32 hardware registers */

typedef struct { /* 32-bit Counter Mode */
  volatile /*!< Defines 'read / write' permissions */ TC_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 32) Control A */
  volatile /*!< Defines 'read / write' permissions */ TC_CTRLBCLR_Type CTRLBCLR; /**< \brief Offset: 0x04 (R/W  8) Control B Clear */
  volatile /*!< Defines 'read / write' permissions */ TC_CTRLBSET_Type CTRLBSET; /**< \brief Offset: 0x05 (R/W  8) Control B Set */
  volatile /*!< Defines 'read / write' permissions */ TC_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x06 (R/W 16) Event Control */
  volatile /*!< Defines 'read / write' permissions */ TC_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x08 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ TC_INTENSET_Type INTENSET; /**< \brief Offset: 0x09 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ TC_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x0A (R/W  8) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read / write' permissions */ TC_STATUS_Type STATUS; /**< \brief Offset: 0x0B (R/W  8) Status */
  volatile /*!< Defines 'read / write' permissions */ TC_WAVE_Type WAVE; /**< \brief Offset: 0x0C (R/W  8) Waveform Generation Control */
  volatile /*!< Defines 'read / write' permissions */ TC_DRVCTRL_Type DRVCTRL; /**< \brief Offset: 0x0D (R/W  8) Control C */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read / write' permissions */ TC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x0F (R/W  8) Debug Control */
  volatile /*!< Defines 'read only' permissions */ TC_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x10 (R/  32) Synchronization Status */
  volatile /*!< Defines 'read / write' permissions */ TC_COUNT32_COUNT_Type COUNT; /**< \brief Offset: 0x14 (R/W 32) COUNT32 Count */
       RoReg8 Reserved2[0x4];
  volatile /*!< Defines 'read / write' permissions */ TC_COUNT32_CC_Type CC[2]; /**< \brief Offset: 0x1C (R/W 32) COUNT32 Compare and Capture */
       RoReg8 Reserved3[0xC];
  volatile /*!< Defines 'read / write' permissions */ TC_COUNT32_CCBUF_Type CCBUF[2]; /**< \brief Offset: 0x30 (R/W 32) COUNT32 Compare and Capture Buffer */
} TcCount32;



typedef union {
       TcCount8 COUNT8; /**< \brief Offset: 0x00 8-bit Counter Mode */
       TcCount16 COUNT16; /**< \brief Offset: 0x00 16-bit Counter Mode */
       TcCount32 COUNT32; /**< \brief Offset: 0x00 32-bit Counter Mode */
} Tc;


/*@}*/
# 609 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h" 1
/**
 * \file
 *
 * \brief Component description for TCC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR TCC */
/* ========================================================================== */
/** \addtogroup SAMD51_TCC Timer Counter Control */
/*@{*/




/* -------- TCC_CTRLA : (TCC Offset: 0x00) (R/W 32) Control A -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint32_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint32_t :3; /*!< bit:  2.. 4  Reserved                           */
    uint32_t RESOLUTION:2; /*!< bit:  5.. 6  Enhanced Resolution                */
    uint32_t :1; /*!< bit:      7  Reserved                           */
    uint32_t PRESCALER:3; /*!< bit:  8..10  Prescaler                          */
    uint32_t RUNSTDBY:1; /*!< bit:     11  Run in Standby                     */
    uint32_t PRESCSYNC:2; /*!< bit: 12..13  Prescaler and Counter Synchronization Selection */
    uint32_t ALOCK:1; /*!< bit:     14  Auto Lock                          */
    uint32_t MSYNC:1; /*!< bit:     15  Master Synchronization (only for TCC Slave Instance) */
    uint32_t :7; /*!< bit: 16..22  Reserved                           */
    uint32_t DMAOS:1; /*!< bit:     23  DMA One-shot Trigger Mode          */
    uint32_t CPTEN0:1; /*!< bit:     24  Capture Channel 0 Enable           */
    uint32_t CPTEN1:1; /*!< bit:     25  Capture Channel 1 Enable           */
    uint32_t CPTEN2:1; /*!< bit:     26  Capture Channel 2 Enable           */
    uint32_t CPTEN3:1; /*!< bit:     27  Capture Channel 3 Enable           */
    uint32_t CPTEN4:1; /*!< bit:     28  Capture Channel 4 Enable           */
    uint32_t CPTEN5:1; /*!< bit:     29  Capture Channel 5 Enable           */
    uint32_t :2; /*!< bit: 30..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :24; /*!< bit:  0..23  Reserved                           */
    uint32_t CPTEN:6; /*!< bit: 24..29  Capture Channel x Enable           */
    uint32_t :2; /*!< bit: 30..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_CTRLA_Type;
# 145 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_CTRLBCLR : (TCC Offset: 0x04) (R/W  8) Control B Clear -------- */

typedef union {
  struct {
    uint8_t DIR:1; /*!< bit:      0  Counter Direction                  */
    uint8_t LUPD:1; /*!< bit:      1  Lock Update                        */
    uint8_t ONESHOT:1; /*!< bit:      2  One-Shot                           */
    uint8_t IDXCMD:2; /*!< bit:  3.. 4  Ramp Index Command                 */
    uint8_t CMD:3; /*!< bit:  5.. 7  TCC Command                        */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TCC_CTRLBCLR_Type;
# 196 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_CTRLBSET : (TCC Offset: 0x05) (R/W  8) Control B Set -------- */

typedef union {
  struct {
    uint8_t DIR:1; /*!< bit:      0  Counter Direction                  */
    uint8_t LUPD:1; /*!< bit:      1  Lock Update                        */
    uint8_t ONESHOT:1; /*!< bit:      2  One-Shot                           */
    uint8_t IDXCMD:2; /*!< bit:  3.. 4  Ramp Index Command                 */
    uint8_t CMD:3; /*!< bit:  5.. 7  TCC Command                        */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TCC_CTRLBSET_Type;
# 247 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_SYNCBUSY : (TCC Offset: 0x08) (R/  32) Synchronization Busy -------- */

typedef union {
  struct {
    uint32_t SWRST:1; /*!< bit:      0  Swrst Busy                         */
    uint32_t ENABLE:1; /*!< bit:      1  Enable Busy                        */
    uint32_t CTRLB:1; /*!< bit:      2  Ctrlb Busy                         */
    uint32_t STATUS:1; /*!< bit:      3  Status Busy                        */
    uint32_t COUNT:1; /*!< bit:      4  Count Busy                         */
    uint32_t PATT:1; /*!< bit:      5  Pattern Busy                       */
    uint32_t WAVE:1; /*!< bit:      6  Wave Busy                          */
    uint32_t PER:1; /*!< bit:      7  Period Busy                        */
    uint32_t CC0:1; /*!< bit:      8  Compare Channel 0 Busy             */
    uint32_t CC1:1; /*!< bit:      9  Compare Channel 1 Busy             */
    uint32_t CC2:1; /*!< bit:     10  Compare Channel 2 Busy             */
    uint32_t CC3:1; /*!< bit:     11  Compare Channel 3 Busy             */
    uint32_t CC4:1; /*!< bit:     12  Compare Channel 4 Busy             */
    uint32_t CC5:1; /*!< bit:     13  Compare Channel 5 Busy             */
    uint32_t :18; /*!< bit: 14..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :8; /*!< bit:  0.. 7  Reserved                           */
    uint32_t CC:6; /*!< bit:  8..13  Compare Channel x Busy             */
    uint32_t :18; /*!< bit: 14..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_SYNCBUSY_Type;
# 312 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_FCTRLA : (TCC Offset: 0x0C) (R/W 32) Recoverable Fault A Configuration -------- */

typedef union {
  struct {
    uint32_t SRC:2; /*!< bit:  0.. 1  Fault A Source                     */
    uint32_t :1; /*!< bit:      2  Reserved                           */
    uint32_t KEEP:1; /*!< bit:      3  Fault A Keeper                     */
    uint32_t QUAL:1; /*!< bit:      4  Fault A Qualification              */
    uint32_t BLANK:2; /*!< bit:  5.. 6  Fault A Blanking Mode              */
    uint32_t RESTART:1; /*!< bit:      7  Fault A Restart                    */
    uint32_t HALT:2; /*!< bit:  8.. 9  Fault A Halt Mode                  */
    uint32_t CHSEL:2; /*!< bit: 10..11  Fault A Capture Channel            */
    uint32_t CAPTURE:3; /*!< bit: 12..14  Fault A Capture Action             */
    uint32_t BLANKPRESC:1; /*!< bit:     15  Fault A Blanking Prescaler         */
    uint32_t BLANKVAL:8; /*!< bit: 16..23  Fault A Blanking Time              */
    uint32_t FILTERVAL:4; /*!< bit: 24..27  Fault A Filter Value               */
    uint32_t :4; /*!< bit: 28..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_FCTRLA_Type;
# 416 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_FCTRLB : (TCC Offset: 0x10) (R/W 32) Recoverable Fault B Configuration -------- */

typedef union {
  struct {
    uint32_t SRC:2; /*!< bit:  0.. 1  Fault B Source                     */
    uint32_t :1; /*!< bit:      2  Reserved                           */
    uint32_t KEEP:1; /*!< bit:      3  Fault B Keeper                     */
    uint32_t QUAL:1; /*!< bit:      4  Fault B Qualification              */
    uint32_t BLANK:2; /*!< bit:  5.. 6  Fault B Blanking Mode              */
    uint32_t RESTART:1; /*!< bit:      7  Fault B Restart                    */
    uint32_t HALT:2; /*!< bit:  8.. 9  Fault B Halt Mode                  */
    uint32_t CHSEL:2; /*!< bit: 10..11  Fault B Capture Channel            */
    uint32_t CAPTURE:3; /*!< bit: 12..14  Fault B Capture Action             */
    uint32_t BLANKPRESC:1; /*!< bit:     15  Fault B Blanking Prescaler         */
    uint32_t BLANKVAL:8; /*!< bit: 16..23  Fault B Blanking Time              */
    uint32_t FILTERVAL:4; /*!< bit: 24..27  Fault B Filter Value               */
    uint32_t :4; /*!< bit: 28..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_FCTRLB_Type;
# 520 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_WEXCTRL : (TCC Offset: 0x14) (R/W 32) Waveform Extension Configuration -------- */

typedef union {
  struct {
    uint32_t OTMX:2; /*!< bit:  0.. 1  Output Matrix                      */
    uint32_t :6; /*!< bit:  2.. 7  Reserved                           */
    uint32_t DTIEN0:1; /*!< bit:      8  Dead-time Insertion Generator 0 Enable */
    uint32_t DTIEN1:1; /*!< bit:      9  Dead-time Insertion Generator 1 Enable */
    uint32_t DTIEN2:1; /*!< bit:     10  Dead-time Insertion Generator 2 Enable */
    uint32_t DTIEN3:1; /*!< bit:     11  Dead-time Insertion Generator 3 Enable */
    uint32_t :4; /*!< bit: 12..15  Reserved                           */
    uint32_t DTLS:8; /*!< bit: 16..23  Dead-time Low Side Outputs Value   */
    uint32_t DTHS:8; /*!< bit: 24..31  Dead-time High Side Outputs Value  */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :8; /*!< bit:  0.. 7  Reserved                           */
    uint32_t DTIEN:4; /*!< bit:  8..11  Dead-time Insertion Generator x Enable */
    uint32_t :20; /*!< bit: 12..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_WEXCTRL_Type;
# 568 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_DRVCTRL : (TCC Offset: 0x18) (R/W 32) Driver Control -------- */

typedef union {
  struct {
    uint32_t NRE0:1; /*!< bit:      0  Non-Recoverable State 0 Output Enable */
    uint32_t NRE1:1; /*!< bit:      1  Non-Recoverable State 1 Output Enable */
    uint32_t NRE2:1; /*!< bit:      2  Non-Recoverable State 2 Output Enable */
    uint32_t NRE3:1; /*!< bit:      3  Non-Recoverable State 3 Output Enable */
    uint32_t NRE4:1; /*!< bit:      4  Non-Recoverable State 4 Output Enable */
    uint32_t NRE5:1; /*!< bit:      5  Non-Recoverable State 5 Output Enable */
    uint32_t NRE6:1; /*!< bit:      6  Non-Recoverable State 6 Output Enable */
    uint32_t NRE7:1; /*!< bit:      7  Non-Recoverable State 7 Output Enable */
    uint32_t NRV0:1; /*!< bit:      8  Non-Recoverable State 0 Output Value */
    uint32_t NRV1:1; /*!< bit:      9  Non-Recoverable State 1 Output Value */
    uint32_t NRV2:1; /*!< bit:     10  Non-Recoverable State 2 Output Value */
    uint32_t NRV3:1; /*!< bit:     11  Non-Recoverable State 3 Output Value */
    uint32_t NRV4:1; /*!< bit:     12  Non-Recoverable State 4 Output Value */
    uint32_t NRV5:1; /*!< bit:     13  Non-Recoverable State 5 Output Value */
    uint32_t NRV6:1; /*!< bit:     14  Non-Recoverable State 6 Output Value */
    uint32_t NRV7:1; /*!< bit:     15  Non-Recoverable State 7 Output Value */
    uint32_t INVEN0:1; /*!< bit:     16  Output Waveform 0 Inversion        */
    uint32_t INVEN1:1; /*!< bit:     17  Output Waveform 1 Inversion        */
    uint32_t INVEN2:1; /*!< bit:     18  Output Waveform 2 Inversion        */
    uint32_t INVEN3:1; /*!< bit:     19  Output Waveform 3 Inversion        */
    uint32_t INVEN4:1; /*!< bit:     20  Output Waveform 4 Inversion        */
    uint32_t INVEN5:1; /*!< bit:     21  Output Waveform 5 Inversion        */
    uint32_t INVEN6:1; /*!< bit:     22  Output Waveform 6 Inversion        */
    uint32_t INVEN7:1; /*!< bit:     23  Output Waveform 7 Inversion        */
    uint32_t FILTERVAL0:4; /*!< bit: 24..27  Non-Recoverable Fault Input 0 Filter Value */
    uint32_t FILTERVAL1:4; /*!< bit: 28..31  Non-Recoverable Fault Input 1 Filter Value */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t NRE:8; /*!< bit:  0.. 7  Non-Recoverable State x Output Enable */
    uint32_t NRV:8; /*!< bit:  8..15  Non-Recoverable State x Output Value */
    uint32_t INVEN:8; /*!< bit: 16..23  Output Waveform x Inversion        */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_DRVCTRL_Type;
# 677 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_DBGCTRL : (TCC Offset: 0x1E) (R/W  8) Debug Control -------- */

typedef union {
  struct {
    uint8_t DBGRUN:1; /*!< bit:      0  Debug Running Mode                 */
    uint8_t :1; /*!< bit:      1  Reserved                           */
    uint8_t FDDBD:1; /*!< bit:      2  Fault Detection on Debug Break Detection */
    uint8_t :5; /*!< bit:  3.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TCC_DBGCTRL_Type;
# 699 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_EVCTRL : (TCC Offset: 0x20) (R/W 32) Event Control -------- */

typedef union {
  struct {
    uint32_t EVACT0:3; /*!< bit:  0.. 2  Timer/counter Input Event0 Action  */
    uint32_t EVACT1:3; /*!< bit:  3.. 5  Timer/counter Input Event1 Action  */
    uint32_t CNTSEL:2; /*!< bit:  6.. 7  Timer/counter Output Event Mode    */
    uint32_t OVFEO:1; /*!< bit:      8  Overflow/Underflow Output Event Enable */
    uint32_t TRGEO:1; /*!< bit:      9  Retrigger Output Event Enable      */
    uint32_t CNTEO:1; /*!< bit:     10  Timer/counter Output Event Enable  */
    uint32_t :1; /*!< bit:     11  Reserved                           */
    uint32_t TCINV0:1; /*!< bit:     12  Inverted Event 0 Input Enable      */
    uint32_t TCINV1:1; /*!< bit:     13  Inverted Event 1 Input Enable      */
    uint32_t TCEI0:1; /*!< bit:     14  Timer/counter Event 0 Input Enable */
    uint32_t TCEI1:1; /*!< bit:     15  Timer/counter Event 1 Input Enable */
    uint32_t MCEI0:1; /*!< bit:     16  Match or Capture Channel 0 Event Input Enable */
    uint32_t MCEI1:1; /*!< bit:     17  Match or Capture Channel 1 Event Input Enable */
    uint32_t MCEI2:1; /*!< bit:     18  Match or Capture Channel 2 Event Input Enable */
    uint32_t MCEI3:1; /*!< bit:     19  Match or Capture Channel 3 Event Input Enable */
    uint32_t MCEI4:1; /*!< bit:     20  Match or Capture Channel 4 Event Input Enable */
    uint32_t MCEI5:1; /*!< bit:     21  Match or Capture Channel 5 Event Input Enable */
    uint32_t :2; /*!< bit: 22..23  Reserved                           */
    uint32_t MCEO0:1; /*!< bit:     24  Match or Capture Channel 0 Event Output Enable */
    uint32_t MCEO1:1; /*!< bit:     25  Match or Capture Channel 1 Event Output Enable */
    uint32_t MCEO2:1; /*!< bit:     26  Match or Capture Channel 2 Event Output Enable */
    uint32_t MCEO3:1; /*!< bit:     27  Match or Capture Channel 3 Event Output Enable */
    uint32_t MCEO4:1; /*!< bit:     28  Match or Capture Channel 4 Event Output Enable */
    uint32_t MCEO5:1; /*!< bit:     29  Match or Capture Channel 5 Event Output Enable */
    uint32_t :2; /*!< bit: 30..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :12; /*!< bit:  0..11  Reserved                           */
    uint32_t TCINV:2; /*!< bit: 12..13  Inverted Event x Input Enable      */
    uint32_t TCEI:2; /*!< bit: 14..15  Timer/counter Event x Input Enable */
    uint32_t MCEI:6; /*!< bit: 16..21  Match or Capture Channel x Event Input Enable */
    uint32_t :2; /*!< bit: 22..23  Reserved                           */
    uint32_t MCEO:6; /*!< bit: 24..29  Match or Capture Channel x Event Output Enable */
    uint32_t :2; /*!< bit: 30..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_EVCTRL_Type;
# 846 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_INTENCLR : (TCC Offset: 0x24) (R/W 32) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint32_t OVF:1; /*!< bit:      0  Overflow Interrupt Enable          */
    uint32_t TRG:1; /*!< bit:      1  Retrigger Interrupt Enable         */
    uint32_t CNT:1; /*!< bit:      2  Counter Interrupt Enable           */
    uint32_t ERR:1; /*!< bit:      3  Error Interrupt Enable             */
    uint32_t :6; /*!< bit:  4.. 9  Reserved                           */
    uint32_t UFS:1; /*!< bit:     10  Non-Recoverable Update Fault Interrupt Enable */
    uint32_t DFS:1; /*!< bit:     11  Non-Recoverable Debug Fault Interrupt Enable */
    uint32_t FAULTA:1; /*!< bit:     12  Recoverable Fault A Interrupt Enable */
    uint32_t FAULTB:1; /*!< bit:     13  Recoverable Fault B Interrupt Enable */
    uint32_t FAULT0:1; /*!< bit:     14  Non-Recoverable Fault 0 Interrupt Enable */
    uint32_t FAULT1:1; /*!< bit:     15  Non-Recoverable Fault 1 Interrupt Enable */
    uint32_t MC0:1; /*!< bit:     16  Match or Capture Channel 0 Interrupt Enable */
    uint32_t MC1:1; /*!< bit:     17  Match or Capture Channel 1 Interrupt Enable */
    uint32_t MC2:1; /*!< bit:     18  Match or Capture Channel 2 Interrupt Enable */
    uint32_t MC3:1; /*!< bit:     19  Match or Capture Channel 3 Interrupt Enable */
    uint32_t MC4:1; /*!< bit:     20  Match or Capture Channel 4 Interrupt Enable */
    uint32_t MC5:1; /*!< bit:     21  Match or Capture Channel 5 Interrupt Enable */
    uint32_t :10; /*!< bit: 22..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :16; /*!< bit:  0..15  Reserved                           */
    uint32_t MC:6; /*!< bit: 16..21  Match or Capture Channel x Interrupt Enable */
    uint32_t :10; /*!< bit: 22..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_INTENCLR_Type;
# 918 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_INTENSET : (TCC Offset: 0x28) (R/W 32) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint32_t OVF:1; /*!< bit:      0  Overflow Interrupt Enable          */
    uint32_t TRG:1; /*!< bit:      1  Retrigger Interrupt Enable         */
    uint32_t CNT:1; /*!< bit:      2  Counter Interrupt Enable           */
    uint32_t ERR:1; /*!< bit:      3  Error Interrupt Enable             */
    uint32_t :6; /*!< bit:  4.. 9  Reserved                           */
    uint32_t UFS:1; /*!< bit:     10  Non-Recoverable Update Fault Interrupt Enable */
    uint32_t DFS:1; /*!< bit:     11  Non-Recoverable Debug Fault Interrupt Enable */
    uint32_t FAULTA:1; /*!< bit:     12  Recoverable Fault A Interrupt Enable */
    uint32_t FAULTB:1; /*!< bit:     13  Recoverable Fault B Interrupt Enable */
    uint32_t FAULT0:1; /*!< bit:     14  Non-Recoverable Fault 0 Interrupt Enable */
    uint32_t FAULT1:1; /*!< bit:     15  Non-Recoverable Fault 1 Interrupt Enable */
    uint32_t MC0:1; /*!< bit:     16  Match or Capture Channel 0 Interrupt Enable */
    uint32_t MC1:1; /*!< bit:     17  Match or Capture Channel 1 Interrupt Enable */
    uint32_t MC2:1; /*!< bit:     18  Match or Capture Channel 2 Interrupt Enable */
    uint32_t MC3:1; /*!< bit:     19  Match or Capture Channel 3 Interrupt Enable */
    uint32_t MC4:1; /*!< bit:     20  Match or Capture Channel 4 Interrupt Enable */
    uint32_t MC5:1; /*!< bit:     21  Match or Capture Channel 5 Interrupt Enable */
    uint32_t :10; /*!< bit: 22..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :16; /*!< bit:  0..15  Reserved                           */
    uint32_t MC:6; /*!< bit: 16..21  Match or Capture Channel x Interrupt Enable */
    uint32_t :10; /*!< bit: 22..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_INTENSET_Type;
# 990 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_INTFLAG : (TCC Offset: 0x2C) (R/W 32) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t OVF:1; /*!< bit:      0  Overflow                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t TRG:1; /*!< bit:      1  Retrigger                          */
    volatile /*!< Defines 'read only' permissions */ uint32_t CNT:1; /*!< bit:      2  Counter                            */
    volatile /*!< Defines 'read only' permissions */ uint32_t ERR:1; /*!< bit:      3  Error                              */
    volatile /*!< Defines 'read only' permissions */ uint32_t :6; /*!< bit:  4.. 9  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t UFS:1; /*!< bit:     10  Non-Recoverable Update Fault       */
    volatile /*!< Defines 'read only' permissions */ uint32_t DFS:1; /*!< bit:     11  Non-Recoverable Debug Fault        */
    volatile /*!< Defines 'read only' permissions */ uint32_t FAULTA:1; /*!< bit:     12  Recoverable Fault A                */
    volatile /*!< Defines 'read only' permissions */ uint32_t FAULTB:1; /*!< bit:     13  Recoverable Fault B                */
    volatile /*!< Defines 'read only' permissions */ uint32_t FAULT0:1; /*!< bit:     14  Non-Recoverable Fault 0            */
    volatile /*!< Defines 'read only' permissions */ uint32_t FAULT1:1; /*!< bit:     15  Non-Recoverable Fault 1            */
    volatile /*!< Defines 'read only' permissions */ uint32_t MC0:1; /*!< bit:     16  Match or Capture 0                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t MC1:1; /*!< bit:     17  Match or Capture 1                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t MC2:1; /*!< bit:     18  Match or Capture 2                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t MC3:1; /*!< bit:     19  Match or Capture 3                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t MC4:1; /*!< bit:     20  Match or Capture 4                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t MC5:1; /*!< bit:     21  Match or Capture 5                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t :10; /*!< bit: 22..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint32_t :16; /*!< bit:  0..15  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint32_t MC:6; /*!< bit: 16..21  Match or Capture x                 */
    volatile /*!< Defines 'read only' permissions */ uint32_t :10; /*!< bit: 22..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_INTFLAG_Type;
# 1062 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_STATUS : (TCC Offset: 0x30) (R/W 32) Status -------- */

typedef union {
  struct {
    uint32_t STOP:1; /*!< bit:      0  Stop                               */
    uint32_t IDX:1; /*!< bit:      1  Ramp                               */
    uint32_t UFS:1; /*!< bit:      2  Non-recoverable Update Fault State */
    uint32_t DFS:1; /*!< bit:      3  Non-Recoverable Debug Fault State  */
    uint32_t SLAVE:1; /*!< bit:      4  Slave                              */
    uint32_t PATTBUFV:1; /*!< bit:      5  Pattern Buffer Valid               */
    uint32_t :1; /*!< bit:      6  Reserved                           */
    uint32_t PERBUFV:1; /*!< bit:      7  Period Buffer Valid                */
    uint32_t FAULTAIN:1; /*!< bit:      8  Recoverable Fault A Input          */
    uint32_t FAULTBIN:1; /*!< bit:      9  Recoverable Fault B Input          */
    uint32_t FAULT0IN:1; /*!< bit:     10  Non-Recoverable Fault0 Input       */
    uint32_t FAULT1IN:1; /*!< bit:     11  Non-Recoverable Fault1 Input       */
    uint32_t FAULTA:1; /*!< bit:     12  Recoverable Fault A State          */
    uint32_t FAULTB:1; /*!< bit:     13  Recoverable Fault B State          */
    uint32_t FAULT0:1; /*!< bit:     14  Non-Recoverable Fault 0 State      */
    uint32_t FAULT1:1; /*!< bit:     15  Non-Recoverable Fault 1 State      */
    uint32_t CCBUFV0:1; /*!< bit:     16  Compare Channel 0 Buffer Valid     */
    uint32_t CCBUFV1:1; /*!< bit:     17  Compare Channel 1 Buffer Valid     */
    uint32_t CCBUFV2:1; /*!< bit:     18  Compare Channel 2 Buffer Valid     */
    uint32_t CCBUFV3:1; /*!< bit:     19  Compare Channel 3 Buffer Valid     */
    uint32_t CCBUFV4:1; /*!< bit:     20  Compare Channel 4 Buffer Valid     */
    uint32_t CCBUFV5:1; /*!< bit:     21  Compare Channel 5 Buffer Valid     */
    uint32_t :2; /*!< bit: 22..23  Reserved                           */
    uint32_t CMP0:1; /*!< bit:     24  Compare Channel 0 Value            */
    uint32_t CMP1:1; /*!< bit:     25  Compare Channel 1 Value            */
    uint32_t CMP2:1; /*!< bit:     26  Compare Channel 2 Value            */
    uint32_t CMP3:1; /*!< bit:     27  Compare Channel 3 Value            */
    uint32_t CMP4:1; /*!< bit:     28  Compare Channel 4 Value            */
    uint32_t CMP5:1; /*!< bit:     29  Compare Channel 5 Value            */
    uint32_t :2; /*!< bit: 30..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :16; /*!< bit:  0..15  Reserved                           */
    uint32_t CCBUFV:6; /*!< bit: 16..21  Compare Channel x Buffer Valid     */
    uint32_t :2; /*!< bit: 22..23  Reserved                           */
    uint32_t CMP:6; /*!< bit: 24..29  Compare Channel x Value            */
    uint32_t :2; /*!< bit: 30..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_STATUS_Type;
# 1173 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_COUNT : (TCC Offset: 0x34) (R/W 32) Count -------- */

typedef union {
  struct { // DITH4 mode
    uint32_t :4; /*!< bit:  0.. 3  Reserved                           */
    uint32_t COUNT:20; /*!< bit:  4..23  Counter Value                      */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH4; /*!< Structure used for DITH4                        */
  struct { // DITH5 mode
    uint32_t :5; /*!< bit:  0.. 4  Reserved                           */
    uint32_t COUNT:19; /*!< bit:  5..23  Counter Value                      */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH5; /*!< Structure used for DITH5                        */
  struct { // DITH6 mode
    uint32_t :6; /*!< bit:  0.. 5  Reserved                           */
    uint32_t COUNT:18; /*!< bit:  6..23  Counter Value                      */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH6; /*!< Structure used for DITH6                        */
  struct {
    uint32_t COUNT:24; /*!< bit:  0..23  Counter Value                      */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_COUNT_Type;





// DITH4 mode





// DITH5 mode





// DITH6 mode
# 1225 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_PATT : (TCC Offset: 0x38) (R/W 16) Pattern -------- */

typedef union {
  struct {
    uint16_t PGE0:1; /*!< bit:      0  Pattern Generator 0 Output Enable  */
    uint16_t PGE1:1; /*!< bit:      1  Pattern Generator 1 Output Enable  */
    uint16_t PGE2:1; /*!< bit:      2  Pattern Generator 2 Output Enable  */
    uint16_t PGE3:1; /*!< bit:      3  Pattern Generator 3 Output Enable  */
    uint16_t PGE4:1; /*!< bit:      4  Pattern Generator 4 Output Enable  */
    uint16_t PGE5:1; /*!< bit:      5  Pattern Generator 5 Output Enable  */
    uint16_t PGE6:1; /*!< bit:      6  Pattern Generator 6 Output Enable  */
    uint16_t PGE7:1; /*!< bit:      7  Pattern Generator 7 Output Enable  */
    uint16_t PGV0:1; /*!< bit:      8  Pattern Generator 0 Output Value   */
    uint16_t PGV1:1; /*!< bit:      9  Pattern Generator 1 Output Value   */
    uint16_t PGV2:1; /*!< bit:     10  Pattern Generator 2 Output Value   */
    uint16_t PGV3:1; /*!< bit:     11  Pattern Generator 3 Output Value   */
    uint16_t PGV4:1; /*!< bit:     12  Pattern Generator 4 Output Value   */
    uint16_t PGV5:1; /*!< bit:     13  Pattern Generator 5 Output Value   */
    uint16_t PGV6:1; /*!< bit:     14  Pattern Generator 6 Output Value   */
    uint16_t PGV7:1; /*!< bit:     15  Pattern Generator 7 Output Value   */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t PGE:8; /*!< bit:  0.. 7  Pattern Generator x Output Enable  */
    uint16_t PGV:8; /*!< bit:  8..15  Pattern Generator x Output Value   */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} TCC_PATT_Type;
# 1297 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_WAVE : (TCC Offset: 0x3C) (R/W 32) Waveform Control -------- */

typedef union {
  struct {
    uint32_t WAVEGEN:3; /*!< bit:  0.. 2  Waveform Generation                */
    uint32_t :1; /*!< bit:      3  Reserved                           */
    uint32_t RAMP:2; /*!< bit:  4.. 5  Ramp Mode                          */
    uint32_t :1; /*!< bit:      6  Reserved                           */
    uint32_t CIPEREN:1; /*!< bit:      7  Circular period Enable             */
    uint32_t CICCEN0:1; /*!< bit:      8  Circular Channel 0 Enable          */
    uint32_t CICCEN1:1; /*!< bit:      9  Circular Channel 1 Enable          */
    uint32_t CICCEN2:1; /*!< bit:     10  Circular Channel 2 Enable          */
    uint32_t CICCEN3:1; /*!< bit:     11  Circular Channel 3 Enable          */
    uint32_t :4; /*!< bit: 12..15  Reserved                           */
    uint32_t POL0:1; /*!< bit:     16  Channel 0 Polarity                 */
    uint32_t POL1:1; /*!< bit:     17  Channel 1 Polarity                 */
    uint32_t POL2:1; /*!< bit:     18  Channel 2 Polarity                 */
    uint32_t POL3:1; /*!< bit:     19  Channel 3 Polarity                 */
    uint32_t POL4:1; /*!< bit:     20  Channel 4 Polarity                 */
    uint32_t POL5:1; /*!< bit:     21  Channel 5 Polarity                 */
    uint32_t :2; /*!< bit: 22..23  Reserved                           */
    uint32_t SWAP0:1; /*!< bit:     24  Swap DTI Output Pair 0             */
    uint32_t SWAP1:1; /*!< bit:     25  Swap DTI Output Pair 1             */
    uint32_t SWAP2:1; /*!< bit:     26  Swap DTI Output Pair 2             */
    uint32_t SWAP3:1; /*!< bit:     27  Swap DTI Output Pair 3             */
    uint32_t :4; /*!< bit: 28..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint32_t :8; /*!< bit:  0.. 7  Reserved                           */
    uint32_t CICCEN:4; /*!< bit:  8..11  Circular Channel x Enable          */
    uint32_t :4; /*!< bit: 12..15  Reserved                           */
    uint32_t POL:6; /*!< bit: 16..21  Channel x Polarity                 */
    uint32_t :2; /*!< bit: 22..23  Reserved                           */
    uint32_t SWAP:4; /*!< bit: 24..27  Swap DTI Output Pair x             */
    uint32_t :4; /*!< bit: 28..31  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_WAVE_Type;
# 1409 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_PER : (TCC Offset: 0x40) (R/W 32) Period -------- */

typedef union {
  struct { // DITH4 mode
    uint32_t DITHER:4; /*!< bit:  0.. 3  Dithering Cycle Number             */
    uint32_t PER:20; /*!< bit:  4..23  Period Value                       */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH4; /*!< Structure used for DITH4                        */
  struct { // DITH5 mode
    uint32_t DITHER:5; /*!< bit:  0.. 4  Dithering Cycle Number             */
    uint32_t PER:19; /*!< bit:  5..23  Period Value                       */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH5; /*!< Structure used for DITH5                        */
  struct { // DITH6 mode
    uint32_t DITHER:6; /*!< bit:  0.. 5  Dithering Cycle Number             */
    uint32_t PER:18; /*!< bit:  6..23  Period Value                       */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH6; /*!< Structure used for DITH6                        */
  struct {
    uint32_t PER:24; /*!< bit:  0..23  Period Value                       */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_PER_Type;





// DITH4 mode
# 1447 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
// DITH5 mode
# 1456 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
// DITH6 mode
# 1470 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_CC : (TCC Offset: 0x44) (R/W 32) Compare and Capture -------- */

typedef union {
  struct { // DITH4 mode
    uint32_t DITHER:4; /*!< bit:  0.. 3  Dithering Cycle Number             */
    uint32_t CC:20; /*!< bit:  4..23  Channel Compare/Capture Value      */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH4; /*!< Structure used for DITH4                        */
  struct { // DITH5 mode
    uint32_t DITHER:5; /*!< bit:  0.. 4  Dithering Cycle Number             */
    uint32_t CC:19; /*!< bit:  5..23  Channel Compare/Capture Value      */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH5; /*!< Structure used for DITH5                        */
  struct { // DITH6 mode
    uint32_t DITHER:6; /*!< bit:  0.. 5  Dithering Cycle Number             */
    uint32_t CC:18; /*!< bit:  6..23  Channel Compare/Capture Value      */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH6; /*!< Structure used for DITH6                        */
  struct {
    uint32_t CC:24; /*!< bit:  0..23  Channel Compare/Capture Value      */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_CC_Type;





// DITH4 mode
# 1508 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
// DITH5 mode
# 1517 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
// DITH6 mode
# 1531 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_PATTBUF : (TCC Offset: 0x64) (R/W 16) Pattern Buffer -------- */

typedef union {
  struct {
    uint16_t PGEB0:1; /*!< bit:      0  Pattern Generator 0 Output Enable Buffer */
    uint16_t PGEB1:1; /*!< bit:      1  Pattern Generator 1 Output Enable Buffer */
    uint16_t PGEB2:1; /*!< bit:      2  Pattern Generator 2 Output Enable Buffer */
    uint16_t PGEB3:1; /*!< bit:      3  Pattern Generator 3 Output Enable Buffer */
    uint16_t PGEB4:1; /*!< bit:      4  Pattern Generator 4 Output Enable Buffer */
    uint16_t PGEB5:1; /*!< bit:      5  Pattern Generator 5 Output Enable Buffer */
    uint16_t PGEB6:1; /*!< bit:      6  Pattern Generator 6 Output Enable Buffer */
    uint16_t PGEB7:1; /*!< bit:      7  Pattern Generator 7 Output Enable Buffer */
    uint16_t PGVB0:1; /*!< bit:      8  Pattern Generator 0 Output Enable  */
    uint16_t PGVB1:1; /*!< bit:      9  Pattern Generator 1 Output Enable  */
    uint16_t PGVB2:1; /*!< bit:     10  Pattern Generator 2 Output Enable  */
    uint16_t PGVB3:1; /*!< bit:     11  Pattern Generator 3 Output Enable  */
    uint16_t PGVB4:1; /*!< bit:     12  Pattern Generator 4 Output Enable  */
    uint16_t PGVB5:1; /*!< bit:     13  Pattern Generator 5 Output Enable  */
    uint16_t PGVB6:1; /*!< bit:     14  Pattern Generator 6 Output Enable  */
    uint16_t PGVB7:1; /*!< bit:     15  Pattern Generator 7 Output Enable  */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t PGEB:8; /*!< bit:  0.. 7  Pattern Generator x Output Enable Buffer */
    uint16_t PGVB:8; /*!< bit:  8..15  Pattern Generator x Output Enable  */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} TCC_PATTBUF_Type;
# 1603 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_PERBUF : (TCC Offset: 0x6C) (R/W 32) Period Buffer -------- */

typedef union {
  struct { // DITH4 mode
    uint32_t DITHERBUF:4; /*!< bit:  0.. 3  Dithering Buffer Cycle Number      */
    uint32_t PERBUF:20; /*!< bit:  4..23  Period Buffer Value                */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH4; /*!< Structure used for DITH4                        */
  struct { // DITH5 mode
    uint32_t DITHERBUF:5; /*!< bit:  0.. 4  Dithering Buffer Cycle Number      */
    uint32_t PERBUF:19; /*!< bit:  5..23  Period Buffer Value                */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH5; /*!< Structure used for DITH5                        */
  struct { // DITH6 mode
    uint32_t DITHERBUF:6; /*!< bit:  0.. 5  Dithering Buffer Cycle Number      */
    uint32_t PERBUF:18; /*!< bit:  6..23  Period Buffer Value                */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH6; /*!< Structure used for DITH6                        */
  struct {
    uint32_t PERBUF:24; /*!< bit:  0..23  Period Buffer Value                */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_PERBUF_Type;





// DITH4 mode
# 1641 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
// DITH5 mode
# 1650 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
// DITH6 mode
# 1664 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/* -------- TCC_CCBUF : (TCC Offset: 0x70) (R/W 32) Compare and Capture Buffer -------- */

typedef union {
  struct { // DITH4 mode
    uint32_t CCBUF:4; /*!< bit:  0.. 3  Channel Compare/Capture Buffer Value */
    uint32_t DITHERBUF:20; /*!< bit:  4..23  Dithering Buffer Cycle Number      */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH4; /*!< Structure used for DITH4                        */
  struct { // DITH5 mode
    uint32_t DITHERBUF:5; /*!< bit:  0.. 4  Dithering Buffer Cycle Number      */
    uint32_t CCBUF:19; /*!< bit:  5..23  Channel Compare/Capture Buffer Value */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH5; /*!< Structure used for DITH5                        */
  struct { // DITH6 mode
    uint32_t DITHERBUF:6; /*!< bit:  0.. 5  Dithering Buffer Cycle Number      */
    uint32_t CCBUF:18; /*!< bit:  6..23  Channel Compare/Capture Buffer Value */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } DITH6; /*!< Structure used for DITH6                        */
  struct {
    uint32_t CCBUF:24; /*!< bit:  0..23  Channel Compare/Capture Buffer Value */
    uint32_t :8; /*!< bit: 24..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TCC_CCBUF_Type;





// DITH4 mode
# 1702 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
// DITH5 mode
# 1711 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
// DITH6 mode
# 1725 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/tcc.h"
/** \brief TCC hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ TCC_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W 32) Control A */
  volatile /*!< Defines 'read / write' permissions */ TCC_CTRLBCLR_Type CTRLBCLR; /**< \brief Offset: 0x04 (R/W  8) Control B Clear */
  volatile /*!< Defines 'read / write' permissions */ TCC_CTRLBSET_Type CTRLBSET; /**< \brief Offset: 0x05 (R/W  8) Control B Set */
       RoReg8 Reserved1[0x2];
  volatile /*!< Defines 'read only' permissions */ TCC_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x08 (R/  32) Synchronization Busy */
  volatile /*!< Defines 'read / write' permissions */ TCC_FCTRLA_Type FCTRLA; /**< \brief Offset: 0x0C (R/W 32) Recoverable Fault A Configuration */
  volatile /*!< Defines 'read / write' permissions */ TCC_FCTRLB_Type FCTRLB; /**< \brief Offset: 0x10 (R/W 32) Recoverable Fault B Configuration */
  volatile /*!< Defines 'read / write' permissions */ TCC_WEXCTRL_Type WEXCTRL; /**< \brief Offset: 0x14 (R/W 32) Waveform Extension Configuration */
  volatile /*!< Defines 'read / write' permissions */ TCC_DRVCTRL_Type DRVCTRL; /**< \brief Offset: 0x18 (R/W 32) Driver Control */
       RoReg8 Reserved2[0x2];
  volatile /*!< Defines 'read / write' permissions */ TCC_DBGCTRL_Type DBGCTRL; /**< \brief Offset: 0x1E (R/W  8) Debug Control */
       RoReg8 Reserved3[0x1];
  volatile /*!< Defines 'read / write' permissions */ TCC_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x20 (R/W 32) Event Control */
  volatile /*!< Defines 'read / write' permissions */ TCC_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x24 (R/W 32) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ TCC_INTENSET_Type INTENSET; /**< \brief Offset: 0x28 (R/W 32) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ TCC_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x2C (R/W 32) Interrupt Flag Status and Clear */
  volatile /*!< Defines 'read / write' permissions */ TCC_STATUS_Type STATUS; /**< \brief Offset: 0x30 (R/W 32) Status */
  volatile /*!< Defines 'read / write' permissions */ TCC_COUNT_Type COUNT; /**< \brief Offset: 0x34 (R/W 32) Count */
  volatile /*!< Defines 'read / write' permissions */ TCC_PATT_Type PATT; /**< \brief Offset: 0x38 (R/W 16) Pattern */
       RoReg8 Reserved4[0x2];
  volatile /*!< Defines 'read / write' permissions */ TCC_WAVE_Type WAVE; /**< \brief Offset: 0x3C (R/W 32) Waveform Control */
  volatile /*!< Defines 'read / write' permissions */ TCC_PER_Type PER; /**< \brief Offset: 0x40 (R/W 32) Period */
  volatile /*!< Defines 'read / write' permissions */ TCC_CC_Type CC[6]; /**< \brief Offset: 0x44 (R/W 32) Compare and Capture */
       RoReg8 Reserved5[0x8];
  volatile /*!< Defines 'read / write' permissions */ TCC_PATTBUF_Type PATTBUF; /**< \brief Offset: 0x64 (R/W 16) Pattern Buffer */
       RoReg8 Reserved6[0x6];
  volatile /*!< Defines 'read / write' permissions */ TCC_PERBUF_Type PERBUF; /**< \brief Offset: 0x6C (R/W 32) Period Buffer */
  volatile /*!< Defines 'read / write' permissions */ TCC_CCBUF_Type CCBUF[6]; /**< \brief Offset: 0x70 (R/W 32) Compare and Capture Buffer */
} Tcc;


/*@}*/
# 610 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/trng.h" 1
/**
 * \file
 *
 * \brief Component description for TRNG
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR TRNG */
/* ========================================================================== */
/** \addtogroup SAMD51_TRNG True Random Generator */
/*@{*/




/* -------- TRNG_CTRLA : (TRNG Offset: 0x00) (R/W  8) Control A -------- */

typedef union {
  struct {
    uint8_t :1; /*!< bit:      0  Reserved                           */
    uint8_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint8_t :4; /*!< bit:  2.. 5  Reserved                           */
    uint8_t RUNSTDBY:1; /*!< bit:      6  Run in Standby                     */
    uint8_t :1; /*!< bit:      7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TRNG_CTRLA_Type;
# 64 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/trng.h"
/* -------- TRNG_EVCTRL : (TRNG Offset: 0x04) (R/W  8) Event Control -------- */

typedef union {
  struct {
    uint8_t DATARDYEO:1; /*!< bit:      0  Data Ready Event Output            */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TRNG_EVCTRL_Type;
# 82 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/trng.h"
/* -------- TRNG_INTENCLR : (TRNG Offset: 0x08) (R/W  8) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t DATARDY:1; /*!< bit:      0  Data Ready Interrupt Enable        */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TRNG_INTENCLR_Type;
# 100 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/trng.h"
/* -------- TRNG_INTENSET : (TRNG Offset: 0x09) (R/W  8) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t DATARDY:1; /*!< bit:      0  Data Ready Interrupt Enable        */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TRNG_INTENSET_Type;
# 118 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/trng.h"
/* -------- TRNG_INTFLAG : (TRNG Offset: 0x0A) (R/W  8) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t DATARDY:1; /*!< bit:      0  Data Ready Interrupt Flag          */
    volatile /*!< Defines 'read only' permissions */ uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} TRNG_INTFLAG_Type;
# 136 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/trng.h"
/* -------- TRNG_DATA : (TRNG Offset: 0x20) (R/  32) Output Data -------- */

typedef union {
  struct {
    uint32_t DATA:32; /*!< bit:  0..31  Output Data                        */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} TRNG_DATA_Type;
# 154 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/trng.h"
/** \brief TRNG hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ TRNG_CTRLA_Type CTRLA; /**< \brief Offset: 0x00 (R/W  8) Control A */
       RoReg8 Reserved1[0x3];
  volatile /*!< Defines 'read / write' permissions */ TRNG_EVCTRL_Type EVCTRL; /**< \brief Offset: 0x04 (R/W  8) Event Control */
       RoReg8 Reserved2[0x3];
  volatile /*!< Defines 'read / write' permissions */ TRNG_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x08 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ TRNG_INTENSET_Type INTENSET; /**< \brief Offset: 0x09 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ TRNG_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x0A (R/W  8) Interrupt Flag Status and Clear */
       RoReg8 Reserved3[0x15];
  volatile /*!< Defines 'read only' permissions */ TRNG_DATA_Type DATA; /**< \brief Offset: 0x20 (R/  32) Output Data */
} Trng;


/*@}*/
# 611 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h" 1
/**
 * \file
 *
 * \brief Component description for USB
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR USB */
/* ========================================================================== */
/** \addtogroup SAMD51_USB Universal Serial Bus */
/*@{*/




/* -------- USB_CTRLA : (USB Offset: 0x000) (R/W  8) Control A -------- */

typedef union {
  struct {
    uint8_t SWRST:1; /*!< bit:      0  Software Reset                     */
    uint8_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint8_t RUNSTDBY:1; /*!< bit:      2  Run in Standby Mode                */
    uint8_t :4; /*!< bit:  3.. 6  Reserved                           */
    uint8_t MODE:1; /*!< bit:      7  Operating Mode                     */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_CTRLA_Type;
# 72 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_SYNCBUSY : (USB Offset: 0x002) (R/   8) Synchronization Busy -------- */

typedef union {
  struct {
    uint8_t SWRST:1; /*!< bit:      0  Software Reset Synchronization Busy */
    uint8_t ENABLE:1; /*!< bit:      1  Enable Synchronization Busy        */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_SYNCBUSY_Type;
# 93 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_QOSCTRL : (USB Offset: 0x003) (R/W  8) USB Quality Of Service -------- */

typedef union {
  struct {
    uint8_t CQOS:2; /*!< bit:  0.. 1  Configuration Quality of Service   */
    uint8_t DQOS:2; /*!< bit:  2.. 3  Data Quality of Service            */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_QOSCTRL_Type;
# 116 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_CTRLB : (USB Offset: 0x008) (R/W 16) DEVICE DEVICE Control B -------- */

typedef union {
  struct {
    uint16_t DETACH:1; /*!< bit:      0  Detach                             */
    uint16_t UPRSM:1; /*!< bit:      1  Upstream Resume                    */
    uint16_t SPDCONF:2; /*!< bit:  2.. 3  Speed Configuration                */
    uint16_t NREPLY:1; /*!< bit:      4  No Reply                           */
    uint16_t TSTJ:1; /*!< bit:      5  Test mode J                        */
    uint16_t TSTK:1; /*!< bit:      6  Test mode K                        */
    uint16_t TSTPCKT:1; /*!< bit:      7  Test packet mode                   */
    uint16_t OPMODE2:1; /*!< bit:      8  Specific Operational Mode          */
    uint16_t GNAK:1; /*!< bit:      9  Global NAK                         */
    uint16_t LPMHDSK:2; /*!< bit: 10..11  Link Power Management Handshake    */
    uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_DEVICE_CTRLB_Type;
# 179 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_CTRLB : (USB Offset: 0x008) (R/W 16) HOST HOST Control B -------- */

typedef union {
  struct {
    uint16_t :1; /*!< bit:      0  Reserved                           */
    uint16_t RESUME:1; /*!< bit:      1  Send USB Resume                    */
    uint16_t SPDCONF:2; /*!< bit:  2.. 3  Speed Configuration for Host       */
    uint16_t AUTORESUME:1; /*!< bit:      4  Auto Resume Enable                 */
    uint16_t TSTJ:1; /*!< bit:      5  Test mode J                        */
    uint16_t TSTK:1; /*!< bit:      6  Test mode K                        */
    uint16_t :1; /*!< bit:      7  Reserved                           */
    uint16_t SOFE:1; /*!< bit:      8  Start of Frame Generation Enable   */
    uint16_t BUSRESET:1; /*!< bit:      9  Send USB Reset                     */
    uint16_t VBUSOK:1; /*!< bit:     10  VBUS is OK                         */
    uint16_t L1RESUME:1; /*!< bit:     11  Send L1 Resume                     */
    uint16_t :4; /*!< bit: 12..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_HOST_CTRLB_Type;
# 228 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_DADD : (USB Offset: 0x00A) (R/W  8) DEVICE DEVICE Device Address -------- */

typedef union {
  struct {
    uint8_t DADD:7; /*!< bit:  0.. 6  Device Address                     */
    uint8_t ADDEN:1; /*!< bit:      7  Device Address Enable              */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_DEVICE_DADD_Type;
# 249 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_HSOFC : (USB Offset: 0x00A) (R/W  8) HOST HOST Host Start Of Frame Control -------- */

typedef union {
  struct {
    uint8_t FLENC:4; /*!< bit:  0.. 3  Frame Length Control               */
    uint8_t :3; /*!< bit:  4.. 6  Reserved                           */
    uint8_t FLENCE:1; /*!< bit:      7  Frame Length Control Enable        */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_HOST_HSOFC_Type;
# 271 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_STATUS : (USB Offset: 0x00C) (R/   8) DEVICE DEVICE Status -------- */

typedef union {
  struct {
    uint8_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint8_t SPEED:2; /*!< bit:  2.. 3  Speed Status                       */
    uint8_t :2; /*!< bit:  4.. 5  Reserved                           */
    uint8_t LINESTATE:2; /*!< bit:  6.. 7  USB Line State Status              */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_DEVICE_STATUS_Type;
# 307 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_STATUS : (USB Offset: 0x00C) (R/W  8) HOST HOST Status -------- */

typedef union {
  struct {
    uint8_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint8_t SPEED:2; /*!< bit:  2.. 3  Speed Status                       */
    uint8_t :2; /*!< bit:  4.. 5  Reserved                           */
    uint8_t LINESTATE:2; /*!< bit:  6.. 7  USB Line State Status              */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_HOST_STATUS_Type;
# 331 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_FSMSTATUS : (USB Offset: 0x00D) (R/   8) Finite State Machine Status -------- */

typedef union {
  struct {
    uint8_t FSMSTATE:7; /*!< bit:  0.. 6  Fine State Machine Status          */
    uint8_t :1; /*!< bit:      7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_FSMSTATUS_Type;
# 364 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_FNUM : (USB Offset: 0x010) (R/  16) DEVICE DEVICE Device Frame Number -------- */

typedef union {
  struct {
    uint16_t MFNUM:3; /*!< bit:  0.. 2  Micro Frame Number                 */
    uint16_t FNUM:11; /*!< bit:  3..13  Frame Number                       */
    uint16_t :1; /*!< bit:     14  Reserved                           */
    uint16_t FNCERR:1; /*!< bit:     15  Frame Number CRC Error             */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_DEVICE_FNUM_Type;
# 390 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_FNUM : (USB Offset: 0x010) (R/W 16) HOST HOST Host Frame Number -------- */

typedef union {
  struct {
    uint16_t MFNUM:3; /*!< bit:  0.. 2  Micro Frame Number                 */
    uint16_t FNUM:11; /*!< bit:  3..13  Frame Number                       */
    uint16_t :2; /*!< bit: 14..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_HOST_FNUM_Type;
# 413 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_FLENHIGH : (USB Offset: 0x012) (R/   8) HOST HOST Host Frame Length -------- */

typedef union {
  struct {
    uint8_t FLENHIGH:8; /*!< bit:  0.. 7  Frame Length                       */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_HOST_FLENHIGH_Type;
# 431 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_INTENCLR : (USB Offset: 0x014) (R/W 16) DEVICE DEVICE Device Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint16_t SUSPEND:1; /*!< bit:      0  Suspend Interrupt Enable           */
    uint16_t MSOF:1; /*!< bit:      1  Micro Start of Frame Interrupt Enable in High Speed Mode */
    uint16_t SOF:1; /*!< bit:      2  Start Of Frame Interrupt Enable    */
    uint16_t EORST:1; /*!< bit:      3  End of Reset Interrupt Enable      */
    uint16_t WAKEUP:1; /*!< bit:      4  Wake Up Interrupt Enable           */
    uint16_t EORSM:1; /*!< bit:      5  End Of Resume Interrupt Enable     */
    uint16_t UPRSM:1; /*!< bit:      6  Upstream Resume Interrupt Enable   */
    uint16_t RAMACER:1; /*!< bit:      7  Ram Access Interrupt Enable        */
    uint16_t LPMNYET:1; /*!< bit:      8  Link Power Management Not Yet Interrupt Enable */
    uint16_t LPMSUSP:1; /*!< bit:      9  Link Power Management Suspend Interrupt Enable */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_DEVICE_INTENCLR_Type;
# 476 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_INTENCLR : (USB Offset: 0x014) (R/W 16) HOST HOST Host Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint16_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint16_t HSOF:1; /*!< bit:      2  Host Start Of Frame Interrupt Disable */
    uint16_t RST:1; /*!< bit:      3  BUS Reset Interrupt Disable        */
    uint16_t WAKEUP:1; /*!< bit:      4  Wake Up Interrupt Disable          */
    uint16_t DNRSM:1; /*!< bit:      5  DownStream to Device Interrupt Disable */
    uint16_t UPRSM:1; /*!< bit:      6  Upstream Resume from Device Interrupt Disable */
    uint16_t RAMACER:1; /*!< bit:      7  Ram Access Interrupt Disable       */
    uint16_t DCONN:1; /*!< bit:      8  Device Connection Interrupt Disable */
    uint16_t DDISC:1; /*!< bit:      9  Device Disconnection Interrupt Disable */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_HOST_INTENCLR_Type;
# 516 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_INTENSET : (USB Offset: 0x018) (R/W 16) DEVICE DEVICE Device Interrupt Enable Set -------- */

typedef union {
  struct {
    uint16_t SUSPEND:1; /*!< bit:      0  Suspend Interrupt Enable           */
    uint16_t MSOF:1; /*!< bit:      1  Micro Start of Frame Interrupt Enable in High Speed Mode */
    uint16_t SOF:1; /*!< bit:      2  Start Of Frame Interrupt Enable    */
    uint16_t EORST:1; /*!< bit:      3  End of Reset Interrupt Enable      */
    uint16_t WAKEUP:1; /*!< bit:      4  Wake Up Interrupt Enable           */
    uint16_t EORSM:1; /*!< bit:      5  End Of Resume Interrupt Enable     */
    uint16_t UPRSM:1; /*!< bit:      6  Upstream Resume Interrupt Enable   */
    uint16_t RAMACER:1; /*!< bit:      7  Ram Access Interrupt Enable        */
    uint16_t LPMNYET:1; /*!< bit:      8  Link Power Management Not Yet Interrupt Enable */
    uint16_t LPMSUSP:1; /*!< bit:      9  Link Power Management Suspend Interrupt Enable */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_DEVICE_INTENSET_Type;
# 561 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_INTENSET : (USB Offset: 0x018) (R/W 16) HOST HOST Host Interrupt Enable Set -------- */

typedef union {
  struct {
    uint16_t :2; /*!< bit:  0.. 1  Reserved                           */
    uint16_t HSOF:1; /*!< bit:      2  Host Start Of Frame Interrupt Enable */
    uint16_t RST:1; /*!< bit:      3  Bus Reset Interrupt Enable         */
    uint16_t WAKEUP:1; /*!< bit:      4  Wake Up Interrupt Enable           */
    uint16_t DNRSM:1; /*!< bit:      5  DownStream to the Device Interrupt Enable */
    uint16_t UPRSM:1; /*!< bit:      6  Upstream Resume fromthe device Interrupt Enable */
    uint16_t RAMACER:1; /*!< bit:      7  Ram Access Interrupt Enable        */
    uint16_t DCONN:1; /*!< bit:      8  Link Power Management Interrupt Enable */
    uint16_t DDISC:1; /*!< bit:      9  Device Disconnection Interrupt Enable */
    uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_HOST_INTENSET_Type;
# 601 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_INTFLAG : (USB Offset: 0x01C) (R/W 16) DEVICE DEVICE Device Interrupt Flag -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint16_t SUSPEND:1; /*!< bit:      0  Suspend                            */
    volatile /*!< Defines 'read only' permissions */ uint16_t MSOF:1; /*!< bit:      1  Micro Start of Frame in High Speed Mode */
    volatile /*!< Defines 'read only' permissions */ uint16_t SOF:1; /*!< bit:      2  Start Of Frame                     */
    volatile /*!< Defines 'read only' permissions */ uint16_t EORST:1; /*!< bit:      3  End of Reset                       */
    volatile /*!< Defines 'read only' permissions */ uint16_t WAKEUP:1; /*!< bit:      4  Wake Up                            */
    volatile /*!< Defines 'read only' permissions */ uint16_t EORSM:1; /*!< bit:      5  End Of Resume                      */
    volatile /*!< Defines 'read only' permissions */ uint16_t UPRSM:1; /*!< bit:      6  Upstream Resume                    */
    volatile /*!< Defines 'read only' permissions */ uint16_t RAMACER:1; /*!< bit:      7  Ram Access                         */
    volatile /*!< Defines 'read only' permissions */ uint16_t LPMNYET:1; /*!< bit:      8  Link Power Management Not Yet      */
    volatile /*!< Defines 'read only' permissions */ uint16_t LPMSUSP:1; /*!< bit:      9  Link Power Management Suspend      */
    volatile /*!< Defines 'read only' permissions */ uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_DEVICE_INTFLAG_Type;
# 646 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_INTFLAG : (USB Offset: 0x01C) (R/W 16) HOST HOST Host Interrupt Flag -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint16_t :2; /*!< bit:  0.. 1  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint16_t HSOF:1; /*!< bit:      2  Host Start Of Frame                */
    volatile /*!< Defines 'read only' permissions */ uint16_t RST:1; /*!< bit:      3  Bus Reset                          */
    volatile /*!< Defines 'read only' permissions */ uint16_t WAKEUP:1; /*!< bit:      4  Wake Up                            */
    volatile /*!< Defines 'read only' permissions */ uint16_t DNRSM:1; /*!< bit:      5  Downstream                         */
    volatile /*!< Defines 'read only' permissions */ uint16_t UPRSM:1; /*!< bit:      6  Upstream Resume from the Device    */
    volatile /*!< Defines 'read only' permissions */ uint16_t RAMACER:1; /*!< bit:      7  Ram Access                         */
    volatile /*!< Defines 'read only' permissions */ uint16_t DCONN:1; /*!< bit:      8  Device Connection                  */
    volatile /*!< Defines 'read only' permissions */ uint16_t DDISC:1; /*!< bit:      9  Device Disconnection               */
    volatile /*!< Defines 'read only' permissions */ uint16_t :6; /*!< bit: 10..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_HOST_INTFLAG_Type;
# 686 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_EPINTSMRY : (USB Offset: 0x020) (R/  16) DEVICE DEVICE End Point Interrupt Summary -------- */

typedef union {
  struct {
    uint16_t EPINT0:1; /*!< bit:      0  End Point 0 Interrupt              */
    uint16_t EPINT1:1; /*!< bit:      1  End Point 1 Interrupt              */
    uint16_t EPINT2:1; /*!< bit:      2  End Point 2 Interrupt              */
    uint16_t EPINT3:1; /*!< bit:      3  End Point 3 Interrupt              */
    uint16_t EPINT4:1; /*!< bit:      4  End Point 4 Interrupt              */
    uint16_t EPINT5:1; /*!< bit:      5  End Point 5 Interrupt              */
    uint16_t EPINT6:1; /*!< bit:      6  End Point 6 Interrupt              */
    uint16_t EPINT7:1; /*!< bit:      7  End Point 7 Interrupt              */
    uint16_t :8; /*!< bit:  8..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t EPINT:8; /*!< bit:  0.. 7  End Point x Interrupt              */
    uint16_t :8; /*!< bit:  8..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_DEVICE_EPINTSMRY_Type;
# 732 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_PINTSMRY : (USB Offset: 0x020) (R/  16) HOST HOST Pipe Interrupt Summary -------- */

typedef union {
  struct {
    uint16_t EPINT0:1; /*!< bit:      0  Pipe 0 Interrupt                   */
    uint16_t EPINT1:1; /*!< bit:      1  Pipe 1 Interrupt                   */
    uint16_t EPINT2:1; /*!< bit:      2  Pipe 2 Interrupt                   */
    uint16_t EPINT3:1; /*!< bit:      3  Pipe 3 Interrupt                   */
    uint16_t EPINT4:1; /*!< bit:      4  Pipe 4 Interrupt                   */
    uint16_t EPINT5:1; /*!< bit:      5  Pipe 5 Interrupt                   */
    uint16_t EPINT6:1; /*!< bit:      6  Pipe 6 Interrupt                   */
    uint16_t EPINT7:1; /*!< bit:      7  Pipe 7 Interrupt                   */
    uint16_t :8; /*!< bit:  8..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint16_t EPINT:8; /*!< bit:  0.. 7  Pipe x Interrupt                   */
    uint16_t :8; /*!< bit:  8..15  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_HOST_PINTSMRY_Type;
# 778 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DESCADD : (USB Offset: 0x024) (R/W 32) Descriptor Address -------- */

typedef union {
  struct {
    uint32_t DESCADD:32; /*!< bit:  0..31  Descriptor Address Value           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} USB_DESCADD_Type;
# 796 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_PADCAL : (USB Offset: 0x028) (R/W 16) USB PAD Calibration -------- */

typedef union {
  struct {
    uint16_t TRANSP:5; /*!< bit:  0.. 4  USB Pad Transp calibration         */
    uint16_t :1; /*!< bit:      5  Reserved                           */
    uint16_t TRANSN:5; /*!< bit:  6..10  USB Pad Transn calibration         */
    uint16_t :1; /*!< bit:     11  Reserved                           */
    uint16_t TRIM:3; /*!< bit: 12..14  USB Pad Trim calibration           */
    uint16_t :1; /*!< bit:     15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_PADCAL_Type;
# 825 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_EPCFG : (USB Offset: 0x100) (R/W  8) DEVICE DEVICE_ENDPOINT End Point Configuration -------- */

typedef union {
  struct {
    uint8_t EPTYPE0:3; /*!< bit:  0.. 2  End Point Type0                    */
    uint8_t :1; /*!< bit:      3  Reserved                           */
    uint8_t EPTYPE1:3; /*!< bit:  4.. 6  End Point Type1                    */
    uint8_t NYETDIS:1; /*!< bit:      7  NYET Token Disable                 */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_DEVICE_EPCFG_Type;
# 851 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_PCFG : (USB Offset: 0x100) (R/W  8) HOST HOST_PIPE End Point Configuration -------- */

typedef union {
  struct {
    uint8_t PTOKEN:2; /*!< bit:  0.. 1  Pipe Token                         */
    uint8_t BK:1; /*!< bit:      2  Pipe Bank                          */
    uint8_t PTYPE:3; /*!< bit:  3.. 5  Pipe Type                          */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_HOST_PCFG_Type;
# 877 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_BINTERVAL : (USB Offset: 0x103) (R/W  8) HOST HOST_PIPE Bus Access Period of Pipe -------- */

typedef union {
  struct {
    uint8_t BITINTERVAL:8; /*!< bit:  0.. 7  Bit Interval                       */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_HOST_BINTERVAL_Type;
# 895 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_EPSTATUSCLR : (USB Offset: 0x104) ( /W  8) DEVICE DEVICE_ENDPOINT End Point Pipe Status Clear -------- */

typedef union {
  struct {
    uint8_t DTGLOUT:1; /*!< bit:      0  Data Toggle OUT Clear              */
    uint8_t DTGLIN:1; /*!< bit:      1  Data Toggle IN Clear               */
    uint8_t CURBK:1; /*!< bit:      2  Current Bank Clear                 */
    uint8_t :1; /*!< bit:      3  Reserved                           */
    uint8_t STALLRQ0:1; /*!< bit:      4  Stall 0 Request Clear              */
    uint8_t STALLRQ1:1; /*!< bit:      5  Stall 1 Request Clear              */
    uint8_t BK0RDY:1; /*!< bit:      6  Bank 0 Ready Clear                 */
    uint8_t BK1RDY:1; /*!< bit:      7  Bank 1 Ready Clear                 */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t :4; /*!< bit:  0.. 3  Reserved                           */
    uint8_t STALLRQ:2; /*!< bit:  4.. 5  Stall x Request Clear              */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_DEVICE_EPSTATUSCLR_Type;
# 939 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_PSTATUSCLR : (USB Offset: 0x104) ( /W  8) HOST HOST_PIPE End Point Pipe Status Clear -------- */

typedef union {
  struct {
    uint8_t DTGL:1; /*!< bit:      0  Data Toggle clear                  */
    uint8_t :1; /*!< bit:      1  Reserved                           */
    uint8_t CURBK:1; /*!< bit:      2  Curren Bank clear                  */
    uint8_t :1; /*!< bit:      3  Reserved                           */
    uint8_t PFREEZE:1; /*!< bit:      4  Pipe Freeze Clear                  */
    uint8_t :1; /*!< bit:      5  Reserved                           */
    uint8_t BK0RDY:1; /*!< bit:      6  Bank 0 Ready Clear                 */
    uint8_t BK1RDY:1; /*!< bit:      7  Bank 1 Ready Clear                 */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_HOST_PSTATUSCLR_Type;
# 971 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_EPSTATUSSET : (USB Offset: 0x105) ( /W  8) DEVICE DEVICE_ENDPOINT End Point Pipe Status Set -------- */

typedef union {
  struct {
    uint8_t DTGLOUT:1; /*!< bit:      0  Data Toggle OUT Set                */
    uint8_t DTGLIN:1; /*!< bit:      1  Data Toggle IN Set                 */
    uint8_t CURBK:1; /*!< bit:      2  Current Bank Set                   */
    uint8_t :1; /*!< bit:      3  Reserved                           */
    uint8_t STALLRQ0:1; /*!< bit:      4  Stall 0 Request Set                */
    uint8_t STALLRQ1:1; /*!< bit:      5  Stall 1 Request Set                */
    uint8_t BK0RDY:1; /*!< bit:      6  Bank 0 Ready Set                   */
    uint8_t BK1RDY:1; /*!< bit:      7  Bank 1 Ready Set                   */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t :4; /*!< bit:  0.. 3  Reserved                           */
    uint8_t STALLRQ:2; /*!< bit:  4.. 5  Stall x Request Set                */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_DEVICE_EPSTATUSSET_Type;
# 1015 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_PSTATUSSET : (USB Offset: 0x105) ( /W  8) HOST HOST_PIPE End Point Pipe Status Set -------- */

typedef union {
  struct {
    uint8_t DTGL:1; /*!< bit:      0  Data Toggle Set                    */
    uint8_t :1; /*!< bit:      1  Reserved                           */
    uint8_t CURBK:1; /*!< bit:      2  Current Bank Set                   */
    uint8_t :1; /*!< bit:      3  Reserved                           */
    uint8_t PFREEZE:1; /*!< bit:      4  Pipe Freeze Set                    */
    uint8_t :1; /*!< bit:      5  Reserved                           */
    uint8_t BK0RDY:1; /*!< bit:      6  Bank 0 Ready Set                   */
    uint8_t BK1RDY:1; /*!< bit:      7  Bank 1 Ready Set                   */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_HOST_PSTATUSSET_Type;
# 1047 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_EPSTATUS : (USB Offset: 0x106) (R/   8) DEVICE DEVICE_ENDPOINT End Point Pipe Status -------- */

typedef union {
  struct {
    uint8_t DTGLOUT:1; /*!< bit:      0  Data Toggle Out                    */
    uint8_t DTGLIN:1; /*!< bit:      1  Data Toggle In                     */
    uint8_t CURBK:1; /*!< bit:      2  Current Bank                       */
    uint8_t :1; /*!< bit:      3  Reserved                           */
    uint8_t STALLRQ0:1; /*!< bit:      4  Stall 0 Request                    */
    uint8_t STALLRQ1:1; /*!< bit:      5  Stall 1 Request                    */
    uint8_t BK0RDY:1; /*!< bit:      6  Bank 0 ready                       */
    uint8_t BK1RDY:1; /*!< bit:      7  Bank 1 ready                       */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t :4; /*!< bit:  0.. 3  Reserved                           */
    uint8_t STALLRQ:2; /*!< bit:  4.. 5  Stall x Request                    */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_DEVICE_EPSTATUS_Type;
# 1091 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_PSTATUS : (USB Offset: 0x106) (R/   8) HOST HOST_PIPE End Point Pipe Status -------- */

typedef union {
  struct {
    uint8_t DTGL:1; /*!< bit:      0  Data Toggle                        */
    uint8_t :1; /*!< bit:      1  Reserved                           */
    uint8_t CURBK:1; /*!< bit:      2  Current Bank                       */
    uint8_t :1; /*!< bit:      3  Reserved                           */
    uint8_t PFREEZE:1; /*!< bit:      4  Pipe Freeze                        */
    uint8_t :1; /*!< bit:      5  Reserved                           */
    uint8_t BK0RDY:1; /*!< bit:      6  Bank 0 ready                       */
    uint8_t BK1RDY:1; /*!< bit:      7  Bank 1 ready                       */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_HOST_PSTATUS_Type;
# 1123 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_EPINTFLAG : (USB Offset: 0x107) (R/W  8) DEVICE DEVICE_ENDPOINT End Point Interrupt Flag -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t TRCPT0:1; /*!< bit:      0  Transfer Complete 0                */
    volatile /*!< Defines 'read only' permissions */ uint8_t TRCPT1:1; /*!< bit:      1  Transfer Complete 1                */
    volatile /*!< Defines 'read only' permissions */ uint8_t TRFAIL0:1; /*!< bit:      2  Error Flow 0                       */
    volatile /*!< Defines 'read only' permissions */ uint8_t TRFAIL1:1; /*!< bit:      3  Error Flow 1                       */
    volatile /*!< Defines 'read only' permissions */ uint8_t RXSTP:1; /*!< bit:      4  Received Setup                     */
    volatile /*!< Defines 'read only' permissions */ uint8_t STALL0:1; /*!< bit:      5  Stall 0 In/out                     */
    volatile /*!< Defines 'read only' permissions */ uint8_t STALL1:1; /*!< bit:      6  Stall 1 In/out                     */
    volatile /*!< Defines 'read only' permissions */ uint8_t :1; /*!< bit:      7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t TRCPT:2; /*!< bit:  0.. 1  Transfer Complete x                */
    volatile /*!< Defines 'read only' permissions */ uint8_t TRFAIL:2; /*!< bit:  2.. 3  Error Flow x                       */
    volatile /*!< Defines 'read only' permissions */ uint8_t :1; /*!< bit:      4  Reserved                           */
    volatile /*!< Defines 'read only' permissions */ uint8_t STALL:2; /*!< bit:  5.. 6  Stall x In/out                     */
    volatile /*!< Defines 'read only' permissions */ uint8_t :1; /*!< bit:      7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_DEVICE_EPINTFLAG_Type;
# 1175 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_PINTFLAG : (USB Offset: 0x107) (R/W  8) HOST HOST_PIPE Pipe Interrupt Flag -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t TRCPT0:1; /*!< bit:      0  Transfer Complete 0 Interrupt Flag */
    volatile /*!< Defines 'read only' permissions */ uint8_t TRCPT1:1; /*!< bit:      1  Transfer Complete 1 Interrupt Flag */
    volatile /*!< Defines 'read only' permissions */ uint8_t TRFAIL:1; /*!< bit:      2  Error Flow Interrupt Flag          */
    volatile /*!< Defines 'read only' permissions */ uint8_t PERR:1; /*!< bit:      3  Pipe Error Interrupt Flag          */
    volatile /*!< Defines 'read only' permissions */ uint8_t TXSTP:1; /*!< bit:      4  Transmit  Setup Interrupt Flag     */
    volatile /*!< Defines 'read only' permissions */ uint8_t STALL:1; /*!< bit:      5  Stall Interrupt Flag               */
    volatile /*!< Defines 'read only' permissions */ uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t TRCPT:2; /*!< bit:  0.. 1  Transfer Complete x Interrupt Flag */
    volatile /*!< Defines 'read only' permissions */ uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_HOST_PINTFLAG_Type;
# 1215 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_EPINTENCLR : (USB Offset: 0x108) (R/W  8) DEVICE DEVICE_ENDPOINT End Point Interrupt Clear Flag -------- */

typedef union {
  struct {
    uint8_t TRCPT0:1; /*!< bit:      0  Transfer Complete 0 Interrupt Disable */
    uint8_t TRCPT1:1; /*!< bit:      1  Transfer Complete 1 Interrupt Disable */
    uint8_t TRFAIL0:1; /*!< bit:      2  Error Flow 0 Interrupt Disable     */
    uint8_t TRFAIL1:1; /*!< bit:      3  Error Flow 1 Interrupt Disable     */
    uint8_t RXSTP:1; /*!< bit:      4  Received Setup Interrupt Disable   */
    uint8_t STALL0:1; /*!< bit:      5  Stall 0 In/Out Interrupt Disable   */
    uint8_t STALL1:1; /*!< bit:      6  Stall 1 In/Out Interrupt Disable   */
    uint8_t :1; /*!< bit:      7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t TRCPT:2; /*!< bit:  0.. 1  Transfer Complete x Interrupt Disable */
    uint8_t TRFAIL:2; /*!< bit:  2.. 3  Error Flow x Interrupt Disable     */
    uint8_t :1; /*!< bit:      4  Reserved                           */
    uint8_t STALL:2; /*!< bit:  5.. 6  Stall x In/Out Interrupt Disable   */
    uint8_t :1; /*!< bit:      7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_DEVICE_EPINTENCLR_Type;
# 1267 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_PINTENCLR : (USB Offset: 0x108) (R/W  8) HOST HOST_PIPE Pipe Interrupt Flag Clear -------- */

typedef union {
  struct {
    uint8_t TRCPT0:1; /*!< bit:      0  Transfer Complete 0 Disable        */
    uint8_t TRCPT1:1; /*!< bit:      1  Transfer Complete 1 Disable        */
    uint8_t TRFAIL:1; /*!< bit:      2  Error Flow Interrupt Disable       */
    uint8_t PERR:1; /*!< bit:      3  Pipe Error Interrupt Disable       */
    uint8_t TXSTP:1; /*!< bit:      4  Transmit Setup Interrupt Disable   */
    uint8_t STALL:1; /*!< bit:      5  Stall Inetrrupt Disable            */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t TRCPT:2; /*!< bit:  0.. 1  Transfer Complete x Disable        */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_HOST_PINTENCLR_Type;
# 1307 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_EPINTENSET : (USB Offset: 0x109) (R/W  8) DEVICE DEVICE_ENDPOINT End Point Interrupt Set Flag -------- */

typedef union {
  struct {
    uint8_t TRCPT0:1; /*!< bit:      0  Transfer Complete 0 Interrupt Enable */
    uint8_t TRCPT1:1; /*!< bit:      1  Transfer Complete 1 Interrupt Enable */
    uint8_t TRFAIL0:1; /*!< bit:      2  Error Flow 0 Interrupt Enable      */
    uint8_t TRFAIL1:1; /*!< bit:      3  Error Flow 1 Interrupt Enable      */
    uint8_t RXSTP:1; /*!< bit:      4  Received Setup Interrupt Enable    */
    uint8_t STALL0:1; /*!< bit:      5  Stall 0 In/out Interrupt enable    */
    uint8_t STALL1:1; /*!< bit:      6  Stall 1 In/out Interrupt enable    */
    uint8_t :1; /*!< bit:      7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t TRCPT:2; /*!< bit:  0.. 1  Transfer Complete x Interrupt Enable */
    uint8_t TRFAIL:2; /*!< bit:  2.. 3  Error Flow x Interrupt Enable      */
    uint8_t :1; /*!< bit:      4  Reserved                           */
    uint8_t STALL:2; /*!< bit:  5.. 6  Stall x In/out Interrupt enable    */
    uint8_t :1; /*!< bit:      7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_DEVICE_EPINTENSET_Type;
# 1359 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_PINTENSET : (USB Offset: 0x109) (R/W  8) HOST HOST_PIPE Pipe Interrupt Flag Set -------- */

typedef union {
  struct {
    uint8_t TRCPT0:1; /*!< bit:      0  Transfer Complete 0 Interrupt Enable */
    uint8_t TRCPT1:1; /*!< bit:      1  Transfer Complete 1 Interrupt Enable */
    uint8_t TRFAIL:1; /*!< bit:      2  Error Flow Interrupt Enable        */
    uint8_t PERR:1; /*!< bit:      3  Pipe Error Interrupt Enable        */
    uint8_t TXSTP:1; /*!< bit:      4  Transmit  Setup Interrupt Enable   */
    uint8_t STALL:1; /*!< bit:      5  Stall Interrupt Enable             */
    uint8_t :2; /*!< bit:  6.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  struct {
    uint8_t TRCPT:2; /*!< bit:  0.. 1  Transfer Complete x Interrupt Enable */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } vec; /*!< Structure used for vec  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_HOST_PINTENSET_Type;
# 1399 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_ADDR : (USB Offset: 0x000) (R/W 32) DEVICE DEVICE_DESC_BANK Endpoint Bank, Adress of Data Buffer -------- */

typedef union {
  struct {
    uint32_t ADDR:32; /*!< bit:  0..31  Adress of data buffer              */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} USB_DEVICE_ADDR_Type;
# 1416 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_ADDR : (USB Offset: 0x000) (R/W 32) HOST HOST_DESC_BANK Host Bank, Adress of Data Buffer -------- */

typedef union {
  struct {
    uint32_t ADDR:32; /*!< bit:  0..31  Adress of data buffer              */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} USB_HOST_ADDR_Type;
# 1433 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_PCKSIZE : (USB Offset: 0x004) (R/W 32) DEVICE DEVICE_DESC_BANK Endpoint Bank, Packet Size -------- */

typedef union {
  struct {
    uint32_t BYTE_COUNT:14; /*!< bit:  0..13  Byte Count                         */
    uint32_t MULTI_PACKET_SIZE:14; /*!< bit: 14..27  Multi Packet In or Out size        */
    uint32_t SIZE:3; /*!< bit: 28..30  Enpoint size                       */
    uint32_t AUTO_ZLP:1; /*!< bit:     31  Automatic Zero Length Packet       */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} USB_DEVICE_PCKSIZE_Type;
# 1461 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_PCKSIZE : (USB Offset: 0x004) (R/W 32) HOST HOST_DESC_BANK Host Bank, Packet Size -------- */

typedef union {
  struct {
    uint32_t BYTE_COUNT:14; /*!< bit:  0..13  Byte Count                         */
    uint32_t MULTI_PACKET_SIZE:14; /*!< bit: 14..27  Multi Packet In or Out size        */
    uint32_t SIZE:3; /*!< bit: 28..30  Pipe size                          */
    uint32_t AUTO_ZLP:1; /*!< bit:     31  Automatic Zero Length Packet       */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} USB_HOST_PCKSIZE_Type;
# 1489 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_EXTREG : (USB Offset: 0x008) (R/W 16) DEVICE DEVICE_DESC_BANK Endpoint Bank, Extended -------- */

typedef union {
  struct {
    uint16_t SUBPID:4; /*!< bit:  0.. 3  SUBPID field send with extended token */
    uint16_t VARIABLE:11; /*!< bit:  4..14  Variable field send with extended token */
    uint16_t :1; /*!< bit:     15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_DEVICE_EXTREG_Type;
# 1511 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_EXTREG : (USB Offset: 0x008) (R/W 16) HOST HOST_DESC_BANK Host Bank, Extended -------- */

typedef union {
  struct {
    uint16_t SUBPID:4; /*!< bit:  0.. 3  SUBPID field send with extended token */
    uint16_t VARIABLE:11; /*!< bit:  4..14  Variable field send with extended token */
    uint16_t :1; /*!< bit:     15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_HOST_EXTREG_Type;
# 1533 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_DEVICE_STATUS_BK : (USB Offset: 0x00A) (R/W  8) DEVICE DEVICE_DESC_BANK Enpoint Bank, Status of Bank -------- */

typedef union {
  struct {
    uint8_t CRCERR:1; /*!< bit:      0  CRC Error Status                   */
    uint8_t ERRORFLOW:1; /*!< bit:      1  Error Flow Status                  */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_DEVICE_STATUS_BK_Type;
# 1553 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_STATUS_BK : (USB Offset: 0x00A) (R/W  8) HOST HOST_DESC_BANK Host Bank, Status of Bank -------- */

typedef union {
  struct {
    uint8_t CRCERR:1; /*!< bit:      0  CRC Error Status                   */
    uint8_t ERRORFLOW:1; /*!< bit:      1  Error Flow Status                  */
    uint8_t :6; /*!< bit:  2.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} USB_HOST_STATUS_BK_Type;
# 1573 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_CTRL_PIPE : (USB Offset: 0x00C) (R/W 16) HOST HOST_DESC_BANK Host Bank, Host Control Pipe -------- */

typedef union {
  struct {
    uint16_t PDADDR:7; /*!< bit:  0.. 6  Pipe Device Adress                 */
    uint16_t :1; /*!< bit:      7  Reserved                           */
    uint16_t PEPNUM:4; /*!< bit:  8..11  Pipe Endpoint Number               */
    uint16_t PERMAX:4; /*!< bit: 12..15  Pipe Error Max Number              */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_HOST_CTRL_PIPE_Type;
# 1600 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/* -------- USB_HOST_STATUS_PIPE : (USB Offset: 0x00E) (R/W 16) HOST HOST_DESC_BANK Host Bank, Host Status Pipe -------- */

typedef union {
  struct {
    uint16_t DTGLER:1; /*!< bit:      0  Data Toggle Error                  */
    uint16_t DAPIDER:1; /*!< bit:      1  Data PID Error                     */
    uint16_t PIDER:1; /*!< bit:      2  PID Error                          */
    uint16_t TOUTER:1; /*!< bit:      3  Time Out Error                     */
    uint16_t CRC16ER:1; /*!< bit:      4  CRC16 Error                        */
    uint16_t ERCNT:3; /*!< bit:  5.. 7  Pipe Error Count                   */
    uint16_t :8; /*!< bit:  8..15  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint16_t reg; /*!< Type      used for register access              */
} USB_HOST_STATUS_PIPE_Type;
# 1633 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/usb.h"
/** \brief UsbDeviceDescBank SRAM registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_ADDR_Type ADDR; /**< \brief Offset: 0x000 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Adress of Data Buffer */
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_PCKSIZE_Type PCKSIZE; /**< \brief Offset: 0x004 (R/W 32) DEVICE_DESC_BANK Endpoint Bank, Packet Size */
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_EXTREG_Type EXTREG; /**< \brief Offset: 0x008 (R/W 16) DEVICE_DESC_BANK Endpoint Bank, Extended */
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_STATUS_BK_Type STATUS_BK; /**< \brief Offset: 0x00A (R/W  8) DEVICE_DESC_BANK Enpoint Bank, Status of Bank */
       RoReg8 Reserved1[0x5];
} UsbDeviceDescBank;


/** \brief UsbHostDescBank SRAM registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_ADDR_Type ADDR; /**< \brief Offset: 0x000 (R/W 32) HOST_DESC_BANK Host Bank, Adress of Data Buffer */
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_PCKSIZE_Type PCKSIZE; /**< \brief Offset: 0x004 (R/W 32) HOST_DESC_BANK Host Bank, Packet Size */
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_EXTREG_Type EXTREG; /**< \brief Offset: 0x008 (R/W 16) HOST_DESC_BANK Host Bank, Extended */
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_STATUS_BK_Type STATUS_BK; /**< \brief Offset: 0x00A (R/W  8) HOST_DESC_BANK Host Bank, Status of Bank */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_CTRL_PIPE_Type CTRL_PIPE; /**< \brief Offset: 0x00C (R/W 16) HOST_DESC_BANK Host Bank, Host Control Pipe */
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_STATUS_PIPE_Type STATUS_PIPE; /**< \brief Offset: 0x00E (R/W 16) HOST_DESC_BANK Host Bank, Host Status Pipe */
} UsbHostDescBank;


/** \brief UsbDeviceEndpoint hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_EPCFG_Type EPCFG; /**< \brief Offset: 0x000 (R/W  8) DEVICE_ENDPOINT End Point Configuration */
       RoReg8 Reserved1[0x3];
  volatile /*!< Defines 'write only' permissions */ USB_DEVICE_EPSTATUSCLR_Type EPSTATUSCLR; /**< \brief Offset: 0x004 ( /W  8) DEVICE_ENDPOINT End Point Pipe Status Clear */
  volatile /*!< Defines 'write only' permissions */ USB_DEVICE_EPSTATUSSET_Type EPSTATUSSET; /**< \brief Offset: 0x005 ( /W  8) DEVICE_ENDPOINT End Point Pipe Status Set */
  volatile /*!< Defines 'read only' permissions */ USB_DEVICE_EPSTATUS_Type EPSTATUS; /**< \brief Offset: 0x006 (R/   8) DEVICE_ENDPOINT End Point Pipe Status */
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_EPINTFLAG_Type EPINTFLAG; /**< \brief Offset: 0x007 (R/W  8) DEVICE_ENDPOINT End Point Interrupt Flag */
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_EPINTENCLR_Type EPINTENCLR; /**< \brief Offset: 0x008 (R/W  8) DEVICE_ENDPOINT End Point Interrupt Clear Flag */
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_EPINTENSET_Type EPINTENSET; /**< \brief Offset: 0x009 (R/W  8) DEVICE_ENDPOINT End Point Interrupt Set Flag */
       RoReg8 Reserved2[0x16];
} UsbDeviceEndpoint;


/** \brief UsbHostPipe hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_PCFG_Type PCFG; /**< \brief Offset: 0x000 (R/W  8) HOST_PIPE End Point Configuration */
       RoReg8 Reserved1[0x2];
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_BINTERVAL_Type BINTERVAL; /**< \brief Offset: 0x003 (R/W  8) HOST_PIPE Bus Access Period of Pipe */
  volatile /*!< Defines 'write only' permissions */ USB_HOST_PSTATUSCLR_Type PSTATUSCLR; /**< \brief Offset: 0x004 ( /W  8) HOST_PIPE End Point Pipe Status Clear */
  volatile /*!< Defines 'write only' permissions */ USB_HOST_PSTATUSSET_Type PSTATUSSET; /**< \brief Offset: 0x005 ( /W  8) HOST_PIPE End Point Pipe Status Set */
  volatile /*!< Defines 'read only' permissions */ USB_HOST_PSTATUS_Type PSTATUS; /**< \brief Offset: 0x006 (R/   8) HOST_PIPE End Point Pipe Status */
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_PINTFLAG_Type PINTFLAG; /**< \brief Offset: 0x007 (R/W  8) HOST_PIPE Pipe Interrupt Flag */
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_PINTENCLR_Type PINTENCLR; /**< \brief Offset: 0x008 (R/W  8) HOST_PIPE Pipe Interrupt Flag Clear */
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_PINTENSET_Type PINTENSET; /**< \brief Offset: 0x009 (R/W  8) HOST_PIPE Pipe Interrupt Flag Set */
       RoReg8 Reserved2[0x16];
} UsbHostPipe;


/** \brief USB_DEVICE APB hardware registers */

typedef struct { /* USB is Device */
  volatile /*!< Defines 'read / write' permissions */ USB_CTRLA_Type CTRLA; /**< \brief Offset: 0x000 (R/W  8) Control A */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read only' permissions */ USB_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x002 (R/   8) Synchronization Busy */
  volatile /*!< Defines 'read / write' permissions */ USB_QOSCTRL_Type QOSCTRL; /**< \brief Offset: 0x003 (R/W  8) USB Quality Of Service */
       RoReg8 Reserved2[0x4];
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_CTRLB_Type CTRLB; /**< \brief Offset: 0x008 (R/W 16) DEVICE Control B */
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_DADD_Type DADD; /**< \brief Offset: 0x00A (R/W  8) DEVICE Device Address */
       RoReg8 Reserved3[0x1];
  volatile /*!< Defines 'read only' permissions */ USB_DEVICE_STATUS_Type STATUS; /**< \brief Offset: 0x00C (R/   8) DEVICE Status */
  volatile /*!< Defines 'read only' permissions */ USB_FSMSTATUS_Type FSMSTATUS; /**< \brief Offset: 0x00D (R/   8) Finite State Machine Status */
       RoReg8 Reserved4[0x2];
  volatile /*!< Defines 'read only' permissions */ USB_DEVICE_FNUM_Type FNUM; /**< \brief Offset: 0x010 (R/  16) DEVICE Device Frame Number */
       RoReg8 Reserved5[0x2];
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x014 (R/W 16) DEVICE Device Interrupt Enable Clear */
       RoReg8 Reserved6[0x2];
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_INTENSET_Type INTENSET; /**< \brief Offset: 0x018 (R/W 16) DEVICE Device Interrupt Enable Set */
       RoReg8 Reserved7[0x2];
  volatile /*!< Defines 'read / write' permissions */ USB_DEVICE_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x01C (R/W 16) DEVICE Device Interrupt Flag */
       RoReg8 Reserved8[0x2];
  volatile /*!< Defines 'read only' permissions */ USB_DEVICE_EPINTSMRY_Type EPINTSMRY; /**< \brief Offset: 0x020 (R/  16) DEVICE End Point Interrupt Summary */
       RoReg8 Reserved9[0x2];
  volatile /*!< Defines 'read / write' permissions */ USB_DESCADD_Type DESCADD; /**< \brief Offset: 0x024 (R/W 32) Descriptor Address */
  volatile /*!< Defines 'read / write' permissions */ USB_PADCAL_Type PADCAL; /**< \brief Offset: 0x028 (R/W 16) USB PAD Calibration */
       RoReg8 Reserved10[0xD6];
       UsbDeviceEndpoint DeviceEndpoint[8]; /**< \brief Offset: 0x100 UsbDeviceEndpoint groups [EPT_NUM] */
} UsbDevice;


/** \brief USB_HOST hardware registers */

typedef struct { /* USB is Host */
  volatile /*!< Defines 'read / write' permissions */ USB_CTRLA_Type CTRLA; /**< \brief Offset: 0x000 (R/W  8) Control A */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read only' permissions */ USB_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x002 (R/   8) Synchronization Busy */
  volatile /*!< Defines 'read / write' permissions */ USB_QOSCTRL_Type QOSCTRL; /**< \brief Offset: 0x003 (R/W  8) USB Quality Of Service */
       RoReg8 Reserved2[0x4];
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_CTRLB_Type CTRLB; /**< \brief Offset: 0x008 (R/W 16) HOST Control B */
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_HSOFC_Type HSOFC; /**< \brief Offset: 0x00A (R/W  8) HOST Host Start Of Frame Control */
       RoReg8 Reserved3[0x1];
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_STATUS_Type STATUS; /**< \brief Offset: 0x00C (R/W  8) HOST Status */
  volatile /*!< Defines 'read only' permissions */ USB_FSMSTATUS_Type FSMSTATUS; /**< \brief Offset: 0x00D (R/   8) Finite State Machine Status */
       RoReg8 Reserved4[0x2];
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_FNUM_Type FNUM; /**< \brief Offset: 0x010 (R/W 16) HOST Host Frame Number */
  volatile /*!< Defines 'read only' permissions */ USB_HOST_FLENHIGH_Type FLENHIGH; /**< \brief Offset: 0x012 (R/   8) HOST Host Frame Length */
       RoReg8 Reserved5[0x1];
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x014 (R/W 16) HOST Host Interrupt Enable Clear */
       RoReg8 Reserved6[0x2];
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_INTENSET_Type INTENSET; /**< \brief Offset: 0x018 (R/W 16) HOST Host Interrupt Enable Set */
       RoReg8 Reserved7[0x2];
  volatile /*!< Defines 'read / write' permissions */ USB_HOST_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x01C (R/W 16) HOST Host Interrupt Flag */
       RoReg8 Reserved8[0x2];
  volatile /*!< Defines 'read only' permissions */ USB_HOST_PINTSMRY_Type PINTSMRY; /**< \brief Offset: 0x020 (R/  16) HOST Pipe Interrupt Summary */
       RoReg8 Reserved9[0x2];
  volatile /*!< Defines 'read / write' permissions */ USB_DESCADD_Type DESCADD; /**< \brief Offset: 0x024 (R/W 32) Descriptor Address */
  volatile /*!< Defines 'read / write' permissions */ USB_PADCAL_Type PADCAL; /**< \brief Offset: 0x028 (R/W 16) USB PAD Calibration */
       RoReg8 Reserved10[0xD6];
       UsbHostPipe HostPipe[8]; /**< \brief Offset: 0x100 UsbHostPipe groups [PIPE_NUM*HOST_IMPLEMENTED] */
} UsbHost;


/** \brief USB_DEVICE Descriptor SRAM registers */

typedef struct { /* USB is Device */
       UsbDeviceDescBank DeviceDescBank[2]; /**< \brief Offset: 0x000 UsbDeviceDescBank groups */
} UsbDeviceDescriptor;


/** \brief USB_HOST Descriptor SRAM registers */

typedef struct { /* USB is Host */
       UsbHostDescBank HostDescBank[2]; /**< \brief Offset: 0x000 UsbHostDescBank groups [2*HOST_IMPLEMENTED] */
} UsbHostDescriptor;





typedef union {
       UsbDevice DEVICE; /**< \brief Offset: 0x000 USB is Device */
       UsbHost HOST; /**< \brief Offset: 0x000 USB is Host */
} Usb;


/*@}*/
# 612 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/wdt.h" 1
/**
 * \file
 *
 * \brief Component description for WDT
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR WDT */
/* ========================================================================== */
/** \addtogroup SAMD51_WDT Watchdog Timer */
/*@{*/




/* -------- WDT_CTRLA : (WDT Offset: 0x0) (R/W  8) Control -------- */

typedef union {
  struct {
    uint8_t :1; /*!< bit:      0  Reserved                           */
    uint8_t ENABLE:1; /*!< bit:      1  Enable                             */
    uint8_t WEN:1; /*!< bit:      2  Watchdog Timer Window Mode Enable  */
    uint8_t :4; /*!< bit:  3.. 6  Reserved                           */
    uint8_t ALWAYSON:1; /*!< bit:      7  Always-On                          */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} WDT_CTRLA_Type;
# 66 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/wdt.h"
/* -------- WDT_CONFIG : (WDT Offset: 0x1) (R/W  8) Configuration -------- */

typedef union {
  struct {
    uint8_t PER:4; /*!< bit:  0.. 3  Time-Out Period                    */
    uint8_t WINDOW:4; /*!< bit:  4.. 7  Window Mode Time-Out Period        */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} WDT_CONFIG_Type;
# 136 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/wdt.h"
/* -------- WDT_EWCTRL : (WDT Offset: 0x2) (R/W  8) Early Warning Interrupt Control -------- */

typedef union {
  struct {
    uint8_t EWOFFSET:4; /*!< bit:  0.. 3  Early Warning Interrupt Time Offset */
    uint8_t :4; /*!< bit:  4.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} WDT_EWCTRL_Type;
# 179 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/wdt.h"
/* -------- WDT_INTENCLR : (WDT Offset: 0x4) (R/W  8) Interrupt Enable Clear -------- */

typedef union {
  struct {
    uint8_t EW:1; /*!< bit:      0  Early Warning Interrupt Enable     */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} WDT_INTENCLR_Type;
# 197 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/wdt.h"
/* -------- WDT_INTENSET : (WDT Offset: 0x5) (R/W  8) Interrupt Enable Set -------- */

typedef union {
  struct {
    uint8_t EW:1; /*!< bit:      0  Early Warning Interrupt Enable     */
    uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} WDT_INTENSET_Type;
# 215 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/wdt.h"
/* -------- WDT_INTFLAG : (WDT Offset: 0x6) (R/W  8) Interrupt Flag Status and Clear -------- */

typedef union { // __I to avoid read-modify-write on write-to-clear register
  struct {
    volatile /*!< Defines 'read only' permissions */ uint8_t EW:1; /*!< bit:      0  Early Warning                      */
    volatile /*!< Defines 'read only' permissions */ uint8_t :7; /*!< bit:  1.. 7  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} WDT_INTFLAG_Type;
# 233 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/wdt.h"
/* -------- WDT_SYNCBUSY : (WDT Offset: 0x8) (R/  32) Synchronization Busy -------- */

typedef union {
  struct {
    uint32_t :1; /*!< bit:      0  Reserved                           */
    uint32_t ENABLE:1; /*!< bit:      1  Enable Synchronization Busy        */
    uint32_t WEN:1; /*!< bit:      2  Window Enable Synchronization Busy */
    uint32_t ALWAYSON:1; /*!< bit:      3  Always-On Synchronization Busy     */
    uint32_t CLEAR:1; /*!< bit:      4  Clear Synchronization Busy         */
    uint32_t :27; /*!< bit:  5..31  Reserved                           */
  } bit; /*!< Structure used for bit  access                  */
  uint32_t reg; /*!< Type      used for register access              */
} WDT_SYNCBUSY_Type;
# 261 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/wdt.h"
/* -------- WDT_CLEAR : (WDT Offset: 0xC) ( /W  8) Clear -------- */

typedef union {
  struct {
    uint8_t CLEAR:8; /*!< bit:  0.. 7  Watchdog Clear                     */
  } bit; /*!< Structure used for bit  access                  */
  uint8_t reg; /*!< Type      used for register access              */
} WDT_CLEAR_Type;
# 281 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/component/wdt.h"
/** \brief WDT hardware registers */

typedef struct {
  volatile /*!< Defines 'read / write' permissions */ WDT_CTRLA_Type CTRLA; /**< \brief Offset: 0x0 (R/W  8) Control */
  volatile /*!< Defines 'read / write' permissions */ WDT_CONFIG_Type CONFIG; /**< \brief Offset: 0x1 (R/W  8) Configuration */
  volatile /*!< Defines 'read / write' permissions */ WDT_EWCTRL_Type EWCTRL; /**< \brief Offset: 0x2 (R/W  8) Early Warning Interrupt Control */
       RoReg8 Reserved1[0x1];
  volatile /*!< Defines 'read / write' permissions */ WDT_INTENCLR_Type INTENCLR; /**< \brief Offset: 0x4 (R/W  8) Interrupt Enable Clear */
  volatile /*!< Defines 'read / write' permissions */ WDT_INTENSET_Type INTENSET; /**< \brief Offset: 0x5 (R/W  8) Interrupt Enable Set */
  volatile /*!< Defines 'read / write' permissions */ WDT_INTFLAG_Type INTFLAG; /**< \brief Offset: 0x6 (R/W  8) Interrupt Flag Status and Clear */
       RoReg8 Reserved2[0x1];
  volatile /*!< Defines 'read only' permissions */ WDT_SYNCBUSY_Type SYNCBUSY; /**< \brief Offset: 0x8 (R/  32) Synchronization Busy */
  volatile /*!< Defines 'write only' permissions */ WDT_CLEAR_Type CLEAR; /**< \brief Offset: 0xC ( /W  8) Clear */
} Wdt;


/*@}*/
# 613 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
/*@}*/

/* ************************************************************************** */
/**  REGISTERS ACCESS DEFINITIONS FOR SAMD51P20A */
/* ************************************************************************** */
/** \defgroup SAMD51P20A_reg Registers Access Definitions */
/*@{*/

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/ac.h" 1
/**
 * \file
 *
 * \brief Instance description for AC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for AC peripheral ========== */
# 69 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/ac.h"
/* ========== Instance parameters for AC peripheral ========== */
# 622 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/adc0.h" 1
/**
 * \file
 *
 * \brief Instance description for ADC0
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for ADC0 peripheral ========== */
# 85 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/adc0.h"
/* ========== Instance parameters for ADC0 peripheral ========== */
# 623 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/adc1.h" 1
/**
 * \file
 *
 * \brief Instance description for ADC1
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for ADC1 peripheral ========== */
# 85 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/adc1.h"
/* ========== Instance parameters for ADC1 peripheral ========== */
# 624 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/aes.h" 1
/**
 * \file
 *
 * \brief Instance description for AES
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for AES peripheral ========== */
# 97 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/aes.h"
/* ========== Instance parameters for AES peripheral ========== */
# 625 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/ccl.h" 1
/**
 * \file
 *
 * \brief Instance description for CCL
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for CCL peripheral ========== */
# 51 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/ccl.h"
/* ========== Instance parameters for CCL peripheral ========== */
# 626 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/cmcc.h" 1
/**
 * \file
 *
 * \brief Instance description for CMCC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for CMCC peripheral ========== */
# 627 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/dac.h" 1
/**
 * \file
 *
 * \brief Instance description for DAC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for DAC peripheral ========== */
# 71 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/dac.h"
/* ========== Instance parameters for DAC peripheral ========== */
# 628 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/dmac.h" 1
/**
 * \file
 *
 * \brief Instance description for DMAC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for DMAC peripheral ========== */
# 579 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/dmac.h"
/* ========== Instance parameters for DMAC peripheral ========== */
# 629 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/dsu.h" 1
/**
 * \file
 *
 * \brief Instance description for DSU
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for DSU peripheral ========== */
# 115 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/dsu.h"
/* ========== Instance parameters for DSU peripheral ========== */
# 630 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/eic.h" 1
/**
 * \file
 *
 * \brief Instance description for EIC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for EIC peripheral ========== */
# 65 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/eic.h"
/* ========== Instance parameters for EIC peripheral ========== */
# 631 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/evsys.h" 1
/**
 * \file
 *
 * \brief Instance description for EVSYS
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for EVSYS peripheral ========== */
# 505 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/evsys.h"
/* ========== Instance parameters for EVSYS peripheral ========== */
# 532 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/evsys.h"
// GENERATORS
# 652 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/evsys.h"
// USERS
# 632 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/freqm.h" 1
/**
 * \file
 *
 * \brief Instance description for FREQM
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for FREQM peripheral ========== */
# 55 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/freqm.h"
/* ========== Instance parameters for FREQM peripheral ========== */
# 633 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/gclk.h" 1
/**
 * \file
 *
 * \brief Instance description for GCLK
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for GCLK peripheral ========== */
# 161 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/gclk.h"
/* ========== Instance parameters for GCLK peripheral ========== */
# 634 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/hmatrix.h" 1
/**
 * \file
 *
 * \brief Instance description for HMATRIX
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for HMATRIX peripheral ========== */
# 57 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/hmatrix.h"
/* ========== Instance parameters for HMATRIX peripheral ========== */


/* ========== Instance parameters for HMATRIX ========== */
# 635 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/icm.h" 1
/**
 * \file
 *
 * \brief Instance description for ICM
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for ICM peripheral ========== */
# 73 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/icm.h"
/* ========== Instance parameters for ICM peripheral ========== */
# 636 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/i2s.h" 1
/**
 * \file
 *
 * \brief Instance description for I2S
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for I2S peripheral ========== */
# 59 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/i2s.h"
/* ========== Instance parameters for I2S peripheral ========== */
# 637 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/mclk.h" 1
/**
 * \file
 *
 * \brief Instance description for MCLK
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for MCLK peripheral ========== */
# 57 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/mclk.h"
/* ========== Instance parameters for MCLK peripheral ========== */
# 638 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/nvmctrl.h" 1
/**
 * \file
 *
 * \brief Instance description for NVMCTRL
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for NVMCTRL peripheral ========== */
# 67 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/nvmctrl.h"
/* ========== Instance parameters for NVMCTRL peripheral ========== */
# 639 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/oscctrl.h" 1
/**
 * \file
 *
 * \brief Instance description for OSCCTRL
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for OSCCTRL peripheral ========== */
# 81 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/oscctrl.h"
/* ========== Instance parameters for OSCCTRL peripheral ========== */
# 640 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/osc32kctrl.h" 1
/**
 * \file
 *
 * \brief Instance description for OSC32KCTRL
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for OSC32KCTRL peripheral ========== */
# 55 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/osc32kctrl.h"
/* ========== Instance parameters for OSC32KCTRL peripheral ========== */
# 641 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/pac.h" 1
/**
 * \file
 *
 * \brief Instance description for PAC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for PAC peripheral ========== */
# 63 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/pac.h"
/* ========== Instance parameters for PAC peripheral ========== */
# 642 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/pcc.h" 1
/**
 * \file
 *
 * \brief Instance description for PCC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for PCC peripheral ========== */
# 53 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/pcc.h"
/* ========== Instance parameters for PCC peripheral ========== */
# 643 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/pdec.h" 1
/**
 * \file
 *
 * \brief Instance description for PDEC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for PDEC peripheral ========== */
# 75 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/pdec.h"
/* ========== Instance parameters for PDEC peripheral ========== */
# 644 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/pm.h" 1
/**
 * \file
 *
 * \brief Instance description for PM
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for PM peripheral ========== */
# 55 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/pm.h"
/* ========== Instance parameters for PM peripheral ========== */
# 645 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/port.h" 1
/**
 * \file
 *
 * \brief Instance description for PORT
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for PORT peripheral ========== */
# 149 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/port.h"
/* ========== Instance parameters for PORT peripheral ========== */
# 646 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/qspi.h" 1
/**
 * \file
 *
 * \brief Instance description for QSPI
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for QSPI peripheral ========== */
# 65 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/qspi.h"
/* ========== Instance parameters for QSPI peripheral ========== */
# 647 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/ramecc.h" 1
/**
 * \file
 *
 * \brief Instance description for RAMECC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for RAMECC peripheral ========== */
# 49 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/ramecc.h"
/* ========== Instance parameters for RAMECC peripheral ========== */
# 648 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/rstc.h" 1
/**
 * \file
 *
 * \brief Instance description for RSTC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for RSTC peripheral ========== */
# 41 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/rstc.h"
/* ========== Instance parameters for RSTC peripheral ========== */
# 649 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/rtc.h" 1
/**
 * \file
 *
 * \brief Instance description for RTC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for RTC peripheral ========== */
# 145 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/rtc.h"
/* ========== Instance parameters for RTC peripheral ========== */
# 650 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sdhc0.h" 1
/**
 * \file
 *
 * \brief Instance description for SDHC0
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for SDHC0 peripheral ========== */
# 137 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sdhc0.h"
/* ========== Instance parameters for SDHC0 peripheral ========== */
# 651 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sdhc1.h" 1
/**
 * \file
 *
 * \brief Instance description for SDHC1
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for SDHC1 peripheral ========== */
# 137 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sdhc1.h"
/* ========== Instance parameters for SDHC1 peripheral ========== */
# 652 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom0.h" 1
/**
 * \file
 *
 * \brief Instance description for SERCOM0
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for SERCOM0 peripheral ========== */
# 137 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom0.h"
/* ========== Instance parameters for SERCOM0 peripheral ========== */
# 653 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom1.h" 1
/**
 * \file
 *
 * \brief Instance description for SERCOM1
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for SERCOM1 peripheral ========== */
# 137 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom1.h"
/* ========== Instance parameters for SERCOM1 peripheral ========== */
# 654 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom2.h" 1
/**
 * \file
 *
 * \brief Instance description for SERCOM2
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for SERCOM2 peripheral ========== */
# 137 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom2.h"
/* ========== Instance parameters for SERCOM2 peripheral ========== */
# 655 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom3.h" 1
/**
 * \file
 *
 * \brief Instance description for SERCOM3
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for SERCOM3 peripheral ========== */
# 137 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom3.h"
/* ========== Instance parameters for SERCOM3 peripheral ========== */
# 656 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom4.h" 1
/**
 * \file
 *
 * \brief Instance description for SERCOM4
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for SERCOM4 peripheral ========== */
# 137 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom4.h"
/* ========== Instance parameters for SERCOM4 peripheral ========== */
# 657 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom5.h" 1
/**
 * \file
 *
 * \brief Instance description for SERCOM5
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for SERCOM5 peripheral ========== */
# 137 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom5.h"
/* ========== Instance parameters for SERCOM5 peripheral ========== */
# 658 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom6.h" 1
/**
 * \file
 *
 * \brief Instance description for SERCOM6
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for SERCOM6 peripheral ========== */
# 137 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom6.h"
/* ========== Instance parameters for SERCOM6 peripheral ========== */
# 659 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom7.h" 1
/**
 * \file
 *
 * \brief Instance description for SERCOM7
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for SERCOM7 peripheral ========== */
# 137 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/sercom7.h"
/* ========== Instance parameters for SERCOM7 peripheral ========== */
# 660 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/supc.h" 1
/**
 * \file
 *
 * \brief Instance description for SUPC
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for SUPC peripheral ========== */
# 59 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/supc.h"
/* ========== Instance parameters for SUPC peripheral ========== */
# 661 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tal.h" 1
/**
 * \file
 *
 * \brief Instance description for TAL
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TAL peripheral ========== */
# 525 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tal.h"
/* ========== Instance parameters for TAL peripheral ========== */
# 662 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc0.h" 1
/**
 * \file
 *
 * \brief Instance description for TC0
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TC0 peripheral ========== */
# 95 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc0.h"
/* ========== Instance parameters for TC0 peripheral ========== */
# 663 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc1.h" 1
/**
 * \file
 *
 * \brief Instance description for TC1
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TC1 peripheral ========== */
# 95 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc1.h"
/* ========== Instance parameters for TC1 peripheral ========== */
# 664 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc2.h" 1
/**
 * \file
 *
 * \brief Instance description for TC2
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TC2 peripheral ========== */
# 95 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc2.h"
/* ========== Instance parameters for TC2 peripheral ========== */
# 665 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc3.h" 1
/**
 * \file
 *
 * \brief Instance description for TC3
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TC3 peripheral ========== */
# 95 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc3.h"
/* ========== Instance parameters for TC3 peripheral ========== */
# 666 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc4.h" 1
/**
 * \file
 *
 * \brief Instance description for TC4
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TC4 peripheral ========== */
# 95 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc4.h"
/* ========== Instance parameters for TC4 peripheral ========== */
# 667 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc5.h" 1
/**
 * \file
 *
 * \brief Instance description for TC5
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TC5 peripheral ========== */
# 95 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc5.h"
/* ========== Instance parameters for TC5 peripheral ========== */
# 668 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc6.h" 1
/**
 * \file
 *
 * \brief Instance description for TC6
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TC6 peripheral ========== */
# 95 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc6.h"
/* ========== Instance parameters for TC6 peripheral ========== */
# 669 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc7.h" 1
/**
 * \file
 *
 * \brief Instance description for TC7
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TC7 peripheral ========== */
# 95 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tc7.h"
/* ========== Instance parameters for TC7 peripheral ========== */
# 670 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tcc0.h" 1
/**
 * \file
 *
 * \brief Instance description for TCC0
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TCC0 peripheral ========== */
# 101 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tcc0.h"
/* ========== Instance parameters for TCC0 peripheral ========== */
# 671 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tcc1.h" 1
/**
 * \file
 *
 * \brief Instance description for TCC1
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TCC1 peripheral ========== */
# 93 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tcc1.h"
/* ========== Instance parameters for TCC1 peripheral ========== */
# 672 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tcc2.h" 1
/**
 * \file
 *
 * \brief Instance description for TCC2
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TCC2 peripheral ========== */
# 85 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tcc2.h"
/* ========== Instance parameters for TCC2 peripheral ========== */
# 673 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tcc3.h" 1
/**
 * \file
 *
 * \brief Instance description for TCC3
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TCC3 peripheral ========== */
# 79 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tcc3.h"
/* ========== Instance parameters for TCC3 peripheral ========== */
# 674 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tcc4.h" 1
/**
 * \file
 *
 * \brief Instance description for TCC4
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TCC4 peripheral ========== */
# 79 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/tcc4.h"
/* ========== Instance parameters for TCC4 peripheral ========== */
# 675 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/trng.h" 1
/**
 * \file
 *
 * \brief Instance description for TRNG
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for TRNG peripheral ========== */
# 676 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/usb.h" 1
/**
 * \file
 *
 * \brief Instance description for USB
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for USB peripheral ========== */
# 323 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/usb.h"
/* ========== Instance parameters for USB peripheral ========== */
# 677 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/instance/wdt.h" 1
/**
 * \file
 *
 * \brief Instance description for WDT
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */




/* ========== Register definition for WDT peripheral ========== */
# 678 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
/*@}*/

/* ************************************************************************** */
/**  PERIPHERAL ID DEFINITIONS FOR SAMD51P20A */
/* ************************************************************************** */
/** \defgroup SAMD51P20A_id Peripheral Ids Definitions */
/*@{*/

// Peripheral instances on HPB0 bridge
# 704 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h"
// Peripheral instances on HPB1 bridge
# 734 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h"
// Peripheral instances on HPB3 bridge
# 748 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h"
// Peripheral instances on AHB (as if on bridge 4)




/*@}*/

/* ************************************************************************** */
/**  BASE ADDRESS DEFINITIONS FOR SAMD51P20A */
/* ************************************************************************** */
/** \defgroup SAMD51P20A_base Peripheral Base Address Definitions */
/*@{*/
# 1056 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h"
/*@}*/

/* ************************************************************************** */
/**  PORT DEFINITIONS FOR SAMD51P20A */
/* ************************************************************************** */
/** \defgroup SAMD51P20A_port PORT Definitions */
/*@{*/

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h" 1
/**
 * \file
 *
 * \brief Peripheral I/O description for SAMD51P20A
 *
 * Copyright (c) 2017 Atmel Corporation,
 *                    a wholly owned subsidiary of Microchip Technology Inc.
 *
 * \asf_license_start
 *
 * \page License
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the Licence at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * \asf_license_stop
 *
 */
# 230 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for CM4 peripheral ========== */
# 263 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for ANAREF peripheral ========== */
# 276 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for GCLK peripheral ========== */
# 365 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for EIC peripheral ========== */
# 860 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for SERCOM0 peripheral ========== */
# 925 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for SERCOM1 peripheral ========== */
# 990 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TC0 peripheral ========== */
# 1015 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TC1 peripheral ========== */
# 1032 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for USB peripheral ========== */
# 1049 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for SERCOM2 peripheral ========== */
# 1114 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for SERCOM3 peripheral ========== */
# 1179 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TCC0 peripheral ========== */
# 1356 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TCC1 peripheral ========== */
# 1493 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TC2 peripheral ========== */
# 1518 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TC3 peripheral ========== */
# 1535 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TAL peripheral ========== */
# 1544 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TCC2 peripheral ========== */
# 1569 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TCC3 peripheral ========== */
# 1586 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TC4 peripheral ========== */
# 1611 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TC5 peripheral ========== */
# 1636 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for PDEC peripheral ========== */
# 1685 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for AC peripheral ========== */
# 1726 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for QSPI peripheral ========== */
# 1751 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for CCL peripheral ========== */
# 1900 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for SERCOM4 peripheral ========== */
# 1965 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for SERCOM5 peripheral ========== */
# 2038 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for SERCOM6 peripheral ========== */
# 2111 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for SERCOM7 peripheral ========== */
# 2184 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TCC4 peripheral ========== */
# 2201 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TC6 peripheral ========== */
# 2226 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for TC7 peripheral ========== */
# 2251 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for ADC0 peripheral ========== */
# 2568 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for ADC1 peripheral ========== */
# 2633 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for DAC peripheral ========== */
# 2642 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for I2S peripheral ========== */
# 2707 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for PCC peripheral ========== */
# 2776 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for SDHC0 peripheral ========== */
# 2833 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/pio/samd51p20a.h"
/* ========== PORT definition for SDHC1 peripheral ========== */
# 1065 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h" 2
/*@}*/

/* ************************************************************************** */
/**  MEMORY MAPPING DEFINITIONS FOR SAMD51P20A */
/* ************************************************************************** */
# 1102 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51p20a.h"
/* ************************************************************************** */
/**  ELECTRICAL DEFINITIONS FOR SAMD51P20A */
/* ************************************************************************** */



}


/*@}*/
# 55 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd51/include/samd51.h" 2
# 154 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/samd.h" 2
# 566 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h" 2
# 49 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/wiring_constants.h" 1
/*
  Copyright (c) 2014 Arduino.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/





extern "C"{
# 44 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/wiring_constants.h"
enum BitOrder {
 LSBFIRST = 0,
 MSBFIRST = 1
};

// moved to WInterrupts.h
////      LOW 0
////      HIGH 1
//#define CHANGE 2
//#define FALLING 3
//#define RISING 4
//
//#define DEFAULT 1
//#define EXTERNAL 0


} // extern "C"
# 50 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2





void yield( void ) ;

/* system functions */
int main( void );
void init( void );

/* sketch */
void setup( void ) ;
void loop( void ) ;

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WVariant.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.
  SAMD51 support added by Adafruit - Copyright (c) 2018 Dean Miller for Adafruit Industries

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

       


# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h" 1
/* ----------------------------------------------------------------------------
 *         SAM Software Package License
 * ----------------------------------------------------------------------------
 * Copyright (c) 2015, Atmel Corporation
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following condition is met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the disclaimer below.
 *
 * Atmel's name may not be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
 * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * ----------------------------------------------------------------------------
 */
# 24 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WVariant.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 1 3 4

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 3 4
/* Copyright (C) 1992-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GCC is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/* This administrivia gets added to the beginning of limits.h
   if the system has its own version of limits.h.  */

/* We use _GCC_LIMITS_H_ because we want this not to match
   any macros that the system's limits.h uses for its own purposes.  */




/* Use "..." so that we find syslimits.h only in this same directory.  */
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include-fixed/syslimits.h" 1 3 4
/* syslimits.h stands for the system's own limits.h file.
   If we can use it ok unmodified, then we install this text.
   If fixincludes fixes it, then the fixed version is installed
   instead of this text.  */


# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 1 3 4
/* Copyright (C) 1992-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GCC is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/* This administrivia gets added to the beginning of limits.h
   if the system has its own version of limits.h.  */

/* We use _GCC_LIMITS_H_ because we want this not to match
   any macros that the system's limits.h uses for its own purposes.  */
# 194 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 3 4
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/limits.h" 1 3 4



# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/newlib.h" 1 3 4
/* newlib.h.  Generated from newlib.hin by configure.  */
/* newlib.hin.  Manually edited from the output of autoheader to
   remove all PACKAGE_ macros which will collide with any user
   package using newlib header files and having its own package name,
   version, etc...  */
# 5 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/limits.h" 2 3 4
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 1 3 4
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD$
 */
# 6 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/limits.h" 2 3 4
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/syslimits.h" 1 3 4
/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)syslimits.h	8.1 (Berkeley) 6/2/93
 * $FreeBSD: src/sys/sys/syslimits.h,v 1.10 2001/06/18 20:24:54 wollman Exp $
 */
# 7 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/limits.h" 2 3 4







/* Maximum number of positional arguments, if _WANT_IO_POS_ARGS.  */




/* if do not have #include_next support, then we
   have to define the limits here. */
# 136 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/limits.h" 3 4
/* The maximum number of repeated occurrences of a regular expression
 *    permitted when using the interval notation `\{M,N\}'.  */
# 195 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 2 3 4
# 8 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include-fixed/syslimits.h" 2 3 4
# 35 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 2 3 4

/* Copyright (C) 1991-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GCC is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */




/* Number of bits in a `char'.  */



/* Maximum length of a multibyte character.  */




/* Minimum and maximum values a `signed char' can hold.  */





/* Maximum value an `unsigned char' can hold.  (Minimum is 0).  */







/* Minimum and maximum values a `char' can hold.  */
# 102 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 3 4
/* Minimum and maximum values a `signed short int' can hold.  */





/* Maximum value an `unsigned short int' can hold.  (Minimum is 0).  */







/* Minimum and maximum values a `signed int' can hold.  */





/* Maximum value an `unsigned int' can hold.  (Minimum is 0).  */



/* Minimum and maximum values a `signed long int' can hold.
   (Same as `int').  */





/* Maximum value an `unsigned long int' can hold.  (Minimum is 0).  */
# 150 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 3 4
/* Minimum and maximum values a `signed long long int' can hold.  */





/* Maximum value an `unsigned long long int' can hold.  (Minimum is 0).  */
# 188 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 3 4
/* This administrivia gets added to the end of limits.h
   if the system has its own version of limits.h.  */
# 25 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WVariant.h" 2



# 27 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WVariant.h"
extern "C" {


/* Definitions and types for pins */
typedef enum _EAnalogChannel
{
  No_ADC_Channel=-1,
  ADC_Channel0=0,
  ADC_Channel1=1,
  ADC_Channel2=2,
  ADC_Channel3=3,
  ADC_Channel4=4,
  ADC_Channel5=5,
  ADC_Channel6=6,
  ADC_Channel7=7,

  ADC_Channel8=8,
  ADC_Channel9=9,

  ADC_Channel10=10,
  ADC_Channel11=11,

  ADC_Channel12=12,
  ADC_Channel13=13,
  ADC_Channel14=14,
  ADC_Channel15=15,

  ADC_Channel16=16,
  ADC_Channel17=17,
  ADC_Channel18=18,
  ADC_Channel19=19,
  DAC_Channel0,
  DAC_Channel1,
  ADC_Channel_Bandgap=0x1B,
  ADC_Channel_PTAT=0x1C,
} EAnalogChannel ;
# 141 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WVariant.h"
typedef enum _ETCChannel
{
  NOT_ON_TIMER=-1,
  TCC0_CH0 = (0<<8)|(0),
  TCC0_CH1 = (0<<8)|(1),
  TCC0_CH2 = (0<<8)|(2),
  TCC0_CH3 = (0<<8)|(3),
  TCC0_CH4 = (0<<8)|(4),
  TCC0_CH5 = (0<<8)|(5),
  TCC1_CH0 = (1<<8)|(0),
  TCC1_CH1 = (1<<8)|(1),
  TCC1_CH2 = (1<<8)|(2),
  TCC1_CH3 = (1<<8)|(3),
  TCC2_CH0 = (2<<8)|(0),
  TCC2_CH1 = (2<<8)|(1),
  TCC2_CH2 = (2<<8)|(2),
  TCC3_CH0 = (3<<8)|(0),
  TCC3_CH1 = (3<<8)|(1),
  TCC4_CH0 = (4<<8)|(0),
  TCC4_CH1 = (4<<8)|(1),
  TC0_CH0 = (5<<8)|(0),
  TC0_CH1 = (5<<8)|(1),
  TC1_CH0 = (6<<8)|(0),
  TC1_CH1 = (6<<8)|(1),
  TC2_CH0 = (7<<8)|(0),
  TC2_CH1 = (7<<8)|(1),
  TC3_CH0 = (8<<8)|(0),
  TC3_CH1 = (8<<8)|(1),
  TC4_CH0 = (9<<8)|(0),
  TC4_CH1 = (9<<8)|(1),
  TC5_CH0 = (10<<8)|(0),
  TC5_CH1 = (10<<8)|(1),
  TC6_CH0 = (11<<8)|(0),
  TC6_CH1 = (11<<8)|(1),
  TC7_CH0 = (12<<8)|(0),
  TC7_CH1 = (12<<8)|(1),
} ETCChannel ;



typedef ETCChannel EPWMChannel;
extern const uint32_t GCLK_CLKCTRL_IDs[5 /**< \brief (TCC) Number of instances */+8 /**< \brief (TC) Number of instances */];
# 257 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WVariant.h"
extern const void* g_apTCInstances[5 /**< \brief (TCC) Number of instances */+8 /**< \brief (TC) Number of instances */] ;





typedef enum _EPortType
{
  NOT_A_PORT=-1,
  PORTA=0,
  PORTB=1,
  PORTC=2,
  PORTD=3,
} EPortType ;



typedef enum
{
  EXTERNAL_INT_0 = 0,
  EXTERNAL_INT_1,
  EXTERNAL_INT_2,
  EXTERNAL_INT_3,
  EXTERNAL_INT_4,
  EXTERNAL_INT_5,
  EXTERNAL_INT_6,
  EXTERNAL_INT_7,
  EXTERNAL_INT_8,
  EXTERNAL_INT_9,
  EXTERNAL_INT_10,
  EXTERNAL_INT_11,
  EXTERNAL_INT_12,
  EXTERNAL_INT_13,
  EXTERNAL_INT_14,
  EXTERNAL_INT_15,
  EXTERNAL_INT_NMI,
  EXTERNAL_NUM_INTERRUPTS,
  NOT_AN_INTERRUPT = -1,
  EXTERNAL_INT_NONE = NOT_AN_INTERRUPT,
} EExt_Interrupts ;

//A    B                 C       D          E      F   G   H
//EIC REF ADC AC PTC DAC SERCOM SERCOM_ALT TC/TCC TCC COM AC/GCLK

typedef enum _EPioType
{
  PIO_NOT_A_PIN=-1, /* Not under control of a peripheral. */
  PIO_EXTINT=0, /* The pin is controlled by the associated signal of peripheral A. */
  PIO_ANALOG, /* The pin is controlled by the associated signal of peripheral B. */
  PIO_SERCOM, /* The pin is controlled by the associated signal of peripheral C. */
  PIO_SERCOM_ALT, /* The pin is controlled by the associated signal of peripheral D. */
  PIO_TIMER, /* The pin is controlled by the associated signal of peripheral E. */
  PIO_TIMER_ALT, /* The pin is controlled by the associated signal of peripheral F. */

  PIO_TCC_PDEC, /* The pin is controlled by the associated signal of peripheral G. */
  PIO_COM, /* The pin is controlled by the associated signal of peripheral H. */
  PIO_SDHC, /* The pin is controlled by the associated signal of peripheral I. */
  PIO_I2S, /* The pin is controlled by the associated signal of peripheral J. */
  PIO_PCC, /* The pin is controlled by the associated signal of peripheral K. */
  PIO_GMAC, /* The pin is controlled by the associated signal of peripheral L. */
  PIO_AC_CLK, /* The pin is controlled by the associated signal of peripheral M. */
  PIO_CCL, /* The pin is controlled by the associated signal of peripheral N. */




  PIO_DIGITAL, /* The pin is controlled by PORT. */
  PIO_INPUT, /* The pin is controlled by PORT and is an input. */
  PIO_INPUT_PULLUP, /* The pin is controlled by PORT and is an input with internal pull-up resistor enabled. */
  PIO_OUTPUT, /* The pin is controlled by PORT and is an output. */

  PIO_PWM=PIO_TIMER,
  PIO_PWM_ALT=PIO_TIMER_ALT,
} EPioType ;

/**
 * Pin Attributes to be OR-ed
 */
# 345 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WVariant.h"
// these correspond to the mux table







/* Types used for the table below */
typedef struct _PinDescription
{
  EPortType ulPort ;
  uint32_t ulPin ;
  EPioType ulPinType ;
  uint32_t ulPinAttribute ;
  EAnalogChannel ulADCChannelNumber ; /* ADC Channel number in the SAM device */
  EPWMChannel ulPWMChannel ;
  ETCChannel ulTCChannel ;
  EExt_Interrupts ulExtInt ;
} PinDescription ;

/* Pins table to be instantiated into variant.cpp */
extern const PinDescription g_APinDescription[] ;

/* Generic Clock Multiplexer IDs */
# 409 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WVariant.h"
} // extern "C"
# 66 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2


} // extern "C"


// The following headers are for C++ only compilation

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WCharacter.h" 1
/*
  Copyright (c) 2014 Arduino.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/ctype.h" 1 3



# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 1 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 3
/* Provide support for both ANSI and non-ANSI environments.  */

/* To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */
# 5 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/ctype.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 1 3
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD$
 */
# 6 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/ctype.h" 2 3


# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/xlocale.h" 1 3
/* Definition of opaque POSIX-1.2008 type locale_t for userspace. */
# 9 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/ctype.h" 2 3


extern "C" {

int isalnum (int __c);
int isalpha (int __c);
int iscntrl (int __c);
int isdigit (int __c);
int isgraph (int __c);
int islower (int __c);
int isprint (int __c);
int ispunct (int __c);
int isspace (int __c);
int isupper (int __c);
int isxdigit (int __c);
int tolower (int __c);
int toupper (int __c);


int isblank (int __c);



int isascii (int __c);
int toascii (int __c);





extern int isalnum_l (int __c, locale_t __l);
extern int isalpha_l (int __c, locale_t __l);
extern int isblank_l (int __c, locale_t __l);
extern int iscntrl_l (int __c, locale_t __l);
extern int isdigit_l (int __c, locale_t __l);
extern int isgraph_l (int __c, locale_t __l);
extern int islower_l (int __c, locale_t __l);
extern int isprint_l (int __c, locale_t __l);
extern int ispunct_l (int __c, locale_t __l);
extern int isspace_l (int __c, locale_t __l);
extern int isupper_l (int __c, locale_t __l);
extern int isxdigit_l(int __c, locale_t __l);
extern int tolower_l (int __c, locale_t __l);
extern int toupper_l (int __c, locale_t __l);



extern int isascii_l (int __c, locale_t __l);
extern int toascii_l (int __c, locale_t __l);
# 173 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/ctype.h" 3
/* For C++ backward-compatibility only.  */
extern const char _ctype_[];

}
# 23 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WCharacter.h" 2



# 25 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WCharacter.h"
extern "C" {


// WCharacter.h prototypes

inline boolean isAlphaNumeric(int c) __attribute__((always_inline));
inline boolean isAlpha(int c) __attribute__((always_inline));
inline boolean isAscii(int c) __attribute__((always_inline));
inline boolean isWhitespace(int c) __attribute__((always_inline));
inline boolean isControl(int c) __attribute__((always_inline));
inline boolean isDigit(int c) __attribute__((always_inline));
inline boolean isGraph(int c) __attribute__((always_inline));
inline boolean isLowerCase(int c) __attribute__((always_inline));
inline boolean isPrintable(int c) __attribute__((always_inline));
inline boolean isPunct(int c) __attribute__((always_inline));
inline boolean isSpace(int c) __attribute__((always_inline));
inline boolean isUpperCase(int c) __attribute__((always_inline));
inline boolean isHexadecimalDigit(int c) __attribute__((always_inline));
inline int toAscii(int c) __attribute__((always_inline));
inline int toLowerCase(int c) __attribute__((always_inline));
inline int toUpperCase(int c)__attribute__((always_inline));



// Checks for an alphanumeric character.
// It is equivalent to (isalpha(c) || isdigit(c)).
inline boolean isAlphaNumeric(int c)
{
  return ( isalnum(c) == 0 ? false : true);
}


// Checks for an alphabetic character.
// It is equivalent to (isupper(c) || islower(c)).
inline boolean isAlpha(int c)
{
  return ( isalpha(c) == 0 ? false : true);
}


// Checks whether c is a 7-bit unsigned char value
// that fits into the ASCII character set.
inline boolean isAscii(int c)
{
/*  return ( isascii(c) == 0 ? false : true); */
  return ( (c & ~0x7f) != 0 ? false : true);
}


// Checks for a blank character, that is, a space or a tab.
inline boolean isWhitespace(int c)
{
  return ( isblank (c) == 0 ? false : true);
}


// Checks for a control character.
inline boolean isControl(int c)
{
  return ( iscntrl (c) == 0 ? false : true);
}


// Checks for a digit (0 through 9).
inline boolean isDigit(int c)
{
  return ( isdigit (c) == 0 ? false : true);
}


// Checks for any printable character except space.
inline boolean isGraph(int c)
{
  return ( isgraph (c) == 0 ? false : true);
}


// Checks for a lower-case character.
inline boolean isLowerCase(int c)
{
  return (islower (c) == 0 ? false : true);
}


// Checks for any printable character including space.
inline boolean isPrintable(int c)
{
  return ( isprint (c) == 0 ? false : true);
}


// Checks for any printable character which is not a space
// or an alphanumeric character.
inline boolean isPunct(int c)
{
  return ( ispunct (c) == 0 ? false : true);
}


// Checks for white-space characters. For the avr-libc library,
// these are: space, formfeed ('\f'), newline ('\n'), carriage
// return ('\r'), horizontal tab ('\t'), and vertical tab ('\v').
inline boolean isSpace(int c)
{
  return ( isspace (c) == 0 ? false : true);
}


// Checks for an uppercase letter.
inline boolean isUpperCase(int c)
{
  return ( isupper (c) == 0 ? false : true);
}


// Checks for a hexadecimal digits, i.e. one of 0 1 2 3 4 5 6 7
// 8 9 a b c d e f A B C D E F.
inline boolean isHexadecimalDigit(int c)
{
  return ( isxdigit (c) == 0 ? false : true);
}


// Converts c to a 7-bit unsigned char value that fits into the
// ASCII character set, by clearing the high-order bits.
inline int toAscii(int c)
{
/*  return toascii (c); */
  return (c & 0x7f);
}


// Warning:
// Many people will be unhappy if you use this function.
// This function will convert accented letters into random
// characters.

// Converts the letter c to lower case, if possible.
inline int toLowerCase(int c)
{
  return tolower (c);
}


// Converts the letter c to upper case, if possible.
inline int toUpperCase(int c)
{
  return toupper (c);
}


}
# 74 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WString.h" 1
/*
  WString.h - String library for Wiring & Arduino
  ...mostly rewritten by Paul Stoffregen...
  Copyright (c) 2009-10 Hernando Barragan.  All right reserved.
  Copyright 2011, Paul Stoffregen, paul@pjrc.com

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/





# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/stdlib.h" 1 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/stdlib.h" 3
// -*- C++ -*- compatibility header.

// Copyright (C) 2002-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file stdlib.h
 *  This is a Standard C++ Library header.
 */
# 27 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WString.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/string.h" 1 3
/*
 * string.h
 *
 * Definitions for memory and string functions.
 */
# 28 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WString.h" 2

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/avr/pgmspace.h" 1

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/avr/pgmspace.h"
/*
  pgmspace.h - Definitions for compatibility with AVR pgmspace macros

  Copyright (c) 2015 Arduino LLC

  Based on work of Paul Stoffregen on Teensy 3 (http://pjrc.com)

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE
*/
# 30 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WString.h" 2

// When compiling programs with this class, the following gcc parameters
// dramatically increase performance and memory (RAM) efficiency, typically
// with little or no increase in code size.
//     -felide-constructors
//     -std=c++0x

class __FlashStringHelper;


// An inherited class for holding the result of a concatenation.  These
// result objects are assumed to be writable by subsequent concatenations.
class StringSumHelper;

// The string class
class String
{
 // use a function pointer to allow for "if (s)" without the
 // complications of an operator bool(). for more information, see:
 // http://www.artima.com/cppsource/safebool.html
 typedef void (String::*StringIfHelperType)() const;
 void StringIfHelper() const {}

public:
 // constructors
 // creates a copy of the initial value.
 // if the initial value is null or invalid, or if memory allocation
 // fails, the string will be marked as invalid (i.e. "if (s)" will
 // be false).
 String(const char *cstr = "");
 String(const String &str);
 String(const __FlashStringHelper *str);

 String(String &&rval);
 String(StringSumHelper &&rval);

 explicit String(char c);
 explicit String(unsigned char, unsigned char base=10);
 explicit String(int, unsigned char base=10);
 explicit String(unsigned int, unsigned char base=10);
 explicit String(long, unsigned char base=10);
 explicit String(unsigned long, unsigned char base=10);
 explicit String(float, unsigned char decimalPlaces=2);
 explicit String(double, unsigned char decimalPlaces=2);
 ~String(void);

 // memory management
 // return true on success, false on failure (in which case, the string
 // is left unchanged).  reserve(0), if successful, will validate an
 // invalid string (i.e., "if (s)" will be true afterwards)
 unsigned char reserve(unsigned int size);
 inline unsigned int length(void) const {return len;}

 // creates a copy of the assigned value.  if the value is null or
 // invalid, or if the memory allocation fails, the string will be
 // marked as invalid ("if (s)" will be false).
 String & operator = (const String &rhs);
 String & operator = (const char *cstr);
 String & operator = (const __FlashStringHelper *str);

 String & operator = (String &&rval);
 String & operator = (StringSumHelper &&rval);


 // concatenate (works w/ built-in types)

 // returns true on success, false on failure (in which case, the string
 // is left unchanged).  if the argument is null or invalid, the
 // concatenation is considered unsucessful.
 unsigned char concat(const String &str);
 unsigned char concat(const char *cstr);
 unsigned char concat(char c);
 unsigned char concat(unsigned char c);
 unsigned char concat(int num);
 unsigned char concat(unsigned int num);
 unsigned char concat(long num);
 unsigned char concat(unsigned long num);
 unsigned char concat(float num);
 unsigned char concat(double num);
 unsigned char concat(const __FlashStringHelper * str);

 // if there's not enough memory for the concatenated value, the string
 // will be left unchanged (but this isn't signalled in any way)
 String & operator += (const String &rhs) {concat(rhs); return (*this);}
 String & operator += (const char *cstr) {concat(cstr); return (*this);}
 String & operator += (char c) {concat(c); return (*this);}
 String & operator += (unsigned char num) {concat(num); return (*this);}
 String & operator += (int num) {concat(num); return (*this);}
 String & operator += (unsigned int num) {concat(num); return (*this);}
 String & operator += (long num) {concat(num); return (*this);}
 String & operator += (unsigned long num) {concat(num); return (*this);}
 String & operator += (float num) {concat(num); return (*this);}
 String & operator += (double num) {concat(num); return (*this);}
 String & operator += (const __FlashStringHelper *str){concat(str); return (*this);}

 friend StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, char c);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, int num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, long num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
 friend StringSumHelper & operator + (const StringSumHelper &lhs, const __FlashStringHelper *rhs);

 // comparison (only works w/ Strings and "strings")
 operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
 int compareTo(const String &s) const;
 unsigned char equals(const String &s) const;
 unsigned char equals(const char *cstr) const;
 unsigned char operator == (const String &rhs) const {return equals(rhs);}
 unsigned char operator == (const char *cstr) const {return equals(cstr);}
 unsigned char operator != (const String &rhs) const {return !equals(rhs);}
 unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 unsigned char operator < (const String &rhs) const;
 unsigned char operator > (const String &rhs) const;
 unsigned char operator <= (const String &rhs) const;
 unsigned char operator >= (const String &rhs) const;
 unsigned char equalsIgnoreCase(const String &s) const;
 unsigned char startsWith( const String &prefix) const;
 unsigned char startsWith(const String &prefix, unsigned int offset) const;
 unsigned char endsWith(const String &suffix) const;

 // character acccess
 char charAt(unsigned int index) const;
 void setCharAt(unsigned int index, char c);
 char operator [] (unsigned int index) const;
 char& operator [] (unsigned int index);
 void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
 void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
  { getBytes((unsigned char *)buf, bufsize, index); }
 const char* c_str() const { return buffer; }
 char* begin() { return buffer; }
 char* end() { return buffer + length(); }
 const char* begin() const { return c_str(); }
 const char* end() const { return c_str() + length(); }

 // search
 int indexOf( char ch ) const;
 int indexOf( char ch, unsigned int fromIndex ) const;
 int indexOf( const String &str ) const;
 int indexOf( const String &str, unsigned int fromIndex ) const;
 int lastIndexOf( char ch ) const;
 int lastIndexOf( char ch, unsigned int fromIndex ) const;
 int lastIndexOf( const String &str ) const;
 int lastIndexOf( const String &str, unsigned int fromIndex ) const;
 String substring( unsigned int beginIndex ) const { return substring(beginIndex, len); };
 String substring( unsigned int beginIndex, unsigned int endIndex ) const;

 // modification
 void replace(char find, char replace);
 void replace(const String& find, const String& replace);
 void remove(unsigned int index);
 void remove(unsigned int index, unsigned int count);
 void toLowerCase(void);
 void toUpperCase(void);
 void trim(void);

 // parsing/conversion
 long toInt(void) const;
 float toFloat(void) const;
 double toDouble(void) const;

protected:
 char *buffer; // the actual char array
 unsigned int capacity; // the array length minus one (for the '\0')
 unsigned int len; // the String length (not counting the '\0')
protected:
 void init(void);
 void invalidate(void);
 unsigned char changeBuffer(unsigned int maxStrLen);
 unsigned char concat(const char *cstr, unsigned int length);

 // copy and move
 String & copy(const char *cstr, unsigned int length);
 String & copy(const __FlashStringHelper *pstr, unsigned int length);

 void move(String &rhs);

};

class StringSumHelper : public String
{
public:
 StringSumHelper(const String &s) : String(s) {}
 StringSumHelper(const char *p) : String(p) {}
 StringSumHelper(char c) : String(c) {}
 StringSumHelper(unsigned char num) : String(num) {}
 StringSumHelper(int num) : String(num) {}
 StringSumHelper(unsigned int num) : String(num) {}
 StringSumHelper(long num) : String(num) {}
 StringSumHelper(unsigned long num) : String(num) {}
 StringSumHelper(float num) : String(num) {}
 StringSumHelper(double num) : String(num) {}
};
# 75 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Tone.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

       



# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 1
/*
  Arduino.h - Main include file for the Arduino SDK
  Copyright (c) 2014 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
# 24 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Tone.h" 2

void tone(uint32_t _pin, uint32_t frequency, uint32_t duration = 0);
void noTone(uint32_t _pin);
# 76 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WMath.h" 1
/*
  Copyright (c) 2014 Arduino.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/




extern long random( long ) ;
extern long random( long, long ) ;
extern void randomSeed( uint32_t dwSeed ) ;
extern long map( long, long, long, long, long ) ;

extern uint16_t makeWord( uint16_t w ) ;
extern uint16_t makeWord( uint8_t h, uint8_t l ) ;
# 77 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/HardwareSerial.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 1 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
/*
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
 */

/**
 *  @file  inttypes.h
 */
# 23 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/HardwareSerial.h" 2

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Stream.h" 1

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Stream.h"
/*
  Stream.h - base class for character-based streams.
  Copyright (c) 2010 David A. Mellis.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  parsing functions based on TextFinder library by Michael Margolis
*/




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 1 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
/*
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
 */

/**
 *  @file  inttypes.h
 */
# 26 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Stream.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Print.h" 1

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Print.h"
/*
  Copyright (c) 2014 Arduino.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 1 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/inttypes.h" 3
/*
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
 */

/**
 *  @file  inttypes.h
 */
# 23 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Print.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 1 3
/*
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	@(#)stdio.h	5.3 (Berkeley) 3/15/86
 */

/*
 * NB: to fit things in six character monocase externals, the
 * stdio code uses the prefix `__s' for stdio objects, typically
 * followed by a three-character attempt at a mnemonic.
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 1 3
/* Provide support for both ANSI and non-ANSI environments.  */

/* To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */
# 30 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 2 3





# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 1 3
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD$
 */
# 36 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
/* Copyright (C) 1989-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */






/* Any one of these symbols __need_* means that GNU libc
   wants us just to define one data type.  So don't define
   the symbols that indicate this file's entire job has been done.  */
# 46 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* This avoids lossage on SunOS but only if stdtypes.h comes first.
   There's no way to win with the other order!  Sun lossage.  */
# 86 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Sequent's header files use _PTRDIFF_T_ in some conflicting way.
   Just ignore it.  */




/* On VxWorks, <type/vxTypesBase.h> may have defined macros like
   _TYPE_size_t which will typedef size_t.  fixincludes patched the
   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
   not defined, and so that defining this macro defines _GCC_SIZE_T.
   If we find that the macros are still defined at this point, we must
   invoke them so that the type is defined as expected.  */
# 111 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* In case nobody has defined these types, but we aren't running under
   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
   __WCHAR_TYPE__ have reasonable values.  This can happen if the
   parts of GCC is compiled by an older compiler, that actually
   include gstddef.h, such as collect2.  */

/* Signed type of difference of two pointers.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 154 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* If this symbol has done its job, get rid of it.  */




/* Unsigned type of `sizeof' something.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 235 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Wide character type.
   Locale-writers should change this as necessary to
   be big enough to hold unique values not between 0 and 127,
   and not (wchar_t) -1, for each defined multibyte character.  */

/* Define this type if we are doing the whole job,
   or if we want this type in particular.  */
# 387 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* A null pointer constant.  */
# 405 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
/* Offset of member MEMBER in a struct of type TYPE. */
# 37 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 2 3

/* typedef only __gnuc_va_list, used throughout the header */

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h" 1 3 4
/* Copyright (C) 1989-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  7.15  Variable arguments  <stdarg.h>
 */
# 36 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h" 3 4
/* Define __gnuc_va_list.  */



typedef __builtin_va_list __gnuc_va_list;


/* Define the standard macros for the user,
   if this invocation was from the user program.  */
# 41 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 2 3

/* typedef va_list only when required */



typedef __gnuc_va_list va_list;







/*
 * <sys/reent.h> defines __FILE, _fpos_t.
 * They must be defined there because struct _reent needs them (and we don't
 * want reent.h to include this file.
 */

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 1 3
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */
# 61 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 1 3
/* unified sys/types.h: 
   start with sef's sysvi386 version.
   merge go32 version -- a few ifdefs.
   h8300hms, h8300xray, and sysvnecv70 disagree on the following types:

   typedef int gid_t;
   typedef int uid_t;
   typedef int dev_t;
   typedef int ino_t;
   typedef int mode_t;
   typedef int caddr_t;

   however, these aren't "reasonable" values, the sysvi386 ones make far 
   more sense, and should work sufficiently well (in particular, h8300 
   doesn't have a stat, and the necv70 doesn't matter.) -- eichin
 */



# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/_ansi.h" 1 3
/* Provide support for both ANSI and non-ANSI environments.  */

/* To get a strict ANSI C environment, define macro __STRICT_ANSI__.  This will
   "comment out" the non-ANSI parts of the ANSI header files (non-ANSI header
   files aren't affected).  */
# 21 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 1 3
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD$
 */
# 22 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_types.h" 1 3
/*
 *  $Id$
 */
# 23 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 2 3

/* BSD types permitted by POSIX and always exposed as in Glibc.  Only provided
   for backward compatibility with BSD code.  The uintN_t standard types should
   be preferred in new code. */

typedef __uint8_t u_int8_t;


typedef __uint16_t u_int16_t;


typedef __uint32_t u_int32_t;


typedef __uint64_t u_int64_t;

typedef int register_t;
# 61 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 3
/* <stddef.h> must be before <sys/_types.h> for __size_t considerations */
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
/* Copyright (C) 1989-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */
# 63 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 1 3
/* ANSI C namespace clean utility typedefs */

/* This file defines various typedefs needed by the system calls that support
   the C library.  Basically, they're just the POSIX versions with an '_'
   prepended.  Targets shall use <machine/_types.h> to define their own
   internal types if desired.

   There are three define patterns used for type definitions.  Lets assume
   xyz_t is a user type.

   The internal type definition uses __machine_xyz_t_defined.  It is defined by
   <machine/_types.h> to disable a default definition in <sys/_types.h>. It
   must not be used in other files.

   User type definitions are guarded by __xyz_t_defined in glibc and
   _XYZ_T_DECLARED in BSD compatible systems.
*/
# 64 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_stdint.h" 1 3
/*
 * Copyright (c) 2004, 2005 by
 * Ralf Corsepius, Ulm/Germany. All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * is freely granted, provided that this notice is preserved.
 */
# 65 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 2 3


# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/endian.h" 1 3



# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 1 3
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD$
 */
# 5 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/endian.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 1 3
/* ANSI C namespace clean utility typedefs */

/* This file defines various typedefs needed by the system calls that support
   the C library.  Basically, they're just the POSIX versions with an '_'
   prepended.  Targets shall use <machine/_types.h> to define their own
   internal types if desired.

   There are three define patterns used for type definitions.  Lets assume
   xyz_t is a user type.

   The internal type definition uses __machine_xyz_t_defined.  It is defined by
   <machine/_types.h> to disable a default definition in <sys/_types.h>. It
   must not be used in other files.

   User type definitions are guarded by __xyz_t_defined in glibc and
   _XYZ_T_DECLARED in BSD compatible systems.
*/
# 6 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/endian.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/_endian.h" 1 3
/* ARM configuration file.
   Copyright (c) 2015 ARM Ltd.  All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. The name of the company may not be used to endorse or promote
      products derived from this software without specific prior written
      permission.

   THIS SOFTWARE IS PROVIDED BY ARM LTD ``AS IS'' AND ANY EXPRESS OR IMPLIED
   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   IN NO EVENT SHALL ARM LTD BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
# 7 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/endian.h" 2 3
# 68 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/select.h" 1 3



/* We don't define fd_set and friends if we are compiling POSIX
   source, or if we have included (or may include as indicated
   by __USE_W32_SOCKETS) the W32api winsock[2].h header which
   defines Windows versions of them.   Note that a program which
   includes the W32api winsock[2].h header must know what it is doing;
   it must not call the Cygwin select function.
*/


# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 1 3
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD$
 */
# 14 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/select.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_sigset.h" 1 3
/*-
 * Copyright (c) 1982, 1986, 1989, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)signal.h	8.4 (Berkeley) 5/4/95
 * $FreeBSD$
 */




typedef unsigned long __sigset_t;
# 15 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/select.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_timeval.h" 1 3
/*-
 * Copyright (c) 2002 Mike Barcroft <mike@FreeBSD.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD$
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 1 3
/* ANSI C namespace clean utility typedefs */

/* This file defines various typedefs needed by the system calls that support
   the C library.  Basically, they're just the POSIX versions with an '_'
   prepended.  Targets shall use <machine/_types.h> to define their own
   internal types if desired.

   There are three define patterns used for type definitions.  Lets assume
   xyz_t is a user type.

   The internal type definition uses __machine_xyz_t_defined.  It is defined by
   <machine/_types.h> to disable a default definition in <sys/_types.h>. It
   must not be used in other files.

   User type definitions are guarded by __xyz_t_defined in glibc and
   _XYZ_T_DECLARED in BSD compatible systems.
*/
# 33 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_timeval.h" 2 3


typedef __suseconds_t suseconds_t;




typedef __int_least64_t time_t;




/* This define is also used outside of Newlib, e.g. in MinGW-w64 */



/*
 * Structure returned by gettimeofday(2) system call, and used in other calls.
 */
struct timeval {
 time_t tv_sec; /* seconds */
 suseconds_t tv_usec; /* and microseconds */
};
# 16 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/select.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/timespec.h" 1 3
/*-
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)time.h	8.5 (Berkeley) 5/4/95
 * from: FreeBSD: src/sys/sys/time.h,v 1.43 2000/03/20 14:09:05 phk Exp
 *	$FreeBSD$
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/cdefs.h" 1 3
/* libc/sys/linux/sys/cdefs.h - Helper macros for K&R vs. ANSI C compat. */

/* Written 2000 by Werner Almesberger */

/*-
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)cdefs.h	8.8 (Berkeley) 1/9/95
 * $FreeBSD$
 */
# 38 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/timespec.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_timespec.h" 1 3
/*-
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)time.h	8.5 (Berkeley) 5/4/95
 * from: FreeBSD: src/sys/sys/time.h,v 1.43 2000/03/20 14:09:05 phk Exp
 *	$FreeBSD$
 */




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_types.h" 1 3
/* ANSI C namespace clean utility typedefs */

/* This file defines various typedefs needed by the system calls that support
   the C library.  Basically, they're just the POSIX versions with an '_'
   prepended.  Targets shall use <machine/_types.h> to define their own
   internal types if desired.

   There are three define patterns used for type definitions.  Lets assume
   xyz_t is a user type.

   The internal type definition uses __machine_xyz_t_defined.  It is defined by
   <machine/_types.h> to disable a default definition in <sys/_types.h>. It
   must not be used in other files.

   User type definitions are guarded by __xyz_t_defined in glibc and
   _XYZ_T_DECLARED in BSD compatible systems.
*/
# 38 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_timespec.h" 2 3







struct timespec {
 time_t tv_sec; /* seconds */
 long tv_nsec; /* and nanoseconds */
};
# 39 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/timespec.h" 2 3
# 54 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/timespec.h" 3
/*
 * Structure defined by POSIX.1b to be like a itimerval, but with
 * timespecs. Used in the timer_*() system calls.
 */
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};
# 17 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/select.h" 2 3



typedef __sigset_t sigset_t;



/*
 * Select uses bit masks of file descriptors in longs.
 * These macros manipulate such bit fields (the filesystem macros use chars).
 * FD_SETSIZE may be defined by the user, but the default here
 * should be >= NOFILE (param.h).
 */




typedef unsigned long fd_mask;





/* We use a macro for fd_set so that including Sockets.h afterwards
   can work.  */
typedef struct _types_fd_set {
 fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8) /* bits per mask */)-1))/((sizeof (fd_mask) * 8) /* bits per mask */))];
} _types_fd_set;
# 60 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/select.h" 3
extern "C" {

int select (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, struct timeval *__timeout) /* full-blown ANSI C */
                                                   ;

int pselect (int __n, _types_fd_set *__readfds, _types_fd_set *__writefds, _types_fd_set *__exceptfds, const struct timespec *__timeout, const sigset_t *__set) /* full-blown ANSI C */

                           ;


}
# 69 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 2 3




typedef __uint32_t in_addr_t; /* base type for internet address */




typedef __uint16_t in_port_t;






/* also defined in mingw/gmon.h and in w32api/winsock[2].h */

typedef unsigned char u_char;



typedef unsigned short u_short;



typedef unsigned int u_int;



typedef unsigned long u_long;







typedef unsigned short ushort; /* System V compatibility */
typedef unsigned int uint; /* System V compatibility */
typedef unsigned long ulong; /* System V compatibility */



typedef __blkcnt_t blkcnt_t;




typedef __blksize_t blksize_t;




typedef unsigned long /* clock() */ clock_t;
# 135 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 3
typedef long daddr_t;



typedef char * caddr_t;




typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;




typedef __id_t id_t; /* can hold a uid_t or pid_t */




typedef __ino_t ino_t; /* inode number */
# 165 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 3
/*
 * All these should be machine specific - right now they are all broken.
 * However, for all of Cygnus' embedded targets, we want them to all be
 * the same.  Otherwise things like sizeof (struct stat) might depend on
 * how the file was compiled (e.g. -mint16 vs -mint32, etc.).
 */


typedef __off_t off_t; /* file offset */



typedef __dev_t dev_t; /* device number or struct cdev */



typedef __uid_t uid_t; /* user id */



typedef __gid_t gid_t; /* group id */




typedef __pid_t pid_t; /* process id */




typedef __key_t key_t; /* IPC key */




typedef _ssize_t ssize_t;




typedef __mode_t mode_t; /* permissions */




typedef __nlink_t nlink_t; /* link count */




typedef __clockid_t clockid_t;





typedef __timer_t timer_t;





typedef __useconds_t useconds_t; /* microseconds (unsigned) */
# 236 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 3
typedef __int64_t sbintime_t;

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/features.h" 1 3
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2014.
 *
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id$
 */
# 239 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_pthreadtypes.h" 1 3
/*
 *  Written by Joel Sherrill <joel.sherrill@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2013, 2015.
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 */






# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/sched.h" 1 3
/*
 *  Written by Joel Sherrill <joel@OARcorp.com>.
 *
 *  COPYRIGHT (c) 1989-2010.
 *  On-Line Applications Research Corporation (OAR).
 *
 *  Permission to use, copy, modify, and distribute this software for any
 *  purpose without fee is hereby granted, provided that this entire notice
 *  is included in all copies of any software which is or includes a copy
 *  or modification of this software.
 *
 *  THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 *  WARRANTY.  IN PARTICULAR,  THE AUTHOR MAKES NO REPRESENTATION
 *  OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY OF THIS
 *  SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 *  $Id$
 */





# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_timespec.h" 1 3
/*-
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)time.h	8.5 (Berkeley) 5/4/95
 * from: FreeBSD: src/sys/sys/time.h,v 1.43 2000/03/20 14:09:05 phk Exp
 *	$FreeBSD$
 */
# 25 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/sched.h" 2 3


extern "C" {


/* Scheduling Policies */
/* Open Group Specifications Issue 6 */
# 45 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/sched.h" 3
/* Scheduling Parameters */
/* Open Group Specifications Issue 6 */

struct sched_param {
  int sched_priority; /* Process execution scheduling priority */
# 61 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/sched.h" 3
};


}



/* end of include file */
# 24 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_pthreadtypes.h" 2 3

/*
 *  2.5 Primitive System Data Types,  P1003.1c/D10, p. 19.
 */




typedef __uint32_t pthread_t; /* identify a thread */


/* P1003.1c/D10, p. 118-119 */



/* P1003.1c/D10, p. 111 */

                                      /*   attributes are inherited from */
                                      /*   the calling thread. */


/* P1003.1c/D10, p. 141 */
# 61 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_pthreadtypes.h" 3
typedef struct {
  int is_initialized;
  void *stackaddr;
  int stacksize;
  int contentionscope;
  int inheritsched;
  int schedpolicy;
  struct sched_param schedparam;

  /* P1003.4b/D8, p. 54 adds cputime_clock_allowed attribute.  */



  int detachstate;
} pthread_attr_t;
# 154 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_pthreadtypes.h" 3
typedef __uint32_t pthread_mutex_t; /* identify a mutex */

typedef struct {
  int is_initialized;
# 168 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_pthreadtypes.h" 3
  int recursive;
} pthread_mutexattr_t;




/* Condition Variables */

typedef __uint32_t pthread_cond_t; /* identify a condition variable */



typedef struct {
  int is_initialized;
  clock_t clock; /* specifiy clock for timeouts */



} pthread_condattr_t; /* a condition attribute object */

/* Keys */

typedef __uint32_t pthread_key_t; /* thread-specific data keys */

typedef struct {
  int is_initialized; /* is this structure initialized? */
  int init_executed; /* has the initialization routine been run? */
} pthread_once_t; /* dynamic package initialization */




/* POSIX Barrier Types */
# 212 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/_pthreadtypes.h" 3
/* POSIX Spin Lock Types */





/* POSIX Reader/Writer Lock Types */
# 240 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/machine/types.h" 1 3
/*
 * Newlib targets may provide an own version of this file in their machine
 * directory to add custom user types for <sys/types.h>.
 */
# 241 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/types.h" 2 3
# 62 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 2 3

extern "C" {


typedef __FILE FILE;






typedef _fpos_t fpos_t;





# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/stdio.h" 1 3




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/reent.h" 1 3
/* This header file provides the reentrancy.  */

/* WARNING: All identifiers here must begin with an underscore.  This file is
   included by stdio.h and others and we therefore must only use identifiers
   in the namespace allotted to us.  */
# 6 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/sys/stdio.h" 2 3

/* Internal locking macros, used to protect stdio functions.  In the
   general case, expand to nothing. Use __SSTR flag in FILE _flags to
   detect if FILE is private to sprintf/sscanf class of functions; if
   set then do nothing as lock is not initialised. */
# 80 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 2 3





 /* RD and WR are never simultaneously asserted */
# 101 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 3
/* _flags2 flags */



/*
 * The following three definitions are for ANSI C, which took them
 * from System V, which stupidly took internal interface macros and
 * made them official arguments to setvbuf(), without renaming them.
 * Hence, these ugly _IOxxx names are *supposed* to appear in user code.
 *
 * Although these happen to match their counterparts above, the
 * implementation does not rely on that (so these could be renumbered).
 */
# 168 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 3
/*
 * Functions defined in ANSI C standard.
 */
# 181 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 3
char * ctermid (char *);




FILE * tmpfile (void);
char * tmpnam (char *);

char * tempnam (const char *, const char *) __attribute__((__malloc__)) __attribute__((__warn_unused_result__));

int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *, const char *, FILE *);
void setbuf (FILE *, char *);
int setvbuf (FILE *, char *, int, size_t);
int fprintf (FILE *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int fscanf (FILE *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int printf (const char *, ...)
               __attribute__ ((__format__ (__printf__, 1, 2)));
int scanf (const char *, ...)
               __attribute__ ((__format__ (__scanf__, 1, 2)));
int sscanf (const char *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int vfprintf (FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int vprintf (const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 1, 0)));
int vsprintf (char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int fgetc (FILE *);
char * fgets (char *, int, FILE *);
int fputc (int, FILE *);
int fputs (const char *, FILE *);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void *, size_t _size, size_t _n, FILE *);
size_t fwrite (const void * , size_t _size, size_t _n, FILE *);



int fgetpos (FILE *, fpos_t *);

int fseek (FILE *, long, int);



int fsetpos (FILE *, const fpos_t *);

long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char * _name, const char * _type);
int sprintf (char *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int remove (const char *);
int rename (const char *, const char *);
# 257 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 3
int fseeko (FILE *, off_t, int);
off_t ftello (FILE *);







int snprintf (char *, size_t, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int vsnprintf (char *, size_t, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int vfscanf (FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int vscanf (const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 1, 0)));
int vsscanf (const char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
# 284 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 3
int asiprintf (char **, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
char * asniprintf (char *, size_t *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
char * asnprintf (char *, size_t *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));

int diprintf (int, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));

int fiprintf (FILE *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int fiscanf (FILE *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int iprintf (const char *, ...)
               __attribute__ ((__format__ (__printf__, 1, 2)));
int iscanf (const char *, ...)
               __attribute__ ((__format__ (__scanf__, 1, 2)));
int siprintf (char *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int siscanf (const char *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int sniprintf (char *, size_t, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int vasiprintf (char **, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int vdiprintf (int, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int vfiprintf (FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int vfiscanf (FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int viprintf (const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 1, 0)));
int viscanf (const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 1, 0)));
int vsiprintf (char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int vsiscanf (const char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int vsniprintf (char *, size_t, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));



/*
 * Routines in POSIX 1003.1:2001.
 */



FILE * fdopen (int, const char *);

int fileno (FILE *);


int pclose (FILE *);
FILE * popen (const char *, const char *);



void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);



int getw (FILE *);
int putw (int, FILE *);


int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);


/*
 * Routines in POSIX 1003.1:200x.
 */




int dprintf (int, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));

FILE * fmemopen (void *, size_t, const char *);
/* getdelim - see __getdelim for now */
/* getline - see __getline for now */
FILE * open_memstream (char **, size_t *);
int vdprintf (int, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));



int renameat (int, const char *, int, const char *);





/*
 * Recursive versions of the above.
 */

int _asiprintf_r (struct _reent *, char **, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 4, 5)));
char * _asnprintf_r (struct _reent *, char *, size_t *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 4, 5)));
int _asprintf_r (struct _reent *, char **, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _diprintf_r (struct _reent *, int, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _dprintf_r (struct _reent *, int, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *, int, FILE *);
char * _fgets_unlocked_r (struct _reent *, char *, int, FILE *);




int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);

int _fiprintf_r (struct _reent *, FILE *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _fiscanf_r (struct _reent *, FILE *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 3, 4)));
FILE * _fmemopen_r (struct _reent *, void *, size_t, const char *);
FILE * _fopen_r (struct _reent *, const char *, const char *);
FILE * _freopen_r (struct _reent *, const char *, const char *, FILE *);
int _fprintf_r (struct _reent *, FILE *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *, FILE *);
int _fputs_unlocked_r (struct _reent *, const char *, FILE *);
size_t _fread_r (struct _reent *, void *, size_t _size, size_t _n, FILE *);
size_t _fread_unlocked_r (struct _reent *, void *, size_t _size, size_t _n, FILE *);
int _fscanf_r (struct _reent *, FILE *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 3, 4)));
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void *, size_t _size, size_t _n, FILE *);
size_t _fwrite_unlocked_r (struct _reent *, const void *, size_t _size, size_t _n, FILE *);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int _iscanf_r (struct _reent *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 2, 3)));
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *,
      const char *_old, const char *_new);
int _scanf_r (struct _reent *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 2, 3)));
int _siprintf_r (struct _reent *, char *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _siscanf_r (struct _reent *, const char *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 3, 4)));
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...)
               __attribute__ ((__format__ (__printf__, 4, 5)));
int _snprintf_r (struct _reent *, char *, size_t, const char *, ...)
               __attribute__ ((__format__ (__printf__, 4, 5)));
int _sprintf_r (struct _reent *, char *, const char *, ...)
               __attribute__ ((__format__ (__printf__, 3, 4)));
int _sscanf_r (struct _reent *, const char *, const char *, ...)
               __attribute__ ((__format__ (__scanf__, 3, 4)));
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 4, 0)));
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 4, 0)));
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vdprintf_r (struct _reent *, int, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 3, 0)));
int _vfprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vfscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 3, 0)));
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int _vprintf_r (struct _reent *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 2, 0)));
int _vscanf_r (struct _reent *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 2, 0)));
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 3, 0)));
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 4, 0)));
int _vsnprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 4, 0)));
int _vsprintf_r (struct _reent *, char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__printf__, 3, 0)));
int _vsscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list)
               __attribute__ ((__format__ (__scanf__, 3, 0)));

/* Other extensions.  */

int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);


void clearerr_unlocked (FILE *);
int feof_unlocked (FILE *);
int ferror_unlocked (FILE *);
int fileno_unlocked (FILE *);
int fflush_unlocked (FILE *);
int fgetc_unlocked (FILE *);
int fputc_unlocked (int, FILE *);
size_t fread_unlocked (void *, size_t _size, size_t _n, FILE *);
size_t fwrite_unlocked (const void * , size_t _size, size_t _n, FILE *);
# 573 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 3
/*
 * Routines internal to the implementation.
 */

int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);

/*
 * Stdio function-access interface.
 */
# 601 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 3
FILE *funopen (const void *__cookie,
  int (*__readfn)(void *__cookie, char *__buf,
    int __n),
  int (*__writefn)(void *__cookie, const char *__buf,
     int __n),
  fpos_t (*__seekfn)(void *__cookie, fpos_t __off, int __whence),
  int (*__closefn)(void *__cookie));
FILE *_funopen_r (struct _reent *, const void *__cookie,
  int (*__readfn)(void *__cookie, char *__buf,
    int __n),
  int (*__writefn)(void *__cookie, const char *__buf,
     int __n),
  fpos_t (*__seekfn)(void *__cookie, fpos_t __off, int __whence),
  int (*__closefn)(void *__cookie));
# 650 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 3
/*
 * The __sfoo macros are here so that we can 
 * define function versions in the C library.
 */
# 687 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 3
static __inline__ int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {




 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf_r(_ptr, _c, _p));
}
# 773 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 3
/* fast always-buffered version, true iff error */
# 797 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 3
}
# 24 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Print.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h" 1 3 4
/* Copyright (C) 1989-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  7.15  Variable arguments  <stdarg.h>
 */
# 36 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h" 3 4
/* Define __gnuc_va_list.  */






/* Define the standard macros for the user,
   if this invocation was from the user program.  */
# 56 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h" 3 4
/* Define va_list, if desired, from __gnuc_va_list. */
/* We deliberately do not define va_list when called from
   stdio.h, because ANSI C says that stdio.h is not supposed to define
   va_list.  stdio.h needs to have access to that data type, 
   but must not use that name.  It should use the name __gnuc_va_list,
   which is safe because it is reserved for the implementation.  */
# 86 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h" 3 4
/* The macro _VA_LIST_ is the same thing used by this file in Ultrix.
   But on BSD NET2 we must not test or define or undef it.
   (Note that the comments in NET 2's ansi.h
   are incorrect for _VA_LIST_--see stdio.h!)  */

/* The macro _VA_LIST_DEFINED is used in Windows NT 3.5  */
# 25 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Print.h" 2


# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WString.h" 1

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WString.h"
/*
  WString.h - String library for Wiring & Arduino
  ...mostly rewritten by Paul Stoffregen...
  Copyright (c) 2009-10 Hernando Barragan.  All right reserved.
  Copyright 2011, Paul Stoffregen, paul@pjrc.com

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
# 28 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Print.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Printable.h" 1
/*
  Copyright (c) 2014 Arduino.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/stdlib.h" 1 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/stdlib.h" 3
// -*- C++ -*- compatibility header.

// Copyright (C) 2002-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file stdlib.h
 *  This is a Standard C++ Library header.
 */
# 23 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Printable.h" 2


# 24 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Printable.h"
class Print;

/** The Printable class provides a way for new classes to allow themselves to be printed.
    By deriving from Printable and implementing the printTo method, it will then be possible
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/

class Printable
{
  public:
    virtual size_t printTo(Print& p) const = 0;
};
# 29 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Print.h" 2






class Print
{
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printULLNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == 
# 52 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Print.h" 3 4
                __null
# 52 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Print.h"
                    ) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    size_t print(const __FlashStringHelper *);
    size_t print(const String &);
    size_t print(const char[]);
    size_t print(char);
    size_t print(unsigned char, int = 10);
    size_t print(int, int = 10);
    size_t print(unsigned int, int = 10);
    size_t print(long, int = 10);
    size_t print(unsigned long, int = 10);
    size_t print(long long, int = 10);
    size_t print(unsigned long long, int = 10);
    size_t print(double, int = 2);
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
    size_t println(unsigned char, int = 10);
    size_t println(int, int = 10);
    size_t println(unsigned int, int = 10);
    size_t println(long, int = 10);
    size_t println(unsigned long, int = 10);
    size_t println(long long, int = 10);
    size_t println(unsigned long long, int = 10);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    void printf(const char[], ...);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
};
# 27 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Stream.h" 2

// compatability macros for testing
/*
#define   getInt()            parseInt()
#define   getInt(ignore)      parseInt(ignore)
#define   getFloat()          parseFloat()
#define   getFloat(ignore)    parseFloat(ignore)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

// This enumeration provides the lookahead options for parseInt(), parseFloat()
// The rules set out here are used until either the first valid character is found
// or a time out occurs due to lack of input.
enum LookaheadMode{
    SKIP_ALL, // All invalid characters are ignored.
    SKIP_NONE, // Nothing is skipped, and the stream is not touched unless the first waiting character is valid.
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};



class Stream : public Print
{
  protected:
    unsigned long _timeout; // number of milliseconds to wait for the next char before aborting timed read
    unsigned long _startMillis; // used for timeout measurement
    int timedRead(); // read stream with timeout
    int timedPeek(); // peek stream with timeout
    int peekNextDigit(LookaheadMode lookahead, bool detectDecimal); // returns the next numeric digit in the stream or -1 if timeout

  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}

// parsing methods

  void setTimeout(unsigned long timeout); // sets maximum milliseconds to wait for stream data, default is 1 second
  unsigned long getTimeout(void) { return _timeout; }

  bool find(char *target); // reads data from the stream until the target string is found
  bool find(uint8_t *target) { return find ((char *)target); }
  // returns true if target string is found, false if timed out (see setTimeout)

  bool find(char *target, size_t length); // reads data from the stream until the target string of given length is found
  bool find(uint8_t *target, size_t length) { return find ((char *)target, length); }
  // returns true if target string is found, false if timed out

  bool find(char target) { return find (&target, 1); }

  bool findUntil(char *target, char *terminator); // as find but search ends if the terminator string is found
  bool findUntil(uint8_t *target, char *terminator) { return findUntil((char *)target, terminator); }

  bool findUntil(char *target, size_t targetLen, char *terminate, size_t termLen); // as above but search ends if the terminate string is found
  bool findUntil(uint8_t *target, size_t targetLen, char *terminate, size_t termLen) {return findUntil((char *)target, targetLen, terminate, termLen); }

  long parseInt(LookaheadMode lookahead = SKIP_ALL, char ignore = '\x01' /* a char not found in a valid ASCII numeric field*/);
  // returns the first valid (long) integer value from the current position.
  // lookahead determines how parseInt looks ahead in the stream.
  // See LookaheadMode enumeration at the top of the file.
  // Lookahead is terminated by the first character that is not a valid part of an integer.
  // Once parsing commences, 'ignore' will be skipped in the stream.

  float parseFloat(LookaheadMode lookahead = SKIP_ALL, char ignore = '\x01' /* a char not found in a valid ASCII numeric field*/);
  // float version of parseInt

  size_t readBytes( char *buffer, size_t length); // read chars from stream into buffer
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }
  // terminates if length characters have been read or timeout (see setTimeout)
  // returns the number of characters placed in the buffer (0 means no valid data found)

  size_t readBytesUntil( char terminator, char *buffer, size_t length); // as readBytes with terminator character
  size_t readBytesUntil( char terminator, uint8_t *buffer, size_t length) { return readBytesUntil(terminator, (char *)buffer, length); }
  // terminates if length characters have been read, timeout, or if the terminator character  detected
  // returns the number of characters placed in the buffer (0 means no valid data found)

  // Arduino String functions to be added here
  String readString();
  String readStringUntil(char terminator);

  protected:
  long parseInt(char ignore) { return parseInt(SKIP_ALL, ignore); }
  float parseFloat(char ignore) { return parseFloat(SKIP_ALL, ignore); }
  // These overload exists for compatibility with any class that has derived
  // Stream and used parseFloat/Int with a custom ignore character. To keep
  // the public API simple, these overload remains protected.

  struct MultiTarget {
    const char *str; // string you're searching for
    size_t len; // length of string you're searching for
    size_t index; // index used by the search routine.
  };

  // This allows you to search for an arbitrary number of strings.
  // Returns index of the target that is found first or -1 if timeout occurs.
  int findMulti(struct MultiTarget *targets, int tCount);
};
# 25 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/HardwareSerial.h" 2
# 67 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/HardwareSerial.h"
class HardwareSerial : public Stream
{
  public:
    virtual void begin(unsigned long) {}
    virtual void begin(unsigned long, uint16_t) {}
    virtual void end() {}
    virtual int available(void) = 0;
    virtual int peek(void) = 0;
    virtual int read(void) = 0;
    virtual void flush(void) = 0;
    virtual size_t write(uint8_t) = 0;
    using Print::write; // pull in write(str) and write(buf, size) from Print
    virtual operator bool() = 0;
};

extern void serialEventRun(void) __attribute__((weak));
# 78 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/pulse.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

       


extern "C" {


/*
 * \brief Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse.
 */
uint32_t pulseIn(uint32_t pin, uint32_t state, uint32_t timeout);


// Provides a version of pulseIn with a default argument (C++ only)
uint32_t pulseIn(uint32_t pin, uint32_t state, uint32_t timeout = 1000000L);

} // extern "C"
# 79 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/delay.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.
  SAMD51 support added by Adafruit - Copyright (c) 2018 Dean Miller for Adafruit Industries

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/





# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h" 1
/*
  Copyright (c) 2014-2015 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/




// The definitions here needs a SAMD core >=1.6.10


/*----------------------------------------------------------------------------
 *        Definitions
 *----------------------------------------------------------------------------*/

/** Frequency of the board main oscillator */


/** Master clock frequency */






/*----------------------------------------------------------------------------
 *        Headers
 *----------------------------------------------------------------------------*/




# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/SERCOM.h" 1
/*
  Copyright (c) 2014 Arduino.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/




# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/CMSIS-Atmel/1.2.2/CMSIS/Device/ATMEL/sam.h" 1
/* ----------------------------------------------------------------------------
 *         SAM Software Package License
 * ----------------------------------------------------------------------------
 * Copyright (c) 2015, Atmel Corporation
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following condition is met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the disclaimer below.
 *
 * Atmel's name may not be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
 * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * ----------------------------------------------------------------------------
 */
# 23 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/SERCOM.h" 2

// SAMD51 has configurable MAX_SPI, else use peripheral clock default.
// Update: changing MAX_SPI via compiler flags is DEPRECATED, because
// this affects ALL SPI peripherals including some that should NOT be
// changed (e.g. anything using SD card). Instead, use setClockSource().
// This is left here for compatibility w/interim MAX_SPI-dependent code:





// Other SERCOM peripherals always use the 48 MHz clock



typedef enum
{
 UART_EXT_CLOCK = 0,
 UART_INT_CLOCK = 0x1u
} SercomUartMode;

typedef enum
{
 SPI_SLAVE_OPERATION = 0x2u,
 SPI_MASTER_OPERATION = 0x3u
} SercomSpiMode;

typedef enum
{
 I2C_SLAVE_OPERATION = 0x4u,
 I2C_MASTER_OPERATION = 0x5u
} SercomI2CMode;

typedef enum
{
 SERCOM_EVEN_PARITY = 0,
 SERCOM_ODD_PARITY,
 SERCOM_NO_PARITY
} SercomParityMode;

typedef enum
{
 SERCOM_STOP_BIT_1 = 0,
 SERCOM_STOP_BITS_2
} SercomNumberStopBit;

typedef enum
{
 MSB_FIRST = 0,
 LSB_FIRST
} SercomDataOrder;

typedef enum
{
 UART_CHAR_SIZE_8_BITS = 0,
 UART_CHAR_SIZE_9_BITS,
 UART_CHAR_SIZE_5_BITS = 0x5u,
 UART_CHAR_SIZE_6_BITS,
 UART_CHAR_SIZE_7_BITS
} SercomUartCharSize;

typedef enum
{
 SERCOM_RX_PAD_0 = 0,
 SERCOM_RX_PAD_1,
 SERCOM_RX_PAD_2,
 SERCOM_RX_PAD_3
} SercomRXPad;

typedef enum
{
 UART_TX_PAD_0 = 0x0ul, // Only for UART
 UART_TX_PAD_2 = 0x1ul, // Only for UART
 UART_TX_RTS_CTS_PAD_0_2_3 = 0x2ul, // Only for UART with TX on PAD0, RTS on PAD2 and CTS on PAD3
} SercomUartTXPad;

typedef enum
{
 SAMPLE_RATE_x16 = 0x1, // Fractional
 SAMPLE_RATE_x8 = 0x3, // Fractional
} SercomUartSampleRate;

typedef enum
{
 SERCOM_SPI_MODE_0 = 0, // CPOL : 0 | CPHA : 0
 SERCOM_SPI_MODE_1, // CPOL : 0 | CPHA : 1
 SERCOM_SPI_MODE_2, // CPOL : 1 | CPHA : 0
 SERCOM_SPI_MODE_3 // CPOL : 1 | CPHA : 1
} SercomSpiClockMode;

typedef enum
{
 SPI_PAD_0_SCK_1 = 0,
 SPI_PAD_2_SCK_3,
 SPI_PAD_3_SCK_1,
 SPI_PAD_0_SCK_3
} SercomSpiTXPad;

typedef enum
{
 SPI_CHAR_SIZE_8_BITS = 0x0ul,
 SPI_CHAR_SIZE_9_BITS
} SercomSpiCharSize;

typedef enum
{
 WIRE_UNKNOWN_STATE = 0x0ul,
 WIRE_IDLE_STATE,
 WIRE_OWNER_STATE,
 WIRE_BUSY_STATE
} SercomWireBusState;

typedef enum
{
 WIRE_WRITE_FLAG = 0x0ul,
 WIRE_READ_FLAG
} SercomWireReadWriteFlag;

typedef enum
{
 WIRE_MASTER_ACT_NO_ACTION = 0,
 WIRE_MASTER_ACT_REPEAT_START,
 WIRE_MASTER_ACT_READ,
 WIRE_MASTER_ACT_STOP
} SercomMasterCommandWire;

typedef enum
{
 WIRE_MASTER_ACK_ACTION = 0,
 WIRE_MASTER_NACK_ACTION
} SercomMasterAckActionWire;

// SERCOM clock source override is available only on SAMD51 (not 21)
// but the enumeration is made regardless so user code doesn't need
// ifdefs or lengthy comments explaining the different situations --
// the clock-sourcing functions just compile to nothing on SAMD21.
typedef enum {
  SERCOM_CLOCK_SOURCE_FCPU, // F_CPU clock (GCLK0)
  SERCOM_CLOCK_SOURCE_48M, // 48 MHz peripheral clock (GCLK1) (standard)
  SERCOM_CLOCK_SOURCE_100M, // 100 MHz peripheral clock (GCLK2)
  SERCOM_CLOCK_SOURCE_32K, // XOSC32K clock (GCLK3)
  SERCOM_CLOCK_SOURCE_12M, // 12 MHz peripheral clock (GCLK4)
  SERCOM_CLOCK_SOURCE_NO_CHANGE // Leave clock source setting unchanged
} SercomClockSource;

class SERCOM
{
 public:
  SERCOM(Sercom* s) ;

  /* ========== UART ========== */
  void initUART(SercomUartMode mode, SercomUartSampleRate sampleRate, uint32_t baudrate=0) ;
  void initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits) ;
  void initPads(SercomUartTXPad txPad, SercomRXPad rxPad) ;

  void resetUART( void ) ;
  void enableUART( void ) ;
  void flushUART( void ) ;
  void clearStatusUART( void ) ;
  bool availableDataUART( void ) ;
  bool isBufferOverflowErrorUART( void ) ;
  bool isFrameErrorUART( void ) ;
  void clearFrameErrorUART( void ) ;
  bool isParityErrorUART( void ) ;
  bool isDataRegisterEmptyUART( void ) ;
  uint8_t readDataUART( void ) ;
  int writeDataUART(uint8_t data) ;
  bool isUARTError() ;
  void acknowledgeUARTError() ;
  void enableDataRegisterEmptyInterruptUART();
  void disableDataRegisterEmptyInterruptUART();

  /* ========== SPI ========== */
  void initSPI(SercomSpiTXPad mosi, SercomRXPad miso, SercomSpiCharSize charSize, SercomDataOrder dataOrder) ;
  void initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate) ;
  void resetSPI( void ) ;
  void enableSPI( void ) ;
  void disableSPI( void ) ;
  void setDataOrderSPI(SercomDataOrder dataOrder) ;
  SercomDataOrder getDataOrderSPI( void ) ;
  void setBaudrateSPI(uint8_t divider) ;
  void setClockModeSPI(SercomSpiClockMode clockMode) ;
  uint8_t transferDataSPI(uint8_t data) ;
  bool isBufferOverflowErrorSPI( void ) ;
  bool isDataRegisterEmptySPI( void ) ;
  bool isTransmitCompleteSPI( void ) ;
  bool isReceiveCompleteSPI( void ) ;

  /* ========== WIRE ========== */
  void initSlaveWIRE(uint8_t address, bool enableGeneralCall = false) ;
  void initMasterWIRE(uint32_t baudrate) ;

  void resetWIRE( void ) ;
  void enableWIRE( void ) ;
    void disableWIRE( void );
    void prepareNackBitWIRE( void ) ;
    void prepareAckBitWIRE( void ) ;
    void prepareCommandBitsWire(uint8_t cmd);
  bool startTransmissionWIRE(uint8_t address, SercomWireReadWriteFlag flag) ;
  bool sendDataMasterWIRE(uint8_t data) ;
  bool sendDataSlaveWIRE(uint8_t data) ;
  bool isMasterWIRE( void ) ;
  bool isSlaveWIRE( void ) ;
  bool isBusIdleWIRE( void ) ;
  bool isBusOwnerWIRE( void ) ;
  bool isBusUnknownWIRE( void ) ;
  bool isArbLostWIRE( void );
  bool isBusBusyWIRE( void );
  bool isDataReadyWIRE( void ) ;
  bool isStopDetectedWIRE( void ) ;
  bool isRestartDetectedWIRE( void ) ;
  bool isAddressMatch( void ) ;
  bool isMasterReadOperationWIRE( void ) ;
    bool isRXNackReceivedWIRE( void ) ;
  int availableWIRE( void ) ;
  uint8_t readDataWIRE( void ) ;
  int8_t getSercomIndex(void);

  // SERCOM clock source override is only available on
  // SAMD51 (not 21) ... but these functions are declared
  // regardless so user code doesn't need ifdefs or lengthy
  // comments explaining the different situations -- these
  // just compile to nothing on SAMD21.
  void setClockSource(int8_t idx, SercomClockSource src, bool core);
  SercomClockSource getClockSource(void) { return clockSource; };
  uint32_t getFreqRef(void) { return freqRef; };







 private:
  Sercom* sercom;

                SercomClockSource clockSource;
                uint32_t freqRef; // Frequency corresponding to clockSource

  uint8_t calculateBaudrateSynchronous(uint32_t baudrate);
  uint32_t division(uint32_t dividend, uint32_t divisor) ;
  void initClockNVIC( void ) ;
};
# 47 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Uart.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

       

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/HardwareSerial.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
# 22 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Uart.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/SERCOM.h" 1
/*
  Copyright (c) 2014 Arduino.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
# 23 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Uart.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/RingBuffer.h" 1
/*
  Copyright (c) 2014 Arduino.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
# 26 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/RingBuffer.h"
// Define constants and variables for buffering incoming serial data.  We're
// using a ring buffer (I think), in which head is the index of the location
// to which to write the next incoming character and tail is the index of the
// location from which to read.





template <int N>
class RingBufferN
{
  public:
    uint8_t _aucBuffer[N] ;
    volatile int _iHead ;
    volatile int _iTail ;

  public:
    RingBufferN( void ) ;
    void store_char( uint8_t c ) ;
    void clear();
    int read_char();
    int available();
    int availableForStore();
    int peek();
    bool isFull();

  private:
    int nextIndex(int index);
};

typedef RingBufferN<350> RingBuffer;


template <int N>
RingBufferN<N>::RingBufferN( void )
{
    memset( _aucBuffer, 0, N ) ;
    clear();
}

template <int N>
void RingBufferN<N>::store_char( uint8_t c )
{
  int i = nextIndex(_iHead);

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
  {
    _aucBuffer[_iHead] = c ;
    _iHead = i ;
  }
}

template <int N>
void RingBufferN<N>::clear()
{
  _iHead = 0;
  _iTail = 0;
}

template <int N>
int RingBufferN<N>::read_char()
{
  if(_iTail == _iHead)
    return -1;

  uint8_t value = _aucBuffer[_iTail];
  _iTail = nextIndex(_iTail);

  return value;
}

template <int N>
int RingBufferN<N>::available()
{
  int delta = _iHead - _iTail;

  if(delta < 0)
    return N + delta;
  else
    return delta;
}

template <int N>
int RingBufferN<N>::availableForStore()
{
  if (_iHead >= _iTail)
    return N - 1 - _iHead + _iTail;
  else
    return _iTail - _iHead - 1;
}

template <int N>
int RingBufferN<N>::peek()
{
  if(_iTail == _iHead)
    return -1;

  return _aucBuffer[_iTail];
}

template <int N>
int RingBufferN<N>::nextIndex(int index)
{
  return (uint32_t)(index + 1) % N;
}

template <int N>
bool RingBufferN<N>::isFull()
{
  return (nextIndex(_iHead) == _iTail);
}
# 24 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Uart.h" 2

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstddef" 1 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstddef" 3
// -*- C++ -*- forwarding header.

// Copyright (C) 1997-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file cstddef
 *  This is a Standard C++ Library file.  You should @c \#include this file
 *  in your programs, rather than any of the @a *.h implementation files.
 *
 *  This is the C++ version of the Standard C Library header @c stddef.h,
 *  and its contents are (mostly) the same as that header, but are all
 *  contained in the namespace @c std (except for names which are defined
 *  as macros in C).
 */

//
// ISO C++ 14882: 18.1  Types
//




       
# 43 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstddef" 3






# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h" 1 3
// Predefined symbols and macros -*- C++ -*-

// Copyright (C) 1997-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file bits/c++config.h
 *  This is an internal header file, included by other library headers.
 *  Do not attempt to use it directly. @headername{version}
 */
# 50 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstddef" 2 3
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
/* Copyright (C) 1989-2019 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  7.17  Common definitions  <stddef.h>
 */
# 51 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstddef" 2 3

extern "C++"
{

namespace std
{
  // We handle size_t, ptrdiff_t, and nullptr_t in c++config.h.
  using ::max_align_t;
}
# 197 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/cstddef" 3
} // extern "C++"
# 26 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Uart.h" 2


# 27 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Uart.h"
class Uart : public HardwareSerial
{
  public:
    Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX);
    Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS);
    void begin(unsigned long baudRate);
    void begin(unsigned long baudrate, uint16_t config);
    void end();
    int available();
    int availableForWrite();
    int peek();
    int read();
    void flush();
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }

  private:
    SERCOM *sercom;
    RingBuffer rxBuffer;
    RingBuffer txBuffer;

    uint8_t uc_pinRX;
    uint8_t uc_pinTX;
    SercomRXPad uc_padRX;
    SercomUartTXPad uc_padTX;
    uint8_t uc_pinRTS;
    volatile uint32_t* pul_outsetRTS;
    volatile uint32_t* pul_outclrRTS;
    uint32_t ul_pinMaskRTS;
    uint8_t uc_pinCTS;

    SercomNumberStopBit extractNbStopBit(uint16_t config);
    SercomUartCharSize extractCharSize(uint16_t config);
    SercomParityMode extractParity(uint16_t config);
};
# 48 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h" 2



extern "C"
{


/*----------------------------------------------------------------------------
 *        Pins
 *----------------------------------------------------------------------------*/

// Number of pins defined in PinDescription array
# 68 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h"
//#define analogInPinToBit(P)        ( )





/*
 * digitalPinToTimer(..) is AVR-specific and is not defined for SAMD
 * architecture. If you need to check if a pin supports PWM you must
 * use digitalPinHasPWM(..).
 *
 * https://github.com/arduino/Arduino/issues/1833
 */
// #define digitalPinToTimer(P)

// LEDs
# 93 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h"
/*
 * Analog pins
 */
# 117 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h"
static const uint8_t A0 = (67);
static const uint8_t A1 = ((67) + 1);
static const uint8_t A2 = ((67) + 2);
static const uint8_t A3 = ((67) + 3);
static const uint8_t A4 = ((67) + 4);
static const uint8_t A5 = ((67) + 5);
static const uint8_t A6 = ((67) + 6);
static const uint8_t A7 = ((67) + 7);

static const uint8_t A8 = (54);
static const uint8_t A9 = ((54) + 1);
static const uint8_t A10 = ((54) + 2);
static const uint8_t A11 = ((54) + 3);
static const uint8_t A12 = ((54) + 4);
static const uint8_t A13 = ((54) + 5);
static const uint8_t A14 = ((54) + 6);
static const uint8_t A15 = ((54) + 7);

static const uint8_t DAC0 = (67);
static const uint8_t DAC1 = ((67) + 1);



// Other pins

static const uint8_t ATN = (39);

/*
 * Serial interfaces
 */

// Serial1





// Serial2






// Serial3






// Serial4





/*
 * SPI Interfaces
 */
# 186 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h"
static const uint8_t SS = (53);
static const uint8_t MOSI = (66);
static const uint8_t MISO = (64);
static const uint8_t SCK = (65);
# 199 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h"
static const uint8_t SS1 = (83);
static const uint8_t MOSI1 = (82);
static const uint8_t MISO1 = (80);
static const uint8_t SCK1 = (81);

// Needed for SD library






/*
 * Wire Interfaces
 */
# 225 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h"
static const uint8_t SDA = (62);
static const uint8_t SCL = (63);
# 237 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h"
static const uint8_t SDA1 = (25);
static const uint8_t SCL1 = (24);

/*
 * USB
 */




/*
 * I2S Interfaces
 */
# 261 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h"
// On-board QSPI Flash



//QSPI Pins







//PCC Pins
# 299 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h"
}


/*----------------------------------------------------------------------------
 *        Arduino objects - C++ only
 *----------------------------------------------------------------------------*/



/*	=========================
 *	===== SERCOM DEFINITION
 *	=========================
*/
extern SERCOM sercom0;
extern SERCOM sercom1;
extern SERCOM sercom2;
extern SERCOM sercom3;
extern SERCOM sercom4;
extern SERCOM sercom5;
extern SERCOM sercom6;
extern SERCOM sercom7;

extern Uart Serial1;



// These serial port names are intended to allow libraries and architecture-neutral
// sketches to automatically default to the correct port name for a particular type
// of use.  For example, a GPS module would normally connect to SERIAL_PORT_HARDWARE_OPEN,
// the first hardware serial port whose RX/TX pins are not dedicated to another use.
//
// SERIAL_PORT_MONITOR        Port which normally prints to the Arduino Serial Monitor
//
// SERIAL_PORT_USBVIRTUAL     Port which is USB virtual serial
//
// SERIAL_PORT_LINUXBRIDGE    Port which connects to a Linux system via Bridge library
//
// SERIAL_PORT_HARDWARE       Hardware serial port, physical RX & TX pins.
//
// SERIAL_PORT_HARDWARE_OPEN  Hardware serial ports which are open for use.  Their RX & TX
//                            pins are NOT connected to anything by default.


// Serial has no physical pins broken out, so it's not listed as HARDWARE port
# 25 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/delay.h" 2


extern "C" {


/**
 * \brief Returns the number of milliseconds since the Arduino board began running the current program.
 *
 * This number will overflow (go back to zero), after approximately 50 days.
 *
 * \return Number of milliseconds since the program started (uint32_t)
 */
extern unsigned long millis( void ) ;

/**
 * \brief Returns the number of microseconds since the Arduino board began running the current program.
 *
 * This number will overflow (go back to zero), after approximately 70 minutes. On 16 MHz Arduino boards
 * (e.g. Duemilanove and Nano), this function has a resolution of four microseconds (i.e. the value returned is
 * always a multiple of four). On 8 MHz Arduino boards (e.g. the LilyPad), this function has a resolution
 * of eight microseconds.
 *
 * \note There are 1,000 microseconds in a millisecond and 1,000,000 microseconds in a second.
 */
extern unsigned long micros( void ) ;

/**
 * \brief Pauses the program for the amount of time (in miliseconds) specified as parameter.
 * (There are 1000 milliseconds in a second.)
 *
 * \param dwMs the number of milliseconds to pause (uint32_t)
 */
extern void delay( unsigned long dwMs ) ;

/**
 * \brief Pauses the program for the amount of time (in microseconds) specified as parameter.
 *
 * \param dwUs the number of microseconds to pause (uint32_t)
 */

extern void delayMicroseconds( unsigned int );
# 106 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/delay.h"
}
# 81 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2




// Include board variant
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/variants/grand_central_m4/variant.h" 1
/*
  Copyright (c) 2014-2015 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
# 87 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/wiring.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

       


extern "C" {


extern void init(void);


}
# 89 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/wiring_digital.h" 1
/*
  Copyright (c) 2014 Arduino.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/





 extern "C" {




typedef int PinStatus;

/**
 * \brief Configures the specified pin to behave either as an input or an output. See the description of digital pins for details.
 *
 * \param ulPin The number of the pin whose mode you wish to set
 * \param ulMode Can be INPUT, OUTPUT, INPUT_PULLUP or INPUT_PULLDOWN
 */
extern void pinMode( uint32_t dwPin, uint32_t dwMode ) ;

/**
 * \brief Write a HIGH or a LOW value to a digital pin.
 *
 * If the pin has been configured as an OUTPUT with pinMode(), its voltage will be set to the
 * corresponding value: 5V (or 3.3V on 3.3V boards) for HIGH, 0V (ground) for LOW.
 *
 * If the pin is configured as an INPUT, writing a HIGH value with digitalWrite() will enable an internal
 * 20K pullup resistor (see the tutorial on digital pins). Writing LOW will disable the pullup. The pullup
 * resistor is enough to light an LED dimly, so if LEDs appear to work, but very dimly, this is a likely
 * cause. The remedy is to set the pin to an output with the pinMode() function.
 *
 * \note Digital pin PIN_LED is harder to use as a digital input than the other digital pins because it has an LED
 * and resistor attached to it that's soldered to the board on most boards. If you enable its internal 20k pull-up
 * resistor, it will hang at around 1.7 V instead of the expected 5V because the onboard LED and series resistor
 * pull the voltage level down, meaning it always returns LOW. If you must use pin PIN_LED as a digital input, use an
 * external pull down resistor.
 *
 * \param dwPin the pin number
 * \param dwVal HIGH or LOW
 */
extern void digitalWrite( uint32_t dwPin, uint32_t dwVal ) ;

/**
 * \brief Reads the value from a specified digital pin, either HIGH or LOW.
 *
 * \param ulPin The number of the digital pin you want to read (int)
 *
 * \return HIGH or LOW
 */
extern int digitalRead( uint32_t ulPin ) ;


}
# 90 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/wiring_analog.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

       




extern "C" {


/*
 * \brief SAMD products have only one reference for ADC
 */
 // add internal voltages for ATSAMD51 SUPC VREF register
typedef enum _eAnalogReference
{
  AR_DEFAULT,
  AR_INTERNAL1V0,
  AR_INTERNAL1V1,
  AR_INTERNAL1V2,
  AR_INTERNAL1V25,
  AR_INTERNAL2V0,
  AR_INTERNAL2V2,
  AR_INTERNAL2V23,
  AR_INTERNAL2V4,
  AR_INTERNAL2V5,
  AR_INTERNAL1V65,
  AR_EXTERNAL
} eAnalogReference ;


/*
 * \brief Configures the reference voltage used for analog input (i.e. the value used as the top of the input range).
 * This function is kept only for compatibility with existing AVR based API.
 *
 * \param ulMmode Should be set to AR_DEFAULT.
 */
extern void analogReference( eAnalogReference ulMode ) ;

/*
 * \brief Writes an analog value (PWM wave) to a pin.
 *
 * \param ulPin
 * \param ulValue
 */
extern void analogWrite( uint32_t ulPin, uint32_t ulValue ) ;

/*
 * \brief Reads the value from the specified analog pin.
 *
 * \param ulPin
 *
 * \return Read value from selected pin, if no error.
 */
extern uint32_t analogRead( uint32_t ulPin ) ;

/*
 * \brief Set the resolution of analogRead return values. Default is 10 bits (range from 0 to 1023).
 *
 * \param res
 */
extern void analogReadResolution(int res);

/*
 * \brief Set the resolution of analogWrite parameters. Default is 8 bits (range from 0 to 255).
 *
 * \param res
 */
extern void analogWriteResolution(int res);

extern void analogOutputInit( void ) ;


}
# 91 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/wiring_shift.h" 1
/*
  Copyright (c) 2014 Arduino.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/





 extern "C" {


/*
 * \brief
 */
extern uint32_t shiftIn( uint32_t ulDataPin, uint32_t ulClockPin, uint32_t ulBitOrder ) ;


/*
 * \brief
 */
extern void shiftOut( uint32_t ulDataPin, uint32_t ulClockPin, uint32_t ulBitOrder, uint32_t ulVal ) ;



}
# 92 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/WInterrupts.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/







extern "C" {


//      LOW 0
//      HIGH 1




//#define DEFAULT 1


typedef void (*voidFuncPtr)(void);

/*
 * \brief Specifies a named Interrupt Service Routine (ISR) to call when an interrupt occurs.
 *        Replaces any previous function that was attached to the interrupt.
 */
void attachInterrupt(uint32_t pin, voidFuncPtr callback, uint32_t mode);

/*
 * \brief Turns off the given interrupt.
 */
void detachInterrupt(uint32_t pin);


}
# 93 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2

// undefine stdlib's abs if encountered





  template<class T, class L>
  auto min(const T& a, const L& b) -> decltype((b < a) ? b : a)
  {
    return (b < a) ? b : a;
  }

  template<class T, class L>
  auto max(const T& a, const L& b) -> decltype((b < a) ? b : a)
  {
    return (a < b) ? b : a;
  }
# 147 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h"
// Interrupts



// USB




# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBDesc.h" 1
/*
  Copyright (c) 2014 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/




// CDC or HID can be enabled together.
# 34 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBDesc.h"
// CDC
# 49 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBDesc.h"
// Defined string description
# 157 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBCore.h" 1
/*
  Copyright (c) 2014 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/




//	Standard requests
# 34 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBCore.h"
// bEndpointAddress in Endpoint Descriptor
# 47 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBCore.h"
// bmRequestType
# 66 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBCore.h"
//	Class requests
# 76 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBCore.h"
//	Descriptors

// #define USB_DEVICE_DESC_SIZE			18
// #define USB_CONFIGUARTION_DESC_SIZE		9
// #define USB_INTERFACE_DESC_SIZE			9
// #define USB_ENDPOINT_DESC_SIZE			7
# 101 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBCore.h"
// bMaxPower in Configuration Descriptor
# 122 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBCore.h"

# 122 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBCore.h"
#pragma pack(1)
# 122 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBCore.h"


//	Device
typedef struct {
 uint8_t len; // 18
 uint8_t dtype; // 1 USB_DEVICE_DESCRIPTOR_TYPE
 uint16_t usbVersion; // 0x200
 uint8_t deviceClass;
 uint8_t deviceSubClass;
 uint8_t deviceProtocol;
 uint8_t packetSize0; // Packet 0
 uint16_t idVendor;
 uint16_t idProduct;
 uint16_t deviceVersion; // 0x100
 uint8_t iManufacturer;
 uint8_t iProduct;
 uint8_t iSerialNumber;
 uint8_t bNumConfigurations;
} DeviceDescriptor;

//	Config
typedef struct {
 uint8_t len; // 9
 uint8_t dtype; // 2
 uint16_t clen; // total length
 uint8_t numInterfaces;
 uint8_t config;
 uint8_t iconfig;
 uint8_t attributes;
 uint8_t maxPower;
} ConfigDescriptor;

//	String

//	Interface
typedef struct
{
 uint8_t len; // 9
 uint8_t dtype; // 4
 uint8_t number;
 uint8_t alternate;
 uint8_t numEndpoints;
 uint8_t interfaceClass;
 uint8_t interfaceSubClass;
 uint8_t protocol;
 uint8_t iInterface;
} InterfaceDescriptor;

//	Endpoint
typedef struct
{
 uint8_t len; // 7
 uint8_t dtype; // 5
 uint8_t addr;
 uint8_t attr;
 uint16_t packetSize;
 uint8_t interval;
} EndpointDescriptor;

// Interface Association Descriptor
// Used to bind 2 interfaces together in CDC compostite device
typedef struct
{
 uint8_t len; // 8
 uint8_t dtype; // 11
 uint8_t firstInterface;
 uint8_t interfaceCount;
 uint8_t functionClass;
 uint8_t funtionSubClass;
 uint8_t functionProtocol;
 uint8_t iInterface;
} IADDescriptor;

//	CDC CS interface descriptor
typedef struct
{
 uint8_t len; // 5
 uint8_t dtype; // 0x24
 uint8_t subtype;
 uint8_t d0;
 uint8_t d1;
} CDCCSInterfaceDescriptor;

typedef struct
{
 uint8_t len; // 4
 uint8_t dtype; // 0x24
 uint8_t subtype;
 uint8_t d0;
} CDCCSInterfaceDescriptor4;

typedef struct
{
    uint8_t len;
    uint8_t dtype; // 0x24
    uint8_t subtype; // 1
    uint8_t bmCapabilities;
    uint8_t bDataInterface;
} CMFunctionalDescriptor;

typedef struct
{
    uint8_t len;
    uint8_t dtype; // 0x24
    uint8_t subtype; // 1
    uint8_t bmCapabilities;
} ACMFunctionalDescriptor;

typedef struct
{
 //	IAD
 IADDescriptor iad; // Only needed on compound device
 //	Control
 InterfaceDescriptor cif;
 CDCCSInterfaceDescriptor header;
 ACMFunctionalDescriptor controlManagement; // ACM
 CDCCSInterfaceDescriptor functionalDescriptor; // CDC_UNION
 CMFunctionalDescriptor callManagement; // Call Management
 EndpointDescriptor cifin;

 //	Data
 InterfaceDescriptor dif;
 EndpointDescriptor in;
 EndpointDescriptor out;
} CDCDescriptor;

typedef struct
{
 InterfaceDescriptor msc;
 EndpointDescriptor in;
 EndpointDescriptor out;
} MSCDescriptor;


# 255 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBCore.h"
#pragma pack()
# 255 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBCore.h"




/* Table 9-8. Standard Device Descriptor
 * bLength, bDescriptorType, bcdUSB, bDeviceClass, bDeviceSubClass, bDeviceProtocol, bMaxPacketSize0,
 *    idVendor, idProduct, bcdDevice, iManufacturer, iProduct, iSerialNumber, bNumConfigurations */



/* Table 9-10. Standard Configuration Descriptor
 * bLength, bDescriptorType, wTotalLength, bNumInterfaces, bConfigurationValue, iConfiguration
 * bmAttributes, bMaxPower */



/* Table 9-12. Standard Interface Descriptor
 * bLength, bDescriptorType, bInterfaceNumber, bAlternateSetting, bNumEndpoints, bInterfaceClass,
 * bInterfaceSubClass, bInterfaceProtocol, iInterface */



/* Table 9-13. Standard Endpoint Descriptor
 * bLength, bDescriptorType, bEndpointAddress, bmAttributes, wMaxPacketSize, bInterval */



/* iadclasscode_r10.pdf, Table 9\96Z. Standard Interface Association Descriptor
 * bLength, bDescriptorType, bFirstInterface, bInterfaceCount, bFunctionClass, bFunctionSubClass, bFunctionProtocol, iFunction */

// Functional Descriptor General Format


/* bFunctionLength, bDescriptorType, bDescriptorSubtype, function specific data0, functional specific data N-1
 * CS_INTERFACE 24h */
# 158 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBAPI.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

       
# 32 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBAPI.h"
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Stream.h" 1
/*
  Stream.h - base class for character-based streams.
  Copyright (c) 2010 David A. Mellis.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

  parsing functions based on TextFinder library by Michael Margolis
*/
# 33 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBAPI.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/RingBuffer.h" 1
/*
  Copyright (c) 2014 Arduino.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
# 34 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBAPI.h" 2



# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/SAMD21_USBDevice.h" 1
/*
  Copyright (c) 2015 Arduino LLC.  All right reserved.
  SAMD51 support added by Adafruit - Copyright (c) 2018 Dean Miller for Adafruit Industries

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

       

# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 1
/*
  Arduino.h - Main include file for the Arduino SDK
  Copyright (c) 2014 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
# 23 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/SAMD21_USBDevice.h" 2

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/stdlib.h" 1 3

# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/c++/9.2.1/stdlib.h" 3
// -*- C++ -*- compatibility header.

// Copyright (C) 2002-2019 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

/** @file stdlib.h
 *  This is a Standard C++ Library header.
 */
# 25 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/SAMD21_USBDevice.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/tools/arm-none-eabi-gcc/9-2019q4/arm-none-eabi/include/stdio.h" 1 3
/*
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	@(#)stdio.h	5.3 (Berkeley) 3/15/86
 */

/*
 * NB: to fit things in six character monocase externals, the
 * stdio code uses the prefix `__s' for stdio objects, typically
 * followed by a three-character attempt at a mnemonic.
 */
# 26 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/SAMD21_USBDevice.h" 2



# 28 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/SAMD21_USBDevice.h"
typedef uint8_t ep_t;

class USBDevice_SAMD21G18x {
public:
 USBDevice_SAMD21G18x() : usb(((Usb *)0x41000000UL) /**< \brief (USB) APB Base Address */->DEVICE) {
  // Empty
 }

 // USB Device function mapping
 // ---------------------------

 // Reset USB Device
 void reset();

 // Enable
 inline void enable() {
  usb.CTRLA.bit.ENABLE = 1;

  while( usb.SYNCBUSY.reg & (0x1U /**< C code: Unsigned integer literal constant value */ << 1 /**< \brief (USB_SYNCBUSY) Enable Synchronization Busy */) ); //wait for sync

 }
 inline void disable() {
  usb.CTRLA.bit.ENABLE = 0;

  while( usb.SYNCBUSY.reg & (0x1U /**< C code: Unsigned integer literal constant value */ << 1 /**< \brief (USB_SYNCBUSY) Enable Synchronization Busy */) ); //wait for sync

 }

 // USB mode (device/host)
 inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = 0x0U /**< C code: Unsigned integer literal constant value */ /**< \brief (USB_CTRLA) Device Mode */; }
 inline void setUSBHostMode() { usb.CTRLA.bit.MODE = 0x1U /**< C code: Unsigned integer literal constant value */ /**< \brief (USB_CTRLA) Host Mode */; }

 inline void runInStandby() { usb.CTRLA.bit.RUNSTDBY = 1; }
 inline void noRunInStandby() { usb.CTRLA.bit.RUNSTDBY = 0; }
 inline void wakeupHost() { usb.CTRLB.bit.UPRSM = 1; }

 // USB speed
 inline void setFullSpeed() { usb.CTRLB.bit.SPDCONF = 0x0U /**< C code: Unsigned integer literal constant value */ /**< \brief (USB_DEVICE_CTRLB) FS : Full Speed */; }
 inline void setLowSpeed() { usb.CTRLB.bit.SPDCONF = 0x1U /**< C code: Unsigned integer literal constant value */ /**< \brief (USB_DEVICE_CTRLB) LS : Low Speed */; }
 inline void setHiSpeed() { usb.CTRLB.bit.SPDCONF = 0x2U /**< C code: Unsigned integer literal constant value */ /**< \brief (USB_DEVICE_CTRLB) HS : High Speed capable */; }
 inline void setHiSpeedTestMode() { usb.CTRLB.bit.SPDCONF = 0x3U /**< C code: Unsigned integer literal constant value */ /**< \brief (USB_DEVICE_CTRLB) HSTM: High Speed Test Mode (force high-speed mode for test mode) */; }

 // Authorize attach if Vbus is present
 inline void attach() { usb.CTRLB.bit.DETACH = 0; }
 inline void detach() { usb.CTRLB.bit.DETACH = 1; }

 // USB Interrupts
 inline bool isEndOfResetInterrupt() { return usb.INTFLAG.bit.EORST; }
 inline void ackEndOfResetInterrupt() { usb.INTFLAG.reg = (0x1U /**< C code: Unsigned integer literal constant value */ << 3 /**< \brief (USB_DEVICE_INTFLAG) End of Reset */); }
 inline void enableEndOfResetInterrupt() { usb.INTENSET.bit.EORST = 1; }
 inline void disableEndOfResetInterrupt() { usb.INTENCLR.bit.EORST = 1; }

 inline bool isStartOfFrameInterrupt() { return usb.INTFLAG.bit.SOF; }
 inline void ackStartOfFrameInterrupt() { usb.INTFLAG.reg = (0x1U /**< C code: Unsigned integer literal constant value */ << 2 /**< \brief (USB_DEVICE_INTFLAG) Start Of Frame */); }
 inline void enableStartOfFrameInterrupt() { usb.INTENSET.bit.SOF = 1; }
 inline void disableStartOfFrameInterrupt() { usb.INTENCLR.bit.SOF = 1; }

 // USB Address
 inline void setAddress(uint32_t addr) { usb.DADD.bit.DADD = addr; usb.DADD.bit.ADDEN = 1; }
 inline void unsetAddress() { usb.DADD.bit.DADD = 0; usb.DADD.bit.ADDEN = 0; }

 // Frame number
 inline uint16_t frameNumber() { return usb.FNUM.bit.FNUM; }

 // Load calibration values
 void calibrate();

 // USB Device Endpoints function mapping
 // -------------------------------------

 // Config
 inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
 inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }

 // Interrupts
 inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }

 inline bool epBank0IsSetupReceived(ep_t ep) { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
 inline bool epBank0IsStalled(ep_t ep) { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL0; }
 inline bool epBank1IsStalled(ep_t ep) { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
 inline bool epBank0IsTransferComplete(ep_t ep) { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
 inline bool epBank1IsTransferComplete(ep_t ep) { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }

 inline void epBank0AckSetupReceived(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = (0x1U /**< C code: Unsigned integer literal constant value */ << 4 /**< \brief (USB_DEVICE_EPINTFLAG) Received Setup */); }
 inline void epBank0AckStalled(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = ((0x3U /**< C code: Unsigned integer literal constant value */ << 5 /**< \brief (USB_DEVICE_EPINTFLAG) Stall x In/out */) & ((1) << 5 /**< \brief (USB_DEVICE_EPINTFLAG) Stall x In/out */)); }
 inline void epBank1AckStalled(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = ((0x3U /**< C code: Unsigned integer literal constant value */ << 5 /**< \brief (USB_DEVICE_EPINTFLAG) Stall x In/out */) & ((2) << 5 /**< \brief (USB_DEVICE_EPINTFLAG) Stall x In/out */)); }
 inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = ((0x3U /**< C code: Unsigned integer literal constant value */ << 0 /**< \brief (USB_DEVICE_EPINTFLAG) Transfer Complete x */) & ((1) << 0 /**< \brief (USB_DEVICE_EPINTFLAG) Transfer Complete x */)); }
 inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = ((0x3U /**< C code: Unsigned integer literal constant value */ << 0 /**< \brief (USB_DEVICE_EPINTFLAG) Transfer Complete x */) & ((2) << 0 /**< \brief (USB_DEVICE_EPINTFLAG) Transfer Complete x */)); }

 inline void epBank0EnableSetupReceived(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
 inline void epBank0EnableStalled(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL0 = 1; }
 inline void epBank1EnableStalled(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.STALL1 = 1; }
 inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
 inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }

 inline void epBank0DisableSetupReceived(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.RXSTP = 1; }
 inline void epBank0DisableStalled(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL0 = 1; }
 inline void epBank1DisableStalled(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
 inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
 inline void epBank1DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT1 = 1; }

 // Status
 inline bool epBank0IsReady(ep_t ep) { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
 inline bool epBank1IsReady(ep_t ep) { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
 inline void epBank0SetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
 inline void epBank1SetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
 inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
 inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }

 inline void epBank0SetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ0 = 1; }
 inline void epBank1SetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.STALLRQ1 = 1; }
 inline void epBank0ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ0 = 1; }
 inline void epBank1ResetStallReq(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.STALLRQ1 = 1; }

 // Packet
 inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
 inline uint16_t epBank1ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT; }
 inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
 inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
 inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
 inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

 inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
 inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
 inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
 inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
 inline uint8_t EP_PCKSIZE_SIZE(uint16_t size) {
  switch (size) {
  case 8: return 0;
  case 16: return 1;
  case 32: return 2;
  case 64: return 3;
  case 128: return 4;
  case 256: return 5;
  case 512: return 6;
  case 1023: return 7;
  default: return 0;
  }
 }

 inline void epBank0DisableAutoZLP(ep_t ep) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.AUTO_ZLP = 0; }
 inline void epBank1DisableAutoZLP(ep_t ep) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = 0; }
 inline void epBank0EnableAutoZLP(ep_t ep) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.AUTO_ZLP = 1; }
 inline void epBank1EnableAutoZLP(ep_t ep) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.AUTO_ZLP = 1; }

private:
 // USB Device registers
 UsbDevice &usb;

 // Endpoints descriptors table
 __attribute__((__aligned__(4))) UsbDeviceDescriptor EP[8 /* Number of USB end points*/];
};

/*
 * Synchronization primitives.
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
 __Guard() : primask(__get_PRIMASK()), loops(1) {
  __disable_irq();
 }
 ~__Guard() {
  if (primask == 0) {
   __enable_irq();
   // http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
   __ISB();
  }
 }
 uint32_t enter() { return loops--; }
private:
 uint32_t primask;
 uint32_t loops;
};



/*
 * USB EP generic handlers.
 */

class EPHandler {
public:
 virtual void handleEndpoint() = 0;
 virtual uint32_t recv(void *_data, uint32_t len) = 0;
 virtual uint32_t available() const = 0;

 virtual void init() = 0;
};

class DoubleBufferedEPOutHandler : public EPHandler {
public:
 DoubleBufferedEPOutHandler(USBDevice_SAMD21G18x &usbDev, uint32_t endPoint, uint32_t bufferSize) :
  usbd(usbDev),
  ep(endPoint), size(bufferSize),
  current(0), incoming(0),
  first0(0), last0(0), ready0(false),
  first1(0), last1(0), ready1(false),
  notify(false)
 {
  data0 = reinterpret_cast<uint8_t *>(malloc(size));
  data1 = reinterpret_cast<uint8_t *>(malloc(size));

  usbd.epBank0SetSize(ep, 64);
  usbd.epBank0SetType(ep, 3); // BULK OUT

  usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));

  release();
 }

 virtual ~DoubleBufferedEPOutHandler() {
  free((void*)data0);
  free((void*)data1);
 }
 void init() {};

 virtual uint32_t recv(void *_data, uint32_t len)
 {
  uint8_t *data = reinterpret_cast<uint8_t *>(_data);

  // R/W: current, first0/1, ready0/1, notify
  // R  : last0/1, data0/1
  if (current == 0) {
   for (__Guard __guard; __guard.enter(); ) {
    if (!ready0) {
     return 0;
    }
   }
   // when ready0==true the buffer is not being filled and last0 is constant
   uint32_t i;
   for (i=0; i<len && first0 < last0; i++) {
    data[i] = data0[first0++];
   }
   if (first0 == last0) {
    first0 = 0;
    current = 1;
    for (__Guard __guard; __guard.enter(); ) {
     ready0 = false;
     if (notify) {
      notify = false;
      release();
     }
    }
   }
   return i;
  } else {
   for (__Guard __guard; __guard.enter(); ) {
    if (!ready1) {
     return 0;
    }
   }
   // when ready1==true the buffer is not being filled and last1 is constant
   uint32_t i;
   for (i=0; i<len && first1 < last1; i++) {
    data[i] = data1[first1++];
   }
   if (first1 == last1) {
    first1 = 0;
    current = 0;
    for (__Guard __guard; __guard.enter(); ) {
     ready1 = false;
     if (notify) {
      notify = false;
      release();
     }
    }
   }
   return i;
  }
 }

 virtual void handleEndpoint()
 {
  // R/W : incoming, ready0/1
  //   W : last0/1, notify
  if (usbd.epBank0IsTransferComplete(ep))
  {
   // Ack Transfer complete
   usbd.epBank0AckTransferComplete(ep);
   //usbd.epBank0AckTransferFailed(ep); // XXX

   // Update counters and swap banks for non-ZLP's
   if (incoming == 0) {
    last0 = usbd.epBank0ByteCount(ep);
    if (last0 != 0) {
     incoming = 1;
     usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data1));
     for (__Guard __guard; __guard.enter(); ) {
      ready0 = true;
      if (ready1) {
       notify = true;
       return;
      }
      notify = false;
     }
    }
   } else {
    last1 = usbd.epBank0ByteCount(ep);
    if (last1 != 0) {
     incoming = 0;
     usbd.epBank0SetAddress(ep, const_cast<uint8_t *>(data0));
     for (__Guard __guard; __guard.enter(); ) {
      ready1 = true;
      if (ready0) {
       notify = true;
       return;
      }
      notify = false;
     }
    }
   }
   release();
  }
 }

 // Returns how many bytes are stored in the buffers
 virtual uint32_t available() const {
  if (current == 0) {
   bool ready = false;
   for (__Guard __guard; __guard.enter(); ) {
    ready = ready0;
   }
   return ready ? (last0 - first0) : 0;
  } else {
   bool ready = false;
   for (__Guard __guard; __guard.enter(); ) {
    ready = ready1;
   }
   return ready ? (last1 - first1) : 0;
  }
 }

 void release() {
  // Release OUT EP
  usbd.epBank0EnableTransferComplete(ep);
  usbd.epBank0SetMultiPacketSize(ep, size);
  usbd.epBank0SetByteCount(ep, 0);
  usbd.epBank0ResetReady(ep);
 }

private:
 USBDevice_SAMD21G18x &usbd;

 const uint32_t ep;
 const uint32_t size;
 uint32_t current, incoming;

 volatile uint8_t *data0;
 uint32_t first0;
 volatile uint32_t last0;
 volatile bool ready0;

 volatile uint8_t *data1;
 uint32_t first1;
 volatile uint32_t last1;
 volatile bool ready1;

 volatile bool notify;
};
# 38 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USBAPI.h" 2


//================================================================================
// USB

class EPHandler;

// Low level API
typedef struct {
 union {
  uint8_t bmRequestType;
  struct {
   uint8_t direction : 5;
   uint8_t type : 2;
   uint8_t transferDirection : 1;
  };
 };
 uint8_t bRequest;
 uint8_t wValueL;
 uint8_t wValueH;
 uint16_t wIndex;
 uint16_t wLength;
} USBSetup;

class USBDeviceClass {
public:
 USBDeviceClass() {};

 // USB Device API
 void init();
 bool end();
 bool attach();
 bool detach();
 void setAddress(uint32_t addr);

 bool configured();
 bool connected();

 void standby();

 // Setup API
 bool handleClassInterfaceSetup(USBSetup &setup);
 bool handleStandardSetup(USBSetup &setup);
 bool sendDescriptor(USBSetup &setup);

 // Control EndPoint API
 uint32_t sendControl(const void *data, uint32_t len);
 uint32_t sendControl(int /* ep */, const void *data, uint32_t len) { return sendControl(data, len); }
 uint32_t recvControl(void *data, uint32_t len);
 uint32_t sendConfiguration(uint32_t maxlen);
 bool sendStringDescriptor(const uint8_t *string, uint32_t maxlen);
 void initControl(int end);
 uint8_t SendInterfaces(uint32_t* total);
 void packMessages(bool val);

 // Generic EndPoint API
 void initEndpoints(void);
 void initEP(uint32_t ep, uint32_t type);
 void setHandler(uint32_t ep, EPHandler *handler);
 void handleEndpoint(uint8_t ep);

 uint32_t send(uint32_t ep, const void *data, uint32_t len);
 void sendZlp(uint32_t ep);
 uint32_t recv(uint32_t ep, void *data, uint32_t len);
 int recv(uint32_t ep);
 uint32_t available(uint32_t ep);
 void flush(uint32_t ep);
 void stall(uint32_t ep);

 // private?
 uint32_t armSend(uint32_t ep, const void *data, uint32_t len);
 uint8_t armRecv(uint32_t ep);
 uint8_t armRecvCtrlOUT(uint32_t ep);

 void ISRHandler();

private:
 bool initialized;
};

extern USBDeviceClass USBDevice;

//================================================================================
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
 Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
 void begin(uint32_t baud_count);
 void begin(unsigned long, uint8_t);
 void end(void);

 virtual int available(void);
 virtual int availableForWrite(void);
 virtual int peek(void);
 virtual int read(void);
 virtual void flush(void);
 virtual size_t write(uint8_t);
 virtual size_t write(const uint8_t *buffer, size_t size);
 using Print::write; // pull in write(str) from Print
 operator bool();

 size_t readBytes(char *buffer, size_t length);

 // This method allows processing "SEND_BREAK" requests sent by
 // the USB host. Those requests indicate that the host wants to
 // send a BREAK signal and are accompanied by a single uint16_t
 // value, specifying the duration of the break. The value 0
 // means to end any current break, while the value 0xffff means
 // to start an indefinite break.
 // readBreak() will return the value of the most recent break
 // request, but will return it at most once, returning -1 when
 // readBreak() is called again (until another break request is
 // received, which is again returned once).
 // This also mean that if two break requests are received
 // without readBreak() being called in between, the value of the
 // first request is lost.
 // Note that the value returned is a long, so it can return
 // 0-0xffff as well as -1.
 int32_t readBreak();

 // These return the settings specified by the USB host for the
 // serial port. These aren't really used, but are offered here
 // in case a sketch wants to act on these settings.
 uint32_t baud();
 uint8_t stopbits();
 uint8_t paritytype();
 uint8_t numbits();
 bool dtr();
 bool rts();
 enum {
  ONE_STOP_BIT = 0,
  ONE_AND_HALF_STOP_BIT = 1,
  TWO_STOP_BITS = 2,
 };
 enum {
  NO_PARITY = 0,
  ODD_PARITY = 1,
  EVEN_PARITY = 2,
  MARK_PARITY = 3,
  SPACE_PARITY = 4,
 };

private:
 int availableForStore(void);

 USBDeviceClass &usb;
 RingBuffer *_cdc_rx_buffer;
 bool stalled;
};
extern Serial_ Serial;

//================================================================================
//================================================================================
//	MSC 'Driver'

uint32_t MSC_GetInterface(uint8_t* interfaceNum);
uint32_t MSC_GetDescriptor(uint32_t i);
bool MSC_Setup(USBSetup& setup);
bool MSC_Data(uint8_t rx,uint8_t tx);

//================================================================================
//================================================================================
//	CDC 'Driver'

int CDC_GetInterface(uint8_t* interfaceNum);
const void* _CDC_GetInterface(void);
uint32_t _CDC_GetInterfaceLength(void);
uint32_t CDC_GetOtherInterface(uint8_t* interfaceNum);
uint32_t CDC_GetDescriptor(uint32_t i);
bool CDC_Setup(USBSetup& setup);
# 159 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USB_host.h" 1
/*
  Copyright (c) 2014 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/





# 1 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/samd21_host.h" 1
/*
  Copyright (c) 2014 Arduino LLC.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/





extern "C" {


extern __attribute__((__aligned__(4))) volatile UsbHostDescriptor usb_pipe_table[8 /* Number of USB end points*/];
# 60 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/samd21_host.h"
// USB host connection/disconnection monitoring
# 69 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/samd21_host.h"
// Initiates a USB register reset


// Bus Reset







// Initiates a SOF events





// USB address of pipes



// Pipes




// Pipe configuration


// Pipe data management
# 109 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/samd21_host.h"
// Endpoint Interrupt Summary


// Run in Standby

// Force host mode


// Enable USB macro

// Disable USB macro


// Force full speed mode



}
# 24 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USB_host.h" 2

extern "C" {
# 34 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/USB/USB_host.h"
//! \brief Device speed
/*typedef enum {
	UHD_SPEED_LOW  = 0,
	UHD_SPEED_FULL = 1,
	UHD_SPEED_HIGH = 2,
} uhd_speed_t;*/

//! States of USBB interface
typedef enum {
 UHD_STATE_NO_VBUS = 0,
 UHD_STATE_DISCONNECTED = 1,
 UHD_STATE_CONNECTED = 2,
 UHD_STATE_ERROR = 3,
} uhd_vbus_state_t;

extern void UHD_Init(void);
extern void UHD_Handler(void);
extern void USB_SetHandler(void (*pf_isr)(void));
extern uhd_vbus_state_t UHD_GetVBUSState(void);
extern uint32_t UHD_Pipe0_Alloc(uint32_t ul_add, uint32_t ul_ep_size);
extern uint32_t UHD_Pipe_Alloc(uint32_t ul_dev_addr, uint32_t ul_dev_ep, uint32_t ul_type, uint32_t ul_dir, uint32_t ul_maxsize, uint32_t ul_interval, uint32_t ul_nb_bank);
extern void UHD_Pipe_CountZero(uint32_t ul_pipe);
extern void UHD_Pipe_Free(uint32_t ul_pipe);
extern uint32_t UHD_Pipe_Read(uint32_t ul_pipe, uint32_t ul_size, uint8_t* data);
extern void UHD_Pipe_Write(uint32_t ul_pipe, uint32_t ul_size, uint8_t* data);
extern void UHD_Pipe_Send(uint32_t ul_pipe, uint32_t ul_token_type);
extern uint32_t UHD_Pipe_Is_Transfer_Complete(uint32_t ul_pipe, uint32_t ul_token_type);


}
# 160 "/home/srhodes/.arduino15/packages/adafruit/hardware/samd/1.7.16/cores/arduino/Arduino.h" 2
# 2 "/tmp/arduino/sketches/8F1DEBBEE04D15732CCF4089F12DBD55/sketch/HVPS.ino.cpp" 2
# 1 "/home/srhodes/Arduino/HVPS/HVPS.ino"
/*
 * This file is part of the HVPS demonstration project.
 *
 * Developed for the National Aeronautics and Space Administration (NASA)
 * by High Voltage Research and Development (HVRND) under NASA contract.
 * 
 * Copyright (c) 2024 HVRND LLC.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */